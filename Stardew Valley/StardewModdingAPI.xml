<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StardewModdingAPI</name>
    </assembly>
    <members>
        <member name="T:StardewModdingAPI.Constants">
            <summary>Contains SMAPI's constants and assumptions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.ApiVersion">
            <summary>SMAPI's current semantic version.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.MinimumGameVersion">
            <summary>The minimum supported version of Stardew Valley.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.MaximumGameVersion">
            <summary>The maximum supported version of Stardew Valley.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.TargetPlatform">
            <summary>The target game platform.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.ExecutionPath">
            <summary>The path to the game folder.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.DataPath">
            <summary>The directory path containing Stardew Valley's app data.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.LogDir">
            <summary>The directory path in which error logs should be stored.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.SavesPath">
            <summary>The directory path where all saves are stored.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.SaveFolderName">
            <summary>The name of the current save folder (if save info is available, regardless of whether the save file exists yet).</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.CurrentSavePath">
            <summary>The absolute path to the current save folder (if save info is available and the save file exists).</summary>
        </member>
        <member name="F:StardewModdingAPI.Constants.HomePageUrl">
            <summary>The URL of the SMAPI home page.</summary>
        </member>
        <member name="F:StardewModdingAPI.Constants.InternalFilesPath">
            <summary>The absolute path to the folder containing SMAPI's internal files.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.ApiConfigPath">
            <summary>The file path for the SMAPI configuration file.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.ApiMetadataPath">
            <summary>The file path for the SMAPI metadata file.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.LogNamePrefix">
            <summary>The filename prefix used for all SMAPI logs.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.LogFilename">
            <summary>The filename for SMAPI's main log, excluding the <see cref="P:StardewModdingAPI.Constants.LogExtension"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.LogExtension">
            <summary>The filename extension for SMAPI log files.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.FatalCrashLog">
            <summary>The file path for the log containing the previous fatal crash, if any.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.FatalCrashMarker">
            <summary>The file path which stores a fatal crash message for the next run.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.UpdateMarker">
            <summary>The file path which stores the detected update version for the next run.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.DefaultModsPath">
            <summary>The default full path to search for mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.ModsPath">
            <summary>The actual full path to search for mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.GameVersion">
            <summary>The game's current semantic version.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.Platform">
            <summary>The target game platform.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.GameAssemblyName">
            <summary>The game's assembly name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.DefaultLanguage">
            <summary>The language code for non-translated mod assets.</summary>
        </member>
        <member name="M:StardewModdingAPI.Constants.GetCompatibleApiVersion(StardewModdingAPI.ISemanticVersion)">
            <summary>Get the SMAPI version to recommend for an older game version, if any.</summary>
            <param name="version">The game version to search.</param>
            <returns>Returns the compatible SMAPI version, or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:StardewModdingAPI.Constants.GetAssemblyMap(StardewModdingAPI.Toolkit.Utilities.Platform)">
            <summary>Get metadata for mapping assemblies to the current platform.</summary>
            <param name="targetPlatform">The target game platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Constants.GetSaveFolderName">
            <summary>Get the name of the save folder, if any.</summary>
        </member>
        <member name="M:StardewModdingAPI.Constants.GetSaveFolderPathIfExists">
            <summary>Get the path to the current save folder, if any.</summary>
        </member>
        <member name="T:StardewModdingAPI.ContentSource">
            <summary>Specifies a source containing content that can be loaded.</summary>
        </member>
        <member name="F:StardewModdingAPI.ContentSource.GameContent">
            <summary>Assets in the game's content manager (i.e. XNBs in the game's content folder).</summary>
        </member>
        <member name="F:StardewModdingAPI.ContentSource.ModFolder">
            <summary>XNB files in the current mod's folder.</summary>
        </member>
        <member name="T:StardewModdingAPI.Context">
            <summary>Provides information about the current game state.</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.IsGameLaunched">
            <summary>Whether the game has performed core initialization. This becomes true right before the first update tick.</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.IsWorldReady">
            <summary>Whether the player has loaded a save and the world has finished initializing.</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.IsPlayerFree">
            <summary>Whether <see cref="P:StardewModdingAPI.Context.IsWorldReady"/> is true and the player is free to act in the world (no menu is displayed, no cutscene is in progress, etc).</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.CanPlayerMove">
            <summary>Whether <see cref="P:StardewModdingAPI.Context.IsPlayerFree"/> is true and the player is free to move (e.g. not using a tool).</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.IsInDrawLoop">
            <summary>Whether the game is currently running the draw loop. This isn't relevant to most mods, since you should use <see cref="T:StardewModdingAPI.Events.IDisplayEvents"/> events to draw to the screen.</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.IsMultiplayer">
            <summary>Whether <see cref="P:StardewModdingAPI.Context.IsWorldReady"/> and the player loaded the save in multiplayer mode (regardless of whether any other players are connected).</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.IsMainPlayer">
            <summary>Whether <see cref="P:StardewModdingAPI.Context.IsWorldReady"/> and the current player is the main player. This is always true in single-player, and true when hosting in multiplayer.</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.IsSaveLoaded">
            <summary>Whether a player save has been loaded.</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.IsSaving">
            <summary>Whether the game is currently writing to the save file.</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.LoadStage">
            <summary>The current stage in the game's loading process.</summary>
        </member>
        <member name="T:StardewModdingAPI.Enums.LoadStage">
            <summary>A low-level stage in the game's loading process.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.LoadStage.None">
            <summary>A save is not loaded or loading.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.LoadStage.CreatedBasicInfo">
            <summary>The game is creating a new save slot, and has initialized the basic save info.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.LoadStage.CreatedLocations">
            <summary>The game is creating a new save slot, and has initialized the in-game locations.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.LoadStage.CreatedSaveFile">
            <summary>The game is creating a new save slot, and has created the physical save files.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.LoadStage.SaveParsed">
            <summary>The game is loading a save slot, and has read the raw save data into <see cref="F:StardewValley.SaveGame.loaded"/>. Not applicable when connecting to a multiplayer host. This is equivalent to <see cref="M:StardewValley.SaveGame.getLoadEnumerator(System.String)"/> value 20.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.LoadStage.SaveLoadedBasicInfo">
            <summary>The game is loading a save slot, and has applied the basic save info (including player data). Not applicable when connecting to a multiplayer host. Note that some basic info (like daily luck) is not initialized at this point. This is equivalent to <see cref="M:StardewValley.SaveGame.getLoadEnumerator(System.String)"/> value 36.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.LoadStage.SaveLoadedLocations">
            <summary>The game is loading a save slot, and has applied the in-game location data. Not applicable when connecting to a multiplayer host. This is equivalent to <see cref="M:StardewValley.SaveGame.getLoadEnumerator(System.String)"/> value 50.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.LoadStage.Preloaded">
            <summary>The final metadata has been loaded from the save file. This happens before the game applies problem fixes, checks for achievements, starts music, etc. Not applicable when connecting to a multiplayer host.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.LoadStage.Loaded">
            <summary>The save is fully loaded, but the world may not be fully initialized yet.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.LoadStage.Ready">
            <summary>The save is fully loaded, the world has been initialized, and <see cref="P:StardewModdingAPI.Context.IsWorldReady"/> is now true.</summary>
        </member>
        <member name="T:StardewModdingAPI.Enums.SkillType">
            <summary>The player skill types.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.SkillType.Combat">
            <summary>The combat skill.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.SkillType.Farming">
            <summary>The farming skill.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.SkillType.Fishing">
            <summary>The fishing skill.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.SkillType.Foraging">
            <summary>The foraging skill.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.SkillType.Mining">
            <summary>The mining skill.</summary>
        </member>
        <member name="F:StardewModdingAPI.Enums.SkillType.Luck">
            <summary>The luck skill.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.BuildingListChangedEventArgs">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.IWorldEvents.BuildingListChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.BuildingListChangedEventArgs.Location">
            <summary>The location which changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.BuildingListChangedEventArgs.Added">
            <summary>The buildings added to the location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.BuildingListChangedEventArgs.Removed">
            <summary>The buildings removed from the location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.BuildingListChangedEventArgs.IsCurrentLocation">
            <summary>Whether this is the location containing the local player.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.BuildingListChangedEventArgs.#ctor(StardewValley.GameLocation,System.Collections.Generic.IEnumerable{StardewValley.Buildings.Building},System.Collections.Generic.IEnumerable{StardewValley.Buildings.Building})">
            <summary>Construct an instance.</summary>
            <param name="location">The location which changed.</param>
            <param name="added">The buildings added to the location.</param>
            <param name="removed">The buildings removed from the location.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.ButtonPressedEventArgs">
            <summary>Event arguments when a button is pressed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.ButtonPressedEventArgs.InputState">
            <summary>The game's current input state.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ButtonPressedEventArgs.Button">
            <summary>The button on the controller, keyboard, or mouse.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ButtonPressedEventArgs.Cursor">
            <summary>The current cursor position.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.ButtonPressedEventArgs.#ctor(StardewModdingAPI.SButton,StardewModdingAPI.ICursorPosition,StardewModdingAPI.Framework.Input.SInputState)">
            <summary>Construct an instance.</summary>
            <param name="button">The button on the controller, keyboard, or mouse.</param>
            <param name="cursor">The cursor position.</param>
            <param name="inputState">The game's current input state.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.ButtonPressedEventArgs.IsSuppressed">
            <summary>Whether a mod has indicated the key was already handled, so the game should handle it.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.ButtonPressedEventArgs.IsSuppressed(StardewModdingAPI.SButton)">
            <summary>Whether a mod has indicated the key was already handled, so the game should handle it.</summary>
            <param name="button">The button to check.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.ButtonPressedEventArgs.IsDown(StardewModdingAPI.SButton)">
            <summary>Get whether a given button was pressed or held.</summary>
            <param name="button">The button to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.ButtonReleasedEventArgs">
            <summary>Event arguments when a button is released.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.ButtonReleasedEventArgs.InputState">
            <summary>The game's current input state.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ButtonReleasedEventArgs.Button">
            <summary>The button on the controller, keyboard, or mouse.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ButtonReleasedEventArgs.Cursor">
            <summary>The current cursor position.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.ButtonReleasedEventArgs.#ctor(StardewModdingAPI.SButton,StardewModdingAPI.ICursorPosition,StardewModdingAPI.Framework.Input.SInputState)">
            <summary>Construct an instance.</summary>
            <param name="button">The button on the controller, keyboard, or mouse.</param>
            <param name="cursor">The cursor position.</param>
            <param name="inputState">The game's current input state.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.ButtonReleasedEventArgs.IsSuppressed">
            <summary>Whether a mod has indicated the key was already handled, so the game should handle it.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.ButtonReleasedEventArgs.IsSuppressed(StardewModdingAPI.SButton)">
            <summary>Whether a mod has indicated the key was already handled, so the game should handle it.</summary>
            <param name="button">The button to check.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.ButtonReleasedEventArgs.IsDown(StardewModdingAPI.SButton)">
            <summary>Get whether a given button was pressed or held.</summary>
            <param name="button">The button to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.ChangeType">
            <summary>Indicates how an inventory item changed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.ChangeType.Removed">
            <summary>The entire stack was removed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.ChangeType.Added">
            <summary>The entire stack was added.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.ChangeType.StackChange">
            <summary>The stack size changed.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.ChestInventoryChangedEventArgs">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.IWorldEvents.ChestInventoryChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ChestInventoryChangedEventArgs.Chest">
            <summary>The chest whose inventory changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ChestInventoryChangedEventArgs.Location">
            <summary>The location containing the chest.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ChestInventoryChangedEventArgs.Added">
            <summary>The added item stacks.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ChestInventoryChangedEventArgs.Removed">
            <summary>The removed item stacks.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ChestInventoryChangedEventArgs.QuantityChanged">
            <summary>The item stacks whose size changed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.ChestInventoryChangedEventArgs.#ctor(StardewValley.Objects.Chest,StardewValley.GameLocation,StardewValley.Item[],StardewValley.Item[],StardewModdingAPI.Events.ItemStackSizeChange[])">
            <summary>Construct an instance.</summary>
            <param name="chest">The chest whose inventory changed.</param>
            <param name="location">The location containing the chest.</param>
            <param name="added">The added item stacks.</param>
            <param name="removed">The removed item stacks.</param>
            <param name="quantityChanged">The item stacks whose size changed.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.CursorMovedEventArgs">
            <summary>Event arguments when the in-game cursor is moved.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.CursorMovedEventArgs.OldPosition">
            <summary>The previous cursor position.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.CursorMovedEventArgs.NewPosition">
            <summary>The current cursor position.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.CursorMovedEventArgs.#ctor(StardewModdingAPI.ICursorPosition,StardewModdingAPI.ICursorPosition)">
            <summary>Construct an instance.</summary>
            <param name="oldPosition">The previous cursor position.</param>
            <param name="newPosition">The new cursor position.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.DayEndingEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.DayEnding"/> event.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.DayStartedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.DayStarted"/> event.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.DebrisListChangedEventArgs">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.IWorldEvents.DebrisListChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.DebrisListChangedEventArgs.Location">
            <summary>The location which changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.DebrisListChangedEventArgs.Added">
            <summary>The debris added to the location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.DebrisListChangedEventArgs.Removed">
            <summary>The debris removed from the location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.DebrisListChangedEventArgs.IsCurrentLocation">
            <summary>Whether this is the location containing the local player.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.DebrisListChangedEventArgs.#ctor(StardewValley.GameLocation,System.Collections.Generic.IEnumerable{StardewValley.Debris},System.Collections.Generic.IEnumerable{StardewValley.Debris})">
            <summary>Construct an instance.</summary>
            <param name="location">The location which changed.</param>
            <param name="added">The debris added to the location.</param>
            <param name="removed">The debris removed from the location.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.GameLaunchedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.GameLaunched"/> event.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.IDisplayEvents">
            <summary>Events related to UI and drawing to the screen.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IDisplayEvents.MenuChanged">
            <summary>Raised after a game menu is opened, closed, or replaced.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IDisplayEvents.Rendering">
            <summary>Raised before the game draws anything to the screen in a draw tick, as soon as the sprite batch is opened. The sprite batch may be closed and reopened multiple times after this event is called, but it's only raised once per draw tick. This event isn't useful for drawing to the screen, since the game will draw over it.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IDisplayEvents.Rendered">
            <summary>Raised after the game draws to the sprite patch in a draw tick, just before the final sprite batch is rendered to the screen. Since the game may open/close the sprite batch multiple times in a draw tick, the sprite batch may not contain everything being drawn and some things may already be rendered to the screen. Content drawn to the sprite batch at this point will be drawn over all vanilla content (including menus, HUD, and cursor).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IDisplayEvents.RenderingWorld">
            <summary>Raised before the game world is drawn to the screen. This event isn't useful for drawing to the screen, since the game will draw over it.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IDisplayEvents.RenderedWorld">
            <summary>Raised after the game world is drawn to the sprite patch, before it's rendered to the screen. Content drawn to the sprite batch at this point will be drawn over the world, but under any active menu, HUD elements, or cursor.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IDisplayEvents.RenderingActiveMenu">
            <summary>When a menu is open (<see cref="P:StardewValley.Game1.activeClickableMenu"/> isn't null), raised before that menu is drawn to the screen. This includes the game's internal menus like the title screen. Content drawn to the sprite batch at this point will appear under the menu.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IDisplayEvents.RenderedActiveMenu">
            <summary>When a menu is open (<see cref="P:StardewValley.Game1.activeClickableMenu"/> isn't null), raised after that menu is drawn to the sprite batch but before it's rendered to the screen. Content drawn to the sprite batch at this point will appear over the menu and menu cursor.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IDisplayEvents.RenderingHud">
            <summary>Raised before drawing the HUD (item toolbar, clock, etc) to the screen. The vanilla HUD may be hidden at this point (e.g. because a menu is open). Content drawn to the sprite batch at this point will appear under the HUD.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IDisplayEvents.RenderedHud">
            <summary>Raised after drawing the HUD (item toolbar, clock, etc) to the sprite batch, but before it's rendered to the screen. The vanilla HUD may be hidden at this point (e.g. because a menu is open). Content drawn to the sprite batch at this point will appear over the HUD.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IDisplayEvents.WindowResized">
            <summary>Raised after the game window is resized.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.IGameLoopEvents">
            <summary>Events linked to the game's update loop. The update loop runs roughly ≈60 times/second to run game logic like state changes, action handling, etc. These can be useful, but you should consider more semantic events like <see cref="T:StardewModdingAPI.Events.IInputEvents"/> if possible.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.GameLaunched">
            <summary>Raised after the game is launched, right before the first update tick. This happens once per game session (unrelated to loading saves). All mods are loaded and initialized at this point, so this is a good time to set up mod integrations.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.UpdateTicking">
            <summary>Raised before the game state is updated (≈60 times per second).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.UpdateTicked">
            <summary>Raised after the game state is updated (≈60 times per second).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicking">
            <summary>Raised once per second before the game state is updated.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicked">
            <summary>Raised once per second after the game state is updated.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.SaveCreating">
            <summary>Raised before the game creates a new save file.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.SaveCreated">
            <summary>Raised after the game finishes creating the save file.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.Saving">
            <summary>Raised before the game begins writing data to the save file (except the initial save creation).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.Saved">
            <summary>Raised after the game finishes writing data to the save file (except the initial save creation).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.SaveLoaded">
            <summary>Raised after the player loads a save slot and the world is initialized.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.DayStarted">
            <summary>Raised after the game begins a new day (including when the player loads a save).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.DayEnding">
            <summary>Raised before the game ends the current day. This happens before it starts setting up the next day and before <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.Saving"/>.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.TimeChanged">
            <summary>Raised after the in-game clock time changes.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IGameLoopEvents.ReturnedToTitle">
            <summary>Raised after the game returns to the title screen.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.IInputEvents">
            <summary>Events raised when the player provides input using a controller, keyboard, or mouse.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IInputEvents.ButtonPressed">
            <summary>Raised after the player presses a button on the keyboard, controller, or mouse.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IInputEvents.ButtonReleased">
            <summary>Raised after the player releases a button on the keyboard, controller, or mouse.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IInputEvents.CursorMoved">
            <summary>Raised after the player moves the in-game cursor.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IInputEvents.MouseWheelScrolled">
            <summary>Raised after the player scrolls the mouse wheel.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.IModEvents">
            <summary>Manages access to events raised by SMAPI.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.IModEvents.Display">
            <summary>Events related to UI and drawing to the screen.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.IModEvents.GameLoop">
            <summary>Events linked to the game's update loop. The update loop runs roughly ≈60 times/second to run game logic like state changes, action handling, etc. These can be useful, but you should consider more semantic events like <see cref="P:StardewModdingAPI.Events.IModEvents.Input"/> if possible.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.IModEvents.Input">
            <summary>Events raised when the player provides input using a controller, keyboard, or mouse.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.IModEvents.Multiplayer">
            <summary>Events raised for multiplayer messages and connections.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.IModEvents.Player">
            <summary>Events raised when the player data changes.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.IModEvents.World">
            <summary>Events raised when something changes in the world.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.IModEvents.Specialized">
            <summary>Events serving specialized edge cases that shouldn't be used by most mods.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.IMultiplayerEvents">
            <summary>Events raised for multiplayer messages and connections.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerContextReceived">
            <summary>Raised after the mod context for a peer is received. This happens before the game approves the connection, so the player doesn't yet exist in the game. This is the earliest point where messages can be sent to the peer via SMAPI.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IMultiplayerEvents.ModMessageReceived">
            <summary>Raised after a mod message is received over the network.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerDisconnected">
            <summary>Raised after the connection with a peer is severed.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.InventoryChangedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IPlayerEvents.InventoryChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.InventoryChangedEventArgs.Player">
            <summary>The player whose inventory changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.InventoryChangedEventArgs.Added">
            <summary>The added item stacks.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.InventoryChangedEventArgs.Removed">
            <summary>The removed item stacks.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.InventoryChangedEventArgs.QuantityChanged">
            <summary>The item stacks whose size changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.InventoryChangedEventArgs.IsLocalPlayer">
            <summary>Whether the affected player is the local one.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.InventoryChangedEventArgs.#ctor(StardewValley.Farmer,StardewValley.Item[],StardewValley.Item[],StardewModdingAPI.Events.ItemStackSizeChange[])">
            <summary>Construct an instance.</summary>
            <param name="player">The player whose inventory changed.</param>
            <param name="added">The added item stacks.</param>
            <param name="removed">The removed item stacks.</param>
            <param name="quantityChanged">The item stacks whose size changed.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.IPlayerEvents">
            <summary>Events raised when the player data changes.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IPlayerEvents.InventoryChanged">
            <summary>Raised after items are added or removed to a player's inventory. NOTE: this event is currently only raised for the current player.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IPlayerEvents.LevelChanged">
            <summary>Raised after a player skill level changes. This happens as soon as they level up, not when the game notifies the player after their character goes to bed.  NOTE: this event is currently only raised for the current player.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IPlayerEvents.Warped">
            <summary>Raised after a player warps to a new location. NOTE: this event is currently only raised for the current player.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.ISpecializedEvents">
            <summary>Events serving specialized edge cases that shouldn't be used by most mods.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.ISpecializedEvents.LoadStageChanged">
            <summary>Raised when the low-level stage in the game's loading process has changed. This is an advanced event for mods which need to run code at specific points in the loading process. The available stages or when they happen might change without warning in future versions (e.g. due to changes in the game's load process), so mods using this event are more likely to break or have bugs. Most mods should use <see cref="T:StardewModdingAPI.Events.IGameLoopEvents"/> instead.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicking">
            <summary>Raised before the game state is updated (≈60 times per second), regardless of normal SMAPI validation. This event is not thread-safe and may be invoked while game logic is running asynchronously. Changes to game state in this method may crash the game or corrupt an in-progress save. Do not use this event unless you're fully aware of the context in which your code will be run. Mods using this event will trigger a stability warning in the SMAPI console.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicked">
            <summary>Raised after the game state is updated (≈60 times per second), regardless of normal SMAPI validation. This event is not thread-safe and may be invoked while game logic is running asynchronously. Changes to game state in this method may crash the game or corrupt an in-progress save. Do not use this event unless you're fully aware of the context in which your code will be run. Mods using this event will trigger a stability warning in the SMAPI console.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.ItemStackSizeChange">
            <summary>An inventory item stack size change.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ItemStackSizeChange.Item">
            <summary>The item whose stack size changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ItemStackSizeChange.OldSize">
            <summary>The previous stack size.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ItemStackSizeChange.NewSize">
            <summary>The new stack size.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.ItemStackSizeChange.#ctor(StardewValley.Item,System.Int32,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="item">The item whose stack size changed.</param>
            <param name="oldSize">The previous stack size.</param>
            <param name="newSize">The new stack size.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.IWorldEvents">
            <summary>Events raised when something changes in the world.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IWorldEvents.LocationListChanged">
            <summary>Raised after a game location is added or removed.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IWorldEvents.BuildingListChanged">
            <summary>Raised after buildings are added or removed in a location.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IWorldEvents.DebrisListChanged">
            <summary>Raised after debris are added or removed in a location.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IWorldEvents.LargeTerrainFeatureListChanged">
            <summary>Raised after large terrain features (like bushes) are added or removed in a location.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IWorldEvents.NpcListChanged">
            <summary>Raised after NPCs are added or removed in a location.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IWorldEvents.ObjectListChanged">
            <summary>Raised after objects are added or removed in a location.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IWorldEvents.ChestInventoryChanged">
            <summary>Raised after items are added or removed from a chest.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.IWorldEvents.TerrainFeatureListChanged">
            <summary>Raised after terrain features (like floors and trees) are added or removed in a location.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.LargeTerrainFeatureListChangedEventArgs">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.IWorldEvents.LargeTerrainFeatureListChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.LargeTerrainFeatureListChangedEventArgs.Location">
            <summary>The location which changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.LargeTerrainFeatureListChangedEventArgs.Added">
            <summary>The large terrain features added to the location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.LargeTerrainFeatureListChangedEventArgs.Removed">
            <summary>The large terrain features removed from the location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.LargeTerrainFeatureListChangedEventArgs.IsCurrentLocation">
            <summary>Whether this is the location containing the local player.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.LargeTerrainFeatureListChangedEventArgs.#ctor(StardewValley.GameLocation,System.Collections.Generic.IEnumerable{StardewValley.TerrainFeatures.LargeTerrainFeature},System.Collections.Generic.IEnumerable{StardewValley.TerrainFeatures.LargeTerrainFeature})">
            <summary>Construct an instance.</summary>
            <param name="location">The location which changed.</param>
            <param name="added">The large terrain features added to the location.</param>
            <param name="removed">The large terrain features removed from the location.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.LevelChangedEventArgs">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.IPlayerEvents.LevelChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.LevelChangedEventArgs.Player">
            <summary>The player whose skill level changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.LevelChangedEventArgs.Skill">
            <summary>The skill whose level changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.LevelChangedEventArgs.OldLevel">
            <summary>The previous skill level.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.LevelChangedEventArgs.NewLevel">
            <summary>The new skill level.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.LevelChangedEventArgs.IsLocalPlayer">
            <summary>Whether the affected player is the local one.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.LevelChangedEventArgs.#ctor(StardewValley.Farmer,StardewModdingAPI.Enums.SkillType,System.Int32,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="player">The player whose skill level changed.</param>
            <param name="skill">The skill whose level changed.</param>
            <param name="oldLevel">The previous skill level.</param>
            <param name="newLevel">The new skill level.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.LoadStageChangedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.LoadStageChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.LoadStageChangedEventArgs.OldStage">
            <summary>The previous load stage.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.LoadStageChangedEventArgs.NewStage">
            <summary>The new load stage.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.LoadStageChangedEventArgs.#ctor(StardewModdingAPI.Enums.LoadStage,StardewModdingAPI.Enums.LoadStage)">
            <summary>Construct an instance.</summary>
            <param name="old">The previous load stage.</param>
            <param name="current">The new load stage.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.LocationListChangedEventArgs">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.IWorldEvents.LocationListChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.LocationListChangedEventArgs.Added">
            <summary>The added locations.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.LocationListChangedEventArgs.Removed">
            <summary>The removed locations.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.LocationListChangedEventArgs.#ctor(System.Collections.Generic.IEnumerable{StardewValley.GameLocation},System.Collections.Generic.IEnumerable{StardewValley.GameLocation})">
            <summary>Construct an instance.</summary>
            <param name="added">The added locations.</param>
            <param name="removed">The removed locations.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.MenuChangedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IDisplayEvents.MenuChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.MenuChangedEventArgs.OldMenu">
            <summary>The previous menu.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.MenuChangedEventArgs.NewMenu">
            <summary>The current menu.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.MenuChangedEventArgs.#ctor(StardewValley.Menus.IClickableMenu,StardewValley.Menus.IClickableMenu)">
            <summary>Construct an instance.</summary>
            <param name="oldMenu">The previous menu.</param>
            <param name="newMenu">The current menu.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.ModMessageReceivedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IMultiplayerEvents.ModMessageReceived"/> event.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.ModMessageReceivedEventArgs.Message">
            <summary>The underlying message model.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ModMessageReceivedEventArgs.FromPlayerID">
            <summary>The unique ID of the player from whose computer the message was sent.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ModMessageReceivedEventArgs.FromModID">
            <summary>The unique ID of the mod which sent the message.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ModMessageReceivedEventArgs.Type">
            <summary>A message type which can be used to decide whether it's the one you want to handle, like <c>SetPlayerLocation</c>. This doesn't need to be globally unique, so mods should check the <see cref="P:StardewModdingAPI.Events.ModMessageReceivedEventArgs.FromModID"/>.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.ModMessageReceivedEventArgs.#ctor(StardewModdingAPI.Framework.Networking.ModMessageModel)">
            <summary>Construct an instance.</summary>
            <param name="message">The received message.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.ModMessageReceivedEventArgs.ReadAs``1">
            <summary>Read the message data into the given model type.</summary>
            <typeparam name="TModel">The message model type.</typeparam>
        </member>
        <member name="T:StardewModdingAPI.Events.MouseWheelScrolledEventArgs">
            <summary>Event arguments when the player scrolls the mouse wheel.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.MouseWheelScrolledEventArgs.Position">
            <summary>The cursor position.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.MouseWheelScrolledEventArgs.OldValue">
            <summary>The old scroll value.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.MouseWheelScrolledEventArgs.NewValue">
            <summary>The new scroll value.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.MouseWheelScrolledEventArgs.Delta">
            <summary>The amount by which the scroll value changed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.MouseWheelScrolledEventArgs.#ctor(StardewModdingAPI.ICursorPosition,System.Int32,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="position">The cursor position.</param>
            <param name="oldValue">The old scroll value.</param>
            <param name="newValue">The new scroll value.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.NpcListChangedEventArgs">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.IWorldEvents.NpcListChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.NpcListChangedEventArgs.Location">
            <summary>The location which changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.NpcListChangedEventArgs.Added">
            <summary>The NPCs added to the location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.NpcListChangedEventArgs.Removed">
            <summary>The NPCs removed from the location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.NpcListChangedEventArgs.IsCurrentLocation">
            <summary>Whether this is the location containing the local player.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.NpcListChangedEventArgs.#ctor(StardewValley.GameLocation,System.Collections.Generic.IEnumerable{StardewValley.NPC},System.Collections.Generic.IEnumerable{StardewValley.NPC})">
            <summary>Construct an instance.</summary>
            <param name="location">The location which changed.</param>
            <param name="added">The NPCs added to the location.</param>
            <param name="removed">The NPCs removed from the location.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.ObjectListChangedEventArgs">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.IWorldEvents.ObjectListChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ObjectListChangedEventArgs.Location">
            <summary>The location which changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ObjectListChangedEventArgs.Added">
            <summary>The objects added to the location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ObjectListChangedEventArgs.Removed">
            <summary>The objects removed from the location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ObjectListChangedEventArgs.IsCurrentLocation">
            <summary>Whether this is the location containing the local player.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.ObjectListChangedEventArgs.#ctor(StardewValley.GameLocation,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Xna.Framework.Vector2,StardewValley.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Xna.Framework.Vector2,StardewValley.Object}})">
            <summary>Construct an instance.</summary>
            <param name="location">The location which changed.</param>
            <param name="added">The objects added to the location.</param>
            <param name="removed">The objects removed from the location.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicked"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs.Ticks">
            <summary>The number of ticks elapsed since the game started, including the current tick.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs.IsMultipleOf(System.UInt32)">
            <summary>Get whether <see cref="P:StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs.Ticks"/> is a multiple of the given <paramref name="number"/>. This is mainly useful if you want to run logic intermittently (e.g. <code>e.IsMultipleOf(30)</code> for every half-second).</summary>
            <param name="number">The factor to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.OneSecondUpdateTickingEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicking"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.OneSecondUpdateTickingEventArgs.Ticks">
            <summary>The number of ticks elapsed since the game started, excluding the upcoming tick.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.OneSecondUpdateTickingEventArgs.IsMultipleOf(System.UInt32)">
            <summary>Get whether <see cref="P:StardewModdingAPI.Events.OneSecondUpdateTickingEventArgs.Ticks"/> is a multiple of the given <paramref name="number"/>. This is mainly useful if you want to run logic intermittently (e.g. <code>e.IsMultipleOf(30)</code> for every half-second).</summary>
            <param name="number">The factor to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.PeerContextReceivedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerContextReceived"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.PeerContextReceivedEventArgs.Peer">
            <summary>The peer whose metadata was received.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.PeerContextReceivedEventArgs.#ctor(StardewModdingAPI.IMultiplayerPeer)">
            <summary>Construct an instance.</summary>
            <param name="peer">The peer whose metadata was received.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.PeerDisconnectedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerDisconnected"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.PeerDisconnectedEventArgs.Peer">
            <summary>The peer who disconnected.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.PeerDisconnectedEventArgs.#ctor(StardewModdingAPI.IMultiplayerPeer)">
            <summary>Construct an instance.</summary>
            <param name="peer">The peer who disconnected.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.RenderedActiveMenuEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedActiveMenu"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.RenderedActiveMenuEventArgs.SpriteBatch">
            <summary>The sprite batch being drawn. Add anything you want to appear on-screen to this sprite batch.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.RenderedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IDisplayEvents.Rendered"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.RenderedEventArgs.SpriteBatch">
            <summary>The sprite batch being drawn. Add anything you want to appear on-screen to this sprite batch.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.RenderedHudEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedHud"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.RenderedHudEventArgs.SpriteBatch">
            <summary>The sprite batch being drawn. Add anything you want to appear on-screen to this sprite batch.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.RenderedWorldEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedWorld"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.RenderedWorldEventArgs.SpriteBatch">
            <summary>The sprite batch being drawn. Add anything you want to appear on-screen to this sprite batch.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.RenderingActiveMenuEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingActiveMenu"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.RenderingActiveMenuEventArgs.SpriteBatch">
            <summary>The sprite batch being drawn. Add anything you want to appear on-screen to this sprite batch.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.RenderingEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IDisplayEvents.Rendering"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.RenderingEventArgs.SpriteBatch">
            <summary>The sprite batch being drawn. Add anything you want to appear on-screen to this sprite batch.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.RenderingHudEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingHud"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.RenderingHudEventArgs.SpriteBatch">
            <summary>The sprite batch being drawn. Add anything you want to appear on-screen to this sprite batch.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.RenderingWorldEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingWorld"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.RenderingWorldEventArgs.SpriteBatch">
            <summary>The sprite batch being drawn. Add anything you want to appear on-screen to this sprite batch.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.ReturnedToTitleEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.ReturnedToTitle"/> event.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.SaveCreatedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveCreated"/> event.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.SaveCreatingEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveCreating"/> event.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.SavedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.Saved"/> event.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.SaveLoadedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveLoaded"/> event.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.SavingEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.Saving"/> event.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.TerrainFeatureListChangedEventArgs">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.IWorldEvents.TerrainFeatureListChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.TerrainFeatureListChangedEventArgs.Location">
            <summary>The location which changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.TerrainFeatureListChangedEventArgs.Added">
            <summary>The terrain features added to the location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.TerrainFeatureListChangedEventArgs.Removed">
            <summary>The terrain features removed from the location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.TerrainFeatureListChangedEventArgs.IsCurrentLocation">
            <summary>Whether this is the location containing the local player.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.TerrainFeatureListChangedEventArgs.#ctor(StardewValley.GameLocation,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Xna.Framework.Vector2,StardewValley.TerrainFeatures.TerrainFeature}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Xna.Framework.Vector2,StardewValley.TerrainFeatures.TerrainFeature}})">
            <summary>Construct an instance.</summary>
            <param name="location">The location which changed.</param>
            <param name="added">The terrain features added to the location.</param>
            <param name="removed">The terrain features removed from the location.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.TimeChangedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.TimeChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.TimeChangedEventArgs.OldTime">
            <summary>The previous time of day in 24-hour notation (like 1600 for 4pm). The clock time resets when the player sleeps, so 2am (before sleeping) is 2600.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.TimeChangedEventArgs.NewTime">
            <summary>The current time of day in 24-hour notation (like 1600 for 4pm). The clock time resets when the player sleeps, so 2am (before sleeping) is 2600.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.TimeChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="oldTime">The previous time of day in 24-hour notation (like 1600 for 4pm).</param>
            <param name="newTime">The current time of day in 24-hour notation (like 1600 for 4pm).</param>
        </member>
        <member name="T:StardewModdingAPI.Events.UnvalidatedUpdateTickedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicked"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.UnvalidatedUpdateTickedEventArgs.Ticks">
            <summary>The number of ticks elapsed since the game started, including the current tick.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.UnvalidatedUpdateTickedEventArgs.IsOneSecond">
            <summary>Whether <see cref="P:StardewModdingAPI.Events.UnvalidatedUpdateTickedEventArgs.Ticks"/> is a multiple of 60, which happens approximately once per second.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.UnvalidatedUpdateTickedEventArgs.IsMultipleOf(System.UInt32)">
            <summary>Get whether <see cref="P:StardewModdingAPI.Events.UnvalidatedUpdateTickedEventArgs.Ticks"/> is a multiple of the given <paramref name="number"/>. This is mainly useful if you want to run logic intermittently (e.g. <code>e.IsMultipleOf(30)</code> for every half-second).</summary>
            <param name="number">The factor to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.UnvalidatedUpdateTickingEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicking"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.UnvalidatedUpdateTickingEventArgs.Ticks">
            <summary>The number of ticks elapsed since the game started, excluding the upcoming tick.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.UnvalidatedUpdateTickingEventArgs.IsOneSecond">
            <summary>Whether <see cref="P:StardewModdingAPI.Events.UnvalidatedUpdateTickingEventArgs.Ticks"/> is a multiple of 60, which happens approximately once per second.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.UnvalidatedUpdateTickingEventArgs.IsMultipleOf(System.UInt32)">
            <summary>Get whether <see cref="P:StardewModdingAPI.Events.UnvalidatedUpdateTickingEventArgs.Ticks"/> is a multiple of the given <paramref name="number"/>. This is mainly useful if you want to run logic intermittently (e.g. <code>e.IsMultipleOf(30)</code> for every half-second).</summary>
            <param name="number">The factor to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.UpdateTickedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.UpdateTicked"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.UpdateTickedEventArgs.Ticks">
            <summary>The number of ticks elapsed since the game started, including the current tick.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.UpdateTickedEventArgs.IsOneSecond">
            <summary>Whether <see cref="P:StardewModdingAPI.Events.UpdateTickedEventArgs.Ticks"/> is a multiple of 60, which happens approximately once per second.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.UpdateTickedEventArgs.IsMultipleOf(System.UInt32)">
            <summary>Get whether <see cref="P:StardewModdingAPI.Events.UpdateTickedEventArgs.Ticks"/> is a multiple of the given <paramref name="number"/>. This is mainly useful if you want to run logic intermittently (e.g. <code>e.IsMultipleOf(30)</code> for every half-second).</summary>
            <param name="number">The factor to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.UpdateTickingEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.UpdateTicking"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.UpdateTickingEventArgs.Ticks">
            <summary>The number of ticks elapsed since the game started, excluding the upcoming tick.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.UpdateTickingEventArgs.IsOneSecond">
            <summary>Whether <see cref="P:StardewModdingAPI.Events.UpdateTickingEventArgs.Ticks"/> is a multiple of 60, which happens approximately once per second.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.UpdateTickingEventArgs.IsMultipleOf(System.UInt32)">
            <summary>Get whether <see cref="P:StardewModdingAPI.Events.UpdateTickingEventArgs.Ticks"/> is a multiple of the given <paramref name="number"/>. This is mainly useful if you want to run logic intermittently (e.g. <code>e.IsMultipleOf(30)</code> for every half-second).</summary>
            <param name="number">The factor to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.WarpedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IPlayerEvents.Warped"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.WarpedEventArgs.Player">
            <summary>The player who warped to a new location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.WarpedEventArgs.OldLocation">
            <summary>The player's previous location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.WarpedEventArgs.NewLocation">
            <summary>The player's current location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.WarpedEventArgs.IsLocalPlayer">
            <summary>Whether the affected player is the local one.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.WarpedEventArgs.#ctor(StardewValley.Farmer,StardewValley.GameLocation,StardewValley.GameLocation)">
            <summary>Construct an instance.</summary>
            <param name="player">The player who warped to a new location.</param>
            <param name="oldLocation">The player's previous location.</param>
            <param name="newLocation">The player's current location.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.WindowResizedEventArgs">
            <summary>Event arguments for an <see cref="E:StardewModdingAPI.Events.IDisplayEvents.WindowResized"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.WindowResizedEventArgs.OldSize">
            <summary>The previous window size.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.WindowResizedEventArgs.NewSize">
            <summary>The current window size.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.WindowResizedEventArgs.#ctor(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>Construct an instance.</summary>
            <param name="oldSize">The previous window size.</param>
            <param name="newSize">The current window size.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Command">
            <summary>A command that can be submitted through the SMAPI console to interact with SMAPI.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Command.Mod">
            <summary>The mod that registered the command (or <c>null</c> if registered by SMAPI).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Command.Name">
            <summary>The command name, which the user must type to trigger it.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Command.Documentation">
            <summary>The human-readable documentation shown when the player runs the built-in 'help' command.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Command.Callback">
            <summary>The method to invoke when the command is triggered. This method is passed the command name and arguments submitted by the user.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Command.#ctor(StardewModdingAPI.Framework.IModMetadata,System.String,System.String,System.Action{System.String,System.String[]})">
            <summary>Construct an instance.</summary>
            <param name="mod">The mod that registered the command (or <c>null</c> if registered by SMAPI).</param>
            <param name="name">The command name, which the user must type to trigger it.</param>
            <param name="documentation">The human-readable documentation shown when the player runs the built-in 'help' command.</param>
            <param name="callback">The method to invoke when the command is triggered. This method is passed the command name and arguments submitted by the user.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.CommandManager">
            <summary>Manages console commands.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.CommandManager.Commands">
            <summary>The commands registered with SMAPI.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.CommandManager.Add(StardewModdingAPI.Framework.IModMetadata,System.String,System.String,System.Action{System.String,System.String[]},System.Boolean)">
            <summary>Add a console command.</summary>
            <param name="mod">The mod adding the command (or <c>null</c> for a SMAPI command).</param>
            <param name="name">The command name, which the user must type to trigger it.</param>
            <param name="documentation">The human-readable documentation shown when the player runs the built-in 'help' command.</param>
            <param name="callback">The method to invoke when the command is triggered. This method is passed the command name and arguments submitted by the user.</param>
            <param name="allowNullCallback">Whether to allow a null <paramref name="callback"/> argument; this should only used for backwards compatibility.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> or <paramref name="callback"/> is null or empty.</exception>
            <exception cref="T:System.FormatException">The <paramref name="name"/> is not a valid format.</exception>
            <exception cref="T:System.ArgumentException">There's already a command with that name.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.CommandManager.Get(System.String)">
            <summary>Get a command by its unique name.</summary>
            <param name="name">The command name.</param>
            <returns>Returns the matching command, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.CommandManager.GetAll">
            <summary>Get all registered commands.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.CommandManager.TryParse(System.String,System.String@,System.String[]@,StardewModdingAPI.Framework.Command@)">
            <summary>Try to parse a raw line of user input into an executable command.</summary>
            <param name="input">The raw user input.</param>
            <param name="name">The parsed command name.</param>
            <param name="args">The parsed command arguments.</param>
            <param name="command">The command which can handle the input.</param>
            <returns>Returns true if the input was successfully parsed and matched to a command; else false.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.CommandManager.Trigger(System.String,System.String[])">
            <summary>Trigger a command.</summary>
            <param name="name">The command name.</param>
            <param name="arguments">The command arguments.</param>
            <returns>Returns whether a matching command was triggered.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.CommandManager.ParseArgs(System.String)">
            <summary>Parse a string into command arguments.</summary>
            <param name="input">The string to parse.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.CommandManager.GetNormalizedName(System.String)">
            <summary>Get a normalized command name.</summary>
            <param name="name">The command name.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ContentCoordinator">
            <summary>The central logic for creating content managers, invalidating caches, and propagating asset changes.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentCoordinator.ManagedPrefix">
            <summary>An asset key prefix for assets from SMAPI mod folders.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentCoordinator.Monitor">
            <summary>Encapsulates monitoring and logging.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentCoordinator.CoreAssets">
            <summary>Provides metadata for core game assets.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentCoordinator.Reflection">
            <summary>Simplifies access to private code.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentCoordinator.JsonHelper">
            <summary>Encapsulates SMAPI's JSON file parsing.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentCoordinator.OnLoadingFirstAsset">
            <summary>A callback to invoke the first time *any* game content manager loads an asset.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentCoordinator.ContentManagers">
            <summary>The loaded content managers (including the <see cref="P:StardewModdingAPI.Framework.ContentCoordinator.MainContentManager"/>).</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentCoordinator.DefaultLanguage">
            <summary>The language code for language-agnostic mod assets.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentCoordinator.IsDisposed">
            <summary>Whether the content coordinator has been disposed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentCoordinator.MainContentManager">
            <summary>The primary content manager used for most assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentCoordinator.Language">
            <summary>The current language as a constant.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentCoordinator.Loaders">
            <summary>Interceptors which provide the initial versions of matching assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentCoordinator.Editors">
            <summary>Interceptors which edit matching assets after they're loaded.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentCoordinator.FullRootDirectory">
            <summary>The absolute path to the <see cref="P:Microsoft.Xna.Framework.Content.ContentManager.RootDirectory"/>.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentCoordinator.#ctor(System.IServiceProvider,System.String,System.Globalization.CultureInfo,StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.Reflection.Reflector,StardewModdingAPI.Toolkit.Serialization.JsonHelper,System.Action)">
            <summary>Construct an instance.</summary>
            <param name="serviceProvider">The service provider to use to locate services.</param>
            <param name="rootDirectory">The root directory to search for content.</param>
            <param name="currentCulture">The current culture for which to localize content.</param>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="reflection">Simplifies access to private code.</param>
            <param name="jsonHelper">Encapsulates SMAPI's JSON file parsing.</param>
            <param name="onLoadingFirstAsset">A callback to invoke the first time *any* game content manager loads an asset.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentCoordinator.CreateGameContentManager(System.String)">
            <summary>Get a new content manager which handles reading files from the game content folder with support for interception.</summary>
            <param name="name">A name for the mod manager. Not guaranteed to be unique.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentCoordinator.CreateModContentManager(System.String,System.String,StardewModdingAPI.Framework.ContentManagers.IContentManager)">
            <summary>Get a new content manager which handles reading files from a SMAPI mod folder with support for unpacked files.</summary>
            <param name="name">A name for the mod manager. Not guaranteed to be unique.</param>
            <param name="rootDirectory">The root directory to search for content (or <c>null</c> for the default).</param>
            <param name="gameContentManager">The game content manager used for map tilesheets not provided by the mod.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentCoordinator.GetLocale">
            <summary>Get the current content locale.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentCoordinator.OnLocaleChanged">
            <summary>Perform any cleanup needed when the locale changes.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentCoordinator.IsManagedAssetKey(System.String)">
            <summary>Get whether this asset is mapped to a mod folder.</summary>
            <param name="key">The asset key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentCoordinator.TryParseManagedAssetKey(System.String,System.String@,System.String@)">
            <summary>Parse a managed SMAPI asset key which maps to a mod folder.</summary>
            <param name="key">The asset key.</param>
            <param name="contentManagerID">The unique name for the content manager which should load this asset.</param>
            <param name="relativePath">The relative path within the mod folder.</param>
            <returns>Returns whether the asset was parsed successfully.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentCoordinator.GetManagedAssetPrefix(System.String)">
            <summary>Get the managed asset key prefix for a mod.</summary>
            <param name="modID">The mod's unique ID.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentCoordinator.LoadManagedAsset``1(System.String,System.String)">
            <summary>Get a copy of an asset from a mod folder.</summary>
            <typeparam name="T">The asset type.</typeparam>
            <param name="contentManagerID">The unique name for the content manager which should load this asset.</param>
            <param name="relativePath">The internal SMAPI asset key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentCoordinator.InvalidateCache(System.Func{StardewModdingAPI.IAssetInfo,System.Boolean},System.Boolean)">
            <summary>Purge matched assets from the cache.</summary>
            <param name="predicate">Matches the asset keys to invalidate.</param>
            <param name="dispose">Whether to dispose invalidated assets. This should only be <c>true</c> when they're being invalidated as part of a dispose, to avoid crashing the game.</param>
            <returns>Returns the invalidated asset keys.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentCoordinator.InvalidateCache(System.Func{System.String,System.Type,System.Boolean},System.Boolean)">
            <summary>Purge matched assets from the cache.</summary>
            <param name="predicate">Matches the asset keys to invalidate.</param>
            <param name="dispose">Whether to dispose invalidated assets. This should only be <c>true</c> when they're being invalidated as part of a dispose, to avoid crashing the game.</param>
            <returns>Returns the invalidated asset names.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentCoordinator.Dispose">
            <summary>Dispose held resources.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentCoordinator.OnDisposing(StardewModdingAPI.Framework.ContentManagers.IContentManager)">
            <summary>A callback invoked when a content manager is disposed.</summary>
            <param name="contentManager">The content manager being disposed.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ContentManagers.BaseContentManager">
            <summary>A content manager which handles reading files from a SMAPI mod folder with support for unpacked files.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.Coordinator">
            <summary>The central coordinator which manages content managers.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.Cache">
            <summary>The underlying asset cache.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.Monitor">
            <summary>Encapsulates monitoring and logging.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.IsDisposed">
            <summary>Whether the content coordinator has been disposed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.OnDisposing">
            <summary>A callback to invoke when the content manager is being disposed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.LanguageCodes">
            <summary>The language enum values indexed by locale code.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.Disposables">
            <summary>A list of disposable assets.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.BaseDisposableReferences">
            <summary>The disposable assets tracked by the base content manager.</summary>
            <remarks>This should be kept empty to avoid keeping disposable assets referenced forever, which prevents garbage collection when they're unused. Disposable assets are tracked by <see cref="F:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.Disposables"/> instead, which avoids a hard reference.</remarks>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.Name">
            <summary>A name for the mod manager. Not guaranteed to be unique.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.Language">
            <summary>The current language as a constant.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.FullRootDirectory">
            <summary>The absolute path to the <see cref="P:Microsoft.Xna.Framework.Content.ContentManager.RootDirectory"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.IsNamespaced">
            <summary>Whether this content manager can be targeted by managed asset keys (e.g. to load assets from a mod folder).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.#ctor(System.String,System.IServiceProvider,System.String,System.Globalization.CultureInfo,StardewModdingAPI.Framework.ContentCoordinator,StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.Reflection.Reflector,System.Action{StardewModdingAPI.Framework.ContentManagers.BaseContentManager},System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="name">A name for the mod manager. Not guaranteed to be unique.</param>
            <param name="serviceProvider">The service provider to use to locate services.</param>
            <param name="rootDirectory">The root directory to search for content.</param>
            <param name="currentCulture">The current culture for which to localize content.</param>
            <param name="coordinator">The central coordinator which manages content managers.</param>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="reflection">Simplifies access to private code.</param>
            <param name="onDisposing">A callback to invoke when the content manager is being disposed.</param>
            <param name="isNamespaced">Whether this content manager handles managed asset keys (e.g. to load assets from a mod folder).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.Load``1(System.String)">
            <summary>Load an asset that has been processed by the content pipeline.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.Load``1(System.String,StardewValley.LocalizedContentManager.LanguageCode)">
            <summary>Load an asset that has been processed by the content pipeline.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
            <param name="language">The language code for which to load content.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.Load``1(System.String,StardewValley.LocalizedContentManager.LanguageCode,System.Boolean)">
            <summary>Load an asset that has been processed by the content pipeline.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
            <param name="language">The language code for which to load content.</param>
            <param name="useCache">Whether to read/write the loaded asset to the asset cache.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.LoadBase``1(System.String)">
            <summary>Load the base asset without localization.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.OnLocaleChanged">
            <summary>Perform any cleanup needed when the locale changes.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.NormalizePathSeparators(System.String)">
            <summary>Normalize path separators in a file path. For asset keys, see <see cref="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.AssertAndNormalizeAssetName(System.String)"/> instead.</summary>
            <param name="path">The file path to normalize.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.AssertAndNormalizeAssetName(System.String)">
            <summary>Assert that the given key has a valid format and return a normalized form consistent with the underlying cache.</summary>
            <param name="assetName">The asset key to check.</param>
            <exception cref="T:StardewModdingAPI.Framework.Exceptions.SContentLoadException">The asset key is empty or contains invalid characters.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.GetLocale">
            <summary>Get the current content locale.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.GetLocale(StardewValley.LocalizedContentManager.LanguageCode)">
            <summary>The locale for a language.</summary>
            <param name="language">The language.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.IsLoaded(System.String)">
            <summary>Get whether the content manager has already loaded and cached the given asset.</summary>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.GetAssetKeys">
            <summary>Get the cached asset keys.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.InvalidateCache(System.Func{System.String,System.Type,System.Boolean},System.Boolean)">
            <summary>Purge matched assets from the cache.</summary>
            <param name="predicate">Matches the asset keys to invalidate.</param>
            <param name="dispose">Whether to dispose invalidated assets. This should only be <c>true</c> when they're being invalidated as part of a dispose, to avoid crashing the game.</param>
            <returns>Returns the invalidated asset names and instances.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.Dispose(System.Boolean)">
            <summary>Dispose held resources.</summary>
            <param name="isDisposing">Whether the content manager is being disposed (rather than finalized).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.Unload">
            <inheritdoc />
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.RawLoad``1(System.String,System.Boolean)">
            <summary>Load an asset file directly from the underlying content manager.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The normalized asset key.</param>
            <param name="useCache">Whether to read/write the loaded asset to the asset cache.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.TrackAsset``1(System.String,``0,StardewValley.LocalizedContentManager.LanguageCode,System.Boolean)">
            <summary>Add tracking data to an asset and add it to the cache.</summary>
            <typeparam name="T">The type of asset to inject.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
            <param name="value">The asset value.</param>
            <param name="language">The language code for which to inject the asset.</param>
            <param name="useCache">Whether to save the asset to the asset cache.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.ParseCacheKey(System.String,System.String@,System.String@)">
            <summary>Parse a cache key into its component parts.</summary>
            <param name="cacheKey">The input cache key.</param>
            <param name="assetName">The original asset name.</param>
            <param name="localeCode">The asset locale code (or <c>null</c> if not localized).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.IsNormalizedKeyLoaded(System.String)">
            <summary>Get whether an asset has already been loaded.</summary>
            <param name="normalizedAssetName">The normalized asset name.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.GetKeyLocales">
            <summary>Get the locale codes (like <c>ja-JP</c>) used in asset keys.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.BaseContentManager.GetAssetName(System.String)">
            <summary>Get the asset name from a cache key.</summary>
            <param name="cacheKey">The input cache key.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ContentManagers.GameContentManager">
            <summary>A content manager which handles reading files from the game content folder with support for interception.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.GameContentManager.AssetsBeingLoaded">
            <summary>The assets currently being intercepted by <see cref="T:StardewModdingAPI.IAssetLoader"/> instances. This is used to prevent infinite loops when a loader loads a new asset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentManagers.GameContentManager.Loaders">
            <summary>Interceptors which provide the initial versions of matching assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentManagers.GameContentManager.Editors">
            <summary>Interceptors which edit matching assets after they're loaded.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.GameContentManager.IsLocalizableLookup">
            <summary>A lookup which indicates whether the asset is localizable (i.e. the filename contains the locale), if previously loaded.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.GameContentManager.IsFirstLoad">
            <summary>Whether the next load is the first for any game content manager.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.GameContentManager.OnLoadingFirstAsset">
            <summary>A callback to invoke the first time *any* game content manager loads an asset.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.GameContentManager.#ctor(System.String,System.IServiceProvider,System.String,System.Globalization.CultureInfo,StardewModdingAPI.Framework.ContentCoordinator,StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.Reflection.Reflector,System.Action{StardewModdingAPI.Framework.ContentManagers.BaseContentManager},System.Action)">
            <summary>Construct an instance.</summary>
            <param name="name">A name for the mod manager. Not guaranteed to be unique.</param>
            <param name="serviceProvider">The service provider to use to locate services.</param>
            <param name="rootDirectory">The root directory to search for content.</param>
            <param name="currentCulture">The current culture for which to localize content.</param>
            <param name="coordinator">The central coordinator which manages content managers.</param>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="reflection">Simplifies access to private code.</param>
            <param name="onDisposing">A callback to invoke when the content manager is being disposed.</param>
            <param name="onLoadingFirstAsset">A callback to invoke the first time *any* game content manager loads an asset.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.GameContentManager.Load``1(System.String,StardewValley.LocalizedContentManager.LanguageCode,System.Boolean)">
            <summary>Load an asset that has been processed by the content pipeline.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
            <param name="language">The language code for which to load content.</param>
            <param name="useCache">Whether to read/write the loaded asset to the asset cache.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.GameContentManager.OnLocaleChanged">
            <summary>Perform any cleanup needed when the locale changes.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.GameContentManager.CreateTemporary">
            <summary>Create a new content manager for temporary use.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.GameContentManager.IsNormalizedKeyLoaded(System.String)">
            <summary>Get whether an asset has already been loaded.</summary>
            <param name="normalizedAssetName">The normalized asset name.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.GameContentManager.TrackAsset``1(System.String,``0,StardewValley.LocalizedContentManager.LanguageCode,System.Boolean)">
            <summary>Add tracking data to an asset and add it to the cache.</summary>
            <typeparam name="T">The type of asset to inject.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
            <param name="value">The asset value.</param>
            <param name="language">The language code for which to inject the asset.</param>
            <param name="useCache">Whether to save the asset to the asset cache.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.GameContentManager.RawLoad``1(System.String,StardewValley.LocalizedContentManager.LanguageCode,System.Boolean)">
            <summary>Load an asset file directly from the underlying content manager.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The normalized asset key.</param>
            <param name="language">The language code for which to load content.</param>
            <param name="useCache">Whether to read/write the loaded asset to the asset cache.</param>
            <remarks>Derived from <see cref="M:StardewValley.LocalizedContentManager.Load``1(System.String,StardewValley.LocalizedContentManager.LanguageCode)"/>.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.GameContentManager.TryParseExplicitLanguageAssetKey(System.String,System.String@,StardewValley.LocalizedContentManager.LanguageCode@)">
            <summary>Parse an asset key that contains an explicit language into its asset name and language, if applicable.</summary>
            <param name="rawAsset">The asset key to parse.</param>
            <param name="assetName">The asset name without the language code.</param>
            <param name="language">The language code removed from the asset name.</param>
            <returns>Returns whether the asset key contains an explicit language and was successfully parsed.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.GameContentManager.ApplyLoader``1(StardewModdingAPI.IAssetInfo)">
            <summary>Load the initial asset from the registered <see cref="P:StardewModdingAPI.Framework.ContentManagers.GameContentManager.Loaders"/>.</summary>
            <param name="info">The basic asset metadata.</param>
            <returns>Returns the loaded asset metadata, or <c>null</c> if no loader matched.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.GameContentManager.ApplyEditors``1(StardewModdingAPI.IAssetInfo,StardewModdingAPI.IAssetData)">
            <summary>Apply any <see cref="P:StardewModdingAPI.Framework.ContentManagers.GameContentManager.Editors"/> to a loaded asset.</summary>
            <typeparam name="T">The asset type.</typeparam>
            <param name="info">The basic asset metadata.</param>
            <param name="asset">The loaded asset.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.GameContentManager.GetInterceptors``1(System.Collections.Generic.IDictionary{StardewModdingAPI.Framework.IModMetadata,System.Collections.Generic.IList{``0}})">
            <summary>Get all registered interceptors from a list.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ContentManagers.IContentManager">
            <summary>A content manager which handles reading files.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentManagers.IContentManager.Name">
            <summary>A name for the mod manager. Not guaranteed to be unique.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentManagers.IContentManager.Language">
            <summary>The current language as a constant.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentManagers.IContentManager.FullRootDirectory">
            <summary>The absolute path to the <see cref="P:Microsoft.Xna.Framework.Content.ContentManager.RootDirectory"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentManagers.IContentManager.IsNamespaced">
            <summary>Whether this content manager can be targeted by managed asset keys (e.g. to load assets from a mod folder).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.IContentManager.Load``1(System.String,StardewValley.LocalizedContentManager.LanguageCode,System.Boolean)">
            <summary>Load an asset that has been processed by the content pipeline.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
            <param name="language">The language code for which to load content.</param>
            <param name="useCache">Whether to read/write the loaded asset to the asset cache.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.IContentManager.OnLocaleChanged">
            <summary>Perform any cleanup needed when the locale changes.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.IContentManager.NormalizePathSeparators(System.String)">
            <summary>Normalize path separators in a file path. For asset keys, see <see cref="M:StardewModdingAPI.Framework.ContentManagers.IContentManager.AssertAndNormalizeAssetName(System.String)"/> instead.</summary>
            <param name="path">The file path to normalize.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.IContentManager.AssertAndNormalizeAssetName(System.String)">
            <summary>Assert that the given key has a valid format and return a normalized form consistent with the underlying cache.</summary>
            <param name="assetName">The asset key to check.</param>
            <exception cref="T:StardewModdingAPI.Framework.Exceptions.SContentLoadException">The asset key is empty or contains invalid characters.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.IContentManager.GetLocale">
            <summary>Get the current content locale.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.IContentManager.GetLocale(StardewValley.LocalizedContentManager.LanguageCode)">
            <summary>The locale for a language.</summary>
            <param name="language">The language.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.IContentManager.IsLoaded(System.String)">
            <summary>Get whether the content manager has already loaded and cached the given asset.</summary>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.IContentManager.GetAssetKeys">
            <summary>Get the cached asset keys.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.IContentManager.InvalidateCache(System.Func{System.String,System.Type,System.Boolean},System.Boolean)">
            <summary>Purge matched assets from the cache.</summary>
            <param name="predicate">Matches the asset keys to invalidate.</param>
            <param name="dispose">Whether to dispose invalidated assets. This should only be <c>true</c> when they're being invalidated as part of a dispose, to avoid crashing the game.</param>
            <returns>Returns the invalidated asset names and instances.</returns>
        </member>
        <member name="T:StardewModdingAPI.Framework.ContentManagers.ModContentManager">
            <summary>A content manager which handles reading files from a SMAPI mod folder with support for unpacked files.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.ModContentManager.JsonHelper">
            <summary>Encapsulates SMAPI's JSON file parsing.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.ModContentManager.GameContentManager">
            <summary>The game content manager used for map tilesheets not provided by the mod.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagers.ModContentManager.DefaultLanguage">
            <summary>The language code for language-agnostic mod assets.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.#ctor(System.String,StardewModdingAPI.Framework.ContentManagers.IContentManager,System.IServiceProvider,System.String,System.Globalization.CultureInfo,StardewModdingAPI.Framework.ContentCoordinator,StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.Reflection.Reflector,StardewModdingAPI.Toolkit.Serialization.JsonHelper,System.Action{StardewModdingAPI.Framework.ContentManagers.BaseContentManager})">
            <summary>Construct an instance.</summary>
            <param name="name">A name for the mod manager. Not guaranteed to be unique.</param>
            <param name="gameContentManager">The game content manager used for map tilesheets not provided by the mod.</param>
            <param name="serviceProvider">The service provider to use to locate services.</param>
            <param name="rootDirectory">The root directory to search for content.</param>
            <param name="currentCulture">The current culture for which to localize content.</param>
            <param name="coordinator">The central coordinator which manages content managers.</param>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="reflection">Simplifies access to private code.</param>
            <param name="jsonHelper">Encapsulates SMAPI's JSON file parsing.</param>
            <param name="onDisposing">A callback to invoke when the content manager is being disposed.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.Load``1(System.String)">
            <summary>Load an asset that has been processed by the content pipeline.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.Load``1(System.String,StardewValley.LocalizedContentManager.LanguageCode)">
            <summary>Load an asset that has been processed by the content pipeline.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
            <param name="language">The language code for which to load content.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.Load``1(System.String,StardewValley.LocalizedContentManager.LanguageCode,System.Boolean)">
            <summary>Load an asset that has been processed by the content pipeline.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
            <param name="language">The language code for which to load content.</param>
            <param name="useCache">Whether to read/write the loaded asset to the asset cache.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.CreateTemporary">
            <summary>Create a new content manager for temporary use.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.GetInternalAssetKey(System.String)">
            <summary>Get the underlying key in the game's content cache for an asset. This does not validate whether the asset exists.</summary>
            <param name="key">The local path to a content file relative to the mod folder.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.IsNormalizedKeyLoaded(System.String)">
            <summary>Get whether an asset has already been loaded.</summary>
            <param name="normalizedAssetName">The normalized asset name.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.GetModFile(System.String)">
            <summary>Get a file from the mod folder.</summary>
            <param name="path">The asset path relative to the content folder.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.PremultiplyTransparency(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Premultiply a texture's alpha values to avoid transparency issues in the game.</summary>
            <param name="texture">The texture to premultiply.</param>
            <returns>Returns a premultiplied texture.</returns>
            <remarks>Based on <a href="https://gamedev.stackexchange.com/a/26037">code by David Gouveia</a>.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.NormalizeTilesheetPaths(xTile.Map)">
            <summary>Normalize map tilesheet paths for the current platform.</summary>
            <param name="map">The map whose tilesheets to fix.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.FixCustomTilesheetPaths(xTile.Map,System.String)">
            <summary>Fix custom map tilesheet paths so they can be found by the content manager.</summary>
            <param name="map">The map whose tilesheets to fix.</param>
            <param name="relativeMapPath">The relative map path within the mod folder.</param>
            <exception cref="T:Microsoft.Xna.Framework.Content.ContentLoadException">A map tilesheet couldn't be resolved.</exception>
            <remarks>
            The game's logic for tilesheets in <see cref="M:StardewValley.Game1.setGraphicsForSeason"/> is a bit specialized. It boils
            down to this:
             * If the location is indoors or the desert, or the image source contains 'path' or 'object', it's loaded
               as-is relative to the <c>Content</c> folder.
             * Else it's loaded from <c>Content\Maps</c> with a seasonal prefix.
            
            That logic doesn't work well in our case, mainly because we have no location metadata at this point.
            Instead we use a more heuristic approach: check relative to the map file first, then relative to
            <c>Content\Maps</c>, then <c>Content</c>. If the image source filename contains a seasonal prefix, try for a
            seasonal variation and then an exact match.
            
            While that doesn't exactly match the game logic, it's close enough that it's unlikely to make a difference.
            </remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.GetTilesheetAssetName(System.String,System.String)">
            <summary>Get the actual asset name for a tilesheet.</summary>
            <param name="modRelativeMapFolder">The folder path containing the map, relative to the mod folder.</param>
            <param name="imageSource">The tilesheet image source to load.</param>
            <returns>Returns the asset name.</returns>
            <remarks>See remarks on <see cref="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.FixCustomTilesheetPaths(xTile.Map,System.String)"/>.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagers.ModContentManager.GetContentFolderFileExists(System.String)">
            <summary>Get whether a file from the game's content folder exists.</summary>
            <param name="key">The asset key.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ContentPack">
            <summary>Manages access to a content pack's metadata and files.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentPack.Content">
            <summary>Provides an API for loading content assets.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentPack.JsonHelper">
            <summary>Encapsulates SMAPI's JSON file parsing.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentPack.DirectoryPath">
            <summary>The full path to the content pack's folder.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentPack.Manifest">
            <summary>The content pack's manifest.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentPack.Translation">
            <summary>Provides translations stored in the content pack's <c>i18n</c> folder. See <see cref="P:StardewModdingAPI.IModHelper.Translation"/> for more info.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentPack.#ctor(System.String,StardewModdingAPI.IManifest,StardewModdingAPI.IContentHelper,StardewModdingAPI.ITranslationHelper,StardewModdingAPI.Toolkit.Serialization.JsonHelper)">
            <summary>Construct an instance.</summary>
            <param name="directoryPath">The full path to the content pack's folder.</param>
            <param name="manifest">The content pack's manifest.</param>
            <param name="content">Provides an API for loading content assets.</param>
            <param name="translation">Provides translations stored in the content pack's <c>i18n</c> folder.</param>
            <param name="jsonHelper">Encapsulates SMAPI's JSON file parsing.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentPack.HasFile(System.String)">
            <summary>Get whether a given file exists in the content pack.</summary>
            <param name="path">The file path to check.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentPack.ReadJsonFile``1(System.String)">
            <summary>Read a JSON file from the content pack folder.</summary>
            <typeparam name="TModel">The model type.</typeparam>
            <param name="path">The file path relative to the content directory.</param>
            <returns>Returns the deserialized model, or <c>null</c> if the file doesn't exist or is empty.</returns>
            <exception cref="T:System.InvalidOperationException">The <paramref name="path"/> is not relative or contains directory climbing (../).</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentPack.WriteJsonFile``1(System.String,``0)">
            <summary>Save data to a JSON file in the content pack's folder.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="path">The file path relative to the mod folder.</param>
            <param name="data">The arbitrary data to save.</param>
            <exception cref="T:System.InvalidOperationException">The <paramref name="path"/> is not relative or contains directory climbing (../).</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentPack.LoadAsset``1(System.String)">
            <summary>Load content from the content pack folder (if not already cached), and return it. When loading a <c>.png</c> file, this must be called outside the game's draw loop.</summary>
            <typeparam name="T">The expected data type. The main supported types are <see cref="T:xTile.Map"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>, and dictionaries; other types may be supported by the game's content pipeline.</typeparam>
            <param name="key">The local path to a content file relative to the content pack folder.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
            <exception cref="T:Microsoft.Xna.Framework.Content.ContentLoadException">The content asset couldn't be loaded (e.g. because it doesn't exist).</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentPack.GetActualAssetKey(System.String)">
            <summary>Get the underlying key in the game's content cache for an asset. This can be used to load custom map tilesheets, but should be avoided when you can use the content API instead. This does not validate whether the asset exists.</summary>
            <param name="key">The the local path to a content file relative to the content pack folder.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentPack.AssertRelativePath(System.String,System.String)">
            <summary>Assert that a relative path was passed it to a content pack method.</summary>
            <param name="path">The path to check.</param>
            <param name="methodName">The name of the method which was invoked.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Content.AssetData`1">
            <summary>Base implementation for a content helper which encapsulates access and changes to content being read from a data file.</summary>
            <typeparam name="TValue">The interface value type.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.Content.AssetData`1.OnDataReplaced">
            <summary>A callback to invoke when the data is replaced (if any).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.AssetData`1.Data">
            <summary>The content data being read.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetData`1.#ctor(System.String,System.String,`0,System.Func{System.String,System.String},System.Action{`0})">
            <summary>Construct an instance.</summary>
            <param name="locale">The content's locale code, if the content is localized.</param>
            <param name="assetName">The normalized asset name being read.</param>
            <param name="data">The content data being read.</param>
            <param name="getNormalizedPath">Normalizes an asset key to match the cache key.</param>
            <param name="onDataReplaced">A callback to invoke when the data is replaced (if any).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetData`1.ReplaceWith(`0)">
            <summary>Replace the entire content value with the given value. This is generally not recommended, since it may break compatibility with other mods or different versions of the game.</summary>
            <param name="value">The new content value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.InvalidCastException">The <paramref name="value"/>'s type is not compatible with the loaded asset's type.</exception>
        </member>
        <member name="T:StardewModdingAPI.Framework.Content.AssetDataForDictionary`2">
            <summary>Encapsulates access and changes to dictionary content being read from a data file.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForDictionary`2.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{`0,`1},System.Func{System.String,System.String},System.Action{System.Collections.Generic.IDictionary{`0,`1}})">
            <summary>Construct an instance.</summary>
            <param name="locale">The content's locale code, if the content is localized.</param>
            <param name="assetName">The normalized asset name being read.</param>
            <param name="data">The content data being read.</param>
            <param name="getNormalizedPath">Normalizes an asset key to match the cache key.</param>
            <param name="onDataReplaced">A callback to invoke when the data is replaced (if any).</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Content.AssetDataForImage">
            <summary>Encapsulates access and changes to image content being read from a data file.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Content.AssetDataForImage.MinOpacity">
            <summary>The minimum value to consider non-transparent.</summary>
            <remarks>On Linux/Mac, fully transparent pixels may have an alpha up to 4 for some reason.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForImage.#ctor(System.String,System.String,Microsoft.Xna.Framework.Graphics.Texture2D,System.Func{System.String,System.String},System.Action{Microsoft.Xna.Framework.Graphics.Texture2D})">
            <summary>Construct an instance.</summary>
            <param name="locale">The content's locale code, if the content is localized.</param>
            <param name="assetName">The normalized asset name being read.</param>
            <param name="data">The content data being read.</param>
            <param name="getNormalizedPath">Normalizes an asset key to match the cache key.</param>
            <param name="onDataReplaced">A callback to invoke when the data is replaced (if any).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForImage.PatchImage(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Rectangle},StardewModdingAPI.PatchMode)">
            <summary>Overwrite part of the image.</summary>
            <param name="source">The image to patch into the content.</param>
            <param name="sourceArea">The part of the <paramref name="source"/> to copy (or <c>null</c> to take the whole texture). This must be within the bounds of the <paramref name="source"/> texture.</param>
            <param name="targetArea">The part of the content to patch (or <c>null</c> to patch the whole texture). The original content within this area will be erased. This must be within the bounds of the existing spritesheet.</param>
            <param name="patchMode">Indicates how an image should be patched.</param>
            <exception cref="T:System.ArgumentNullException">One of the arguments is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetArea"/> is outside the bounds of the spritesheet.</exception>
        </member>
        <member name="T:StardewModdingAPI.Framework.Content.AssetDataForObject">
            <summary>Encapsulates access and changes to content being read from a data file.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForObject.#ctor(System.String,System.String,System.Object,System.Func{System.String,System.String})">
            <summary>Construct an instance.</summary>
            <param name="locale">The content's locale code, if the content is localized.</param>
            <param name="assetName">The normalized asset name being read.</param>
            <param name="data">The content data being read.</param>
            <param name="getNormalizedPath">Normalizes an asset key to match the cache key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForObject.#ctor(StardewModdingAPI.IAssetInfo,System.Object,System.Func{System.String,System.String})">
            <summary>Construct an instance.</summary>
            <param name="info">The asset metadata.</param>
            <param name="data">The content data being read.</param>
            <param name="getNormalizedPath">Normalizes an asset key to match the cache key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForObject.AsDictionary``2">
            <summary>Get a helper to manipulate the data as a dictionary.</summary>
            <typeparam name="TKey">The expected dictionary key.</typeparam>
            <typeparam name="TValue">The expected dictionary balue.</typeparam>
            <exception cref="T:System.InvalidOperationException">The content being read isn't a dictionary.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForObject.AsImage">
            <summary>Get a helper to manipulate the data as an image.</summary>
            <exception cref="T:System.InvalidOperationException">The content being read isn't an image.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForObject.GetData``1">
            <summary>Get the data as a given type.</summary>
            <typeparam name="TData">The expected data type.</typeparam>
            <exception cref="T:System.InvalidCastException">The data can't be converted to <typeparamref name="TData"/>.</exception>
        </member>
        <member name="F:StardewModdingAPI.Framework.Content.AssetInfo.GetNormalizedPath">
            <summary>Normalizes an asset key to match the cache key.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.AssetInfo.Locale">
            <summary>The content's locale code, if the content is localized.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.AssetInfo.AssetName">
            <summary>The normalized asset name being read. The format may change between platforms; see <see cref="M:StardewModdingAPI.Framework.Content.AssetInfo.AssetNameEquals(System.String)"/> to compare with a known path.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.AssetInfo.DataType">
            <summary>The content data type.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetInfo.#ctor(System.String,System.String,System.Type,System.Func{System.String,System.String})">
            <summary>Construct an instance.</summary>
            <param name="locale">The content's locale code, if the content is localized.</param>
            <param name="assetName">The normalized asset name being read.</param>
            <param name="type">The content type being read.</param>
            <param name="getNormalizedPath">Normalizes an asset key to match the cache key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetInfo.AssetNameEquals(System.String)">
            <summary>Get whether the asset name being loaded matches a given name after normalization.</summary>
            <param name="path">The expected asset path, relative to the game's content folder and without the .xnb extension or locale suffix (like 'Data\ObjectInformation').</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetInfo.GetFriendlyTypeName(System.Type)">
            <summary>Get a human-readable type name.</summary>
            <param name="type">The type to name.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Content.AssetInterceptorChange">
            <summary>A wrapper for <see cref="T:StardewModdingAPI.IAssetEditor"/> and <see cref="T:StardewModdingAPI.IAssetLoader"/> for internal cache invalidation.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.AssetInterceptorChange.Mod">
            <summary>The mod which registered the interceptor.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.AssetInterceptorChange.Instance">
            <summary>The interceptor instance.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.AssetInterceptorChange.WasAdded">
            <summary>Whether the asset interceptor was added since the last tick. Mutually exclusive with <see cref="P:StardewModdingAPI.Framework.Content.AssetInterceptorChange.WasRemoved"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.AssetInterceptorChange.WasRemoved">
            <summary>Whether the asset interceptor was removed since the last tick. Mutually exclusive with <see cref="P:StardewModdingAPI.Framework.Content.AssetInterceptorChange.WasRemoved"/>.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetInterceptorChange.#ctor(StardewModdingAPI.Framework.IModMetadata,System.Object,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="mod">The mod registering the interceptor.</param>
            <param name="instance">The interceptor. This must be an <see cref="T:StardewModdingAPI.IAssetEditor"/> or <see cref="T:StardewModdingAPI.IAssetLoader"/> instance.</param>
            <param name="wasAdded">Whether the asset interceptor was added since the last tick; else removed.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetInterceptorChange.CanIntercept(StardewModdingAPI.IAssetInfo)">
            <summary>Get whether this instance can intercept the given asset.</summary>
            <param name="asset">Basic metadata about the asset being loaded.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetInterceptorChange.CanInterceptImpl``1(StardewModdingAPI.IAssetInfo)">
            <summary>Get whether this instance can intercept the given asset.</summary>
            <typeparam name="TAsset">The asset type.</typeparam>
            <param name="asset">Basic metadata about the asset being loaded.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Content.ContentCache">
            <summary>A low-level wrapper around the content cache which handles reading, writing, and invalidating entries in the cache. This doesn't handle any higher-level logic like localization, loading content, etc. It assumes all keys passed in are already normalized.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Content.ContentCache.Cache">
            <summary>The underlying asset cache.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Content.ContentCache.NormalizeAssetNameForPlatform">
            <summary>Applies platform-specific asset key normalization so it's consistent with the underlying cache.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.ContentCache.Item(System.String)">
            <summary>Get or set the value of a raw cache entry.</summary>
            <param name="key">The cache key.</param>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.ContentCache.Keys">
            <summary>The current cache keys.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.ContentCache.#ctor(StardewValley.LocalizedContentManager,StardewModdingAPI.Framework.Reflection.Reflector)">
            <summary>Construct an instance.</summary>
            <param name="contentManager">The underlying content manager whose cache to manage.</param>
            <param name="reflection">Simplifies access to private game code.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.ContentCache.ContainsKey(System.String)">
            <summary>Get whether the cache contains a given key.</summary>
            <param name="key">The cache key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.ContentCache.NormalizePathSeparators(System.String)">
            <summary>Normalize path separators in a file path. For asset keys, see <see cref="M:StardewModdingAPI.Framework.Content.ContentCache.NormalizeKey(System.String)"/> instead.</summary>
            <param name="path">The file path to normalize.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.ContentCache.NormalizeKey(System.String)">
            <summary>Normalize a cache key so it's consistent with the underlying cache.</summary>
            <param name="key">The asset key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.ContentCache.Remove(System.String,System.Boolean)">
            <summary>Remove an asset with the given key.</summary>
            <param name="key">The cache key.</param>
            <param name="dispose">Whether to dispose the entry value, if applicable.</param>
            <returns>Returns the removed key (if any).</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.ContentCache.Remove(System.Func{System.String,System.Object,System.Boolean},System.Boolean)">
            <summary>Purge matched assets from the cache.</summary>
            <param name="predicate">Matches the asset keys to invalidate.</param>
            <param name="dispose">Whether to dispose invalidated assets. This should only be <c>true</c> when they're being invalidated as part of a dispose, to avoid crashing the game.</param>
            <returns>Returns the removed keys (if any).</returns>
        </member>
        <member name="T:StardewModdingAPI.Framework.CursorPosition">
            <summary>Defines a position on a given map at different reference points.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.CursorPosition.AbsolutePixels">
            <summary>The pixel position relative to the top-left corner of the in-game map, adjusted for pixel zoom.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.CursorPosition.ScreenPixels">
            <summary>The pixel position relative to the top-left corner of the visible screen, adjusted for pixel zoom.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.CursorPosition.Tile">
            <summary>The tile position under the cursor relative to the top-left corner of the map.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.CursorPosition.GrabTile">
            <summary>The tile position that the game considers under the cursor for purposes of clicking actions. This may be different than <see cref="P:StardewModdingAPI.Framework.CursorPosition.Tile"/> if that's too far from the player.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.CursorPosition.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>Construct an instance.</summary>
            <param name="absolutePixels">The pixel position relative to the top-left corner of the in-game map, adjusted for pixel zoom.</param>
            <param name="screenPixels">The pixel position relative to the top-left corner of the visible screen, adjusted for pixel zoom.</param>
            <param name="tile">The tile position relative to the top-left corner of the map.</param>
            <param name="grabTile">The tile position that the game considers under the cursor for purposes of clicking actions.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.CursorPosition.Equals(StardewModdingAPI.ICursorPosition)">
            <summary>Get whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.DeprecationLevel">
            <summary>Indicates how deprecated something is.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.DeprecationLevel.Notice">
            <summary>It's deprecated but won't be removed soon. Mod authors have some time to update their mods. Deprecation warnings should be logged, but not written to the console.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.DeprecationLevel.Info">
            <summary>Mods should no longer be using it. Deprecation messages should be debug entries in the console.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.DeprecationLevel.PendingRemoval">
            <summary>The code will be removed soon. Deprecation messages should be warnings in the console.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.DeprecationManager">
            <summary>Manages deprecation warnings.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.DeprecationManager.LoggedDeprecations">
            <summary>The deprecations which have already been logged (as 'mod name::noun phrase::version').</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.DeprecationManager.Monitor">
            <summary>Encapsulates monitoring and logging for a given module.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.DeprecationManager.ModRegistry">
            <summary>Tracks the installed mods.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.DeprecationManager.QueuedWarnings">
            <summary>The queued deprecation warnings to display.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.DeprecationManager.#ctor(StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.ModRegistry)">
            <summary>Construct an instance.</summary>
            <param name="monitor">Encapsulates monitoring and logging for a given module.</param>
            <param name="modRegistry">Tracks the installed mods.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.DeprecationManager.WarnForOldEvents">
            <summary>Log a deprecation warning for the old-style events.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.DeprecationManager.Warn(System.String,System.String,StardewModdingAPI.Framework.DeprecationLevel)">
            <summary>Log a deprecation warning.</summary>
            <param name="nounPhrase">A noun phrase describing what is deprecated.</param>
            <param name="version">The SMAPI version which deprecated it.</param>
            <param name="severity">How deprecated the code is.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.DeprecationManager.Warn(System.String,System.String,System.String,StardewModdingAPI.Framework.DeprecationLevel)">
            <summary>Log a deprecation warning.</summary>
            <param name="source">The friendly mod name which used the deprecated code.</param>
            <param name="nounPhrase">A noun phrase describing what is deprecated.</param>
            <param name="version">The SMAPI version which deprecated it.</param>
            <param name="severity">How deprecated the code is.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.DeprecationManager.PrintQueued">
            <summary>Print any queued messages.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.DeprecationManager.MarkWarned(System.String,System.String)">
            <summary>Mark a deprecation warning as already logged.</summary>
            <param name="nounPhrase">A noun phrase describing what is deprecated (e.g. "the Extensions.AsInt32 method").</param>
            <param name="version">The SMAPI version which deprecated it.</param>
            <returns>Returns whether the deprecation was successfully marked as warned. Returns <c>false</c> if it was already marked.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.DeprecationManager.MarkWarned(System.String,System.String,System.String)">
            <summary>Mark a deprecation warning as already logged.</summary>
            <param name="source">The friendly name of the assembly which used the deprecated code.</param>
            <param name="nounPhrase">A noun phrase describing what is deprecated (e.g. "the Extensions.AsInt32 method").</param>
            <param name="version">The SMAPI version which deprecated it.</param>
            <returns>Returns whether the deprecation was successfully marked as warned. Returns <c>false</c> if it was already marked.</returns>
        </member>
        <member name="T:StardewModdingAPI.Framework.DeprecationWarning">
            <summary>A deprecation warning for a mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.DeprecationWarning.ModName">
            <summary>The affected mod's display name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.DeprecationWarning.NounPhrase">
            <summary>A noun phrase describing what is deprecated.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.DeprecationWarning.Version">
            <summary>The SMAPI version which deprecated it.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.DeprecationWarning.Level">
            <summary>The deprecation level for the affected code.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.DeprecationWarning.StackTrace">
            <summary>The stack trace when the deprecation warning was raised.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.DeprecationWarning.#ctor(System.String,System.String,System.String,StardewModdingAPI.Framework.DeprecationLevel,System.String)">
            <summary>Construct an instance.</summary>
            <param name="modName">The affected mod's display name.</param>
            <param name="nounPhrase">A noun phrase describing what is deprecated.</param>
            <param name="version">The SMAPI version which deprecated it.</param>
            <param name="level">The deprecation level for the affected code.</param>
            <param name="stackTrace">The stack trace when the deprecation warning was raised.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Events.EventManager">
            <summary>Manages SMAPI events.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.MenuChanged">
            <summary>Raised after a game menu is opened, closed, or replaced.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.Rendering">
            <summary>Raised before the game draws anything to the screen in a draw tick, as soon as the sprite batch is opened. The sprite batch may be closed and reopened multiple times after this event is called, but it's only raised once per draw tick. This event isn't useful for drawing to the screen, since the game will draw over it.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.Rendered">
            <summary>Raised after the game draws to the sprite patch in a draw tick, just before the final sprite batch is rendered to the screen. Since the game may open/close the sprite batch multiple times in a draw tick, the sprite batch may not contain everything being drawn and some things may already be rendered to the screen. Content drawn to the sprite batch at this point will be drawn over all vanilla content (including menus, HUD, and cursor).</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.RenderingWorld">
            <summary>Raised before the game world is drawn to the screen.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.RenderedWorld">
            <summary>Raised after the game world is drawn to the sprite patch, before it's rendered to the screen.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.RenderingActiveMenu">
            <summary>When a menu is open (<see cref="P:StardewValley.Game1.activeClickableMenu"/> isn't null), raised before that menu is drawn to the screen.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.RenderedActiveMenu">
            <summary>When a menu is open (<see cref="P:StardewValley.Game1.activeClickableMenu"/> isn't null), raised after that menu is drawn to the sprite batch but before it's rendered to the screen.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.RenderingHud">
            <summary>Raised before drawing the HUD (item toolbar, clock, etc) to the screen.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.RenderedHud">
            <summary>Raised after drawing the HUD (item toolbar, clock, etc) to the sprite batch, but before it's rendered to the screen.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.WindowResized">
            <summary>Raised after the game window is resized.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.GameLaunched">
            <summary>Raised after the game is launched, right before the first update tick.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.UpdateTicking">
            <summary>Raised before the game performs its overall update tick (≈60 times per second).</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.UpdateTicked">
            <summary>Raised after the game performs its overall update tick (≈60 times per second).</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.OneSecondUpdateTicking">
            <summary>Raised once per second before the game performs its overall update tick.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.OneSecondUpdateTicked">
            <summary>Raised once per second after the game performs its overall update tick.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.SaveCreating">
            <summary>Raised before the game creates the save file.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.SaveCreated">
            <summary>Raised after the game finishes creating the save file.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.Saving">
            <summary>Raised before the game begins writes data to the save file (except the initial save creation).</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.Saved">
            <summary>Raised after the game finishes writing data to the save file (except the initial save creation).</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.SaveLoaded">
            <summary>Raised after the player loads a save slot and the world is initialized.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.DayStarted">
            <summary>Raised after the game begins a new day, including when loading a save.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.DayEnding">
            <summary>Raised before the game ends the current day. This happens before it starts setting up the next day and before <see cref="F:StardewModdingAPI.Framework.Events.EventManager.Saving"/>.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.TimeChanged">
            <summary>Raised after the in-game clock time changes.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.ReturnedToTitle">
            <summary>Raised after the game returns to the title screen.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.ButtonPressed">
            <summary>Raised after the player presses a button on the keyboard, controller, or mouse.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.ButtonReleased">
            <summary>Raised after the player released a button on the keyboard, controller, or mouse.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.CursorMoved">
            <summary>Raised after the player moves the in-game cursor.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.MouseWheelScrolled">
            <summary>Raised after the player scrolls the mouse wheel.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.PeerContextReceived">
            <summary>Raised after the mod context for a peer is received. This happens before the game approves the connection, so the player doesn't yet exist in the game. This is the earliest point where messages can be sent to the peer via SMAPI.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.ModMessageReceived">
            <summary>Raised after a mod message is received over the network.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.PeerDisconnected">
            <summary>Raised after the connection with a peer is severed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.InventoryChanged">
            <summary>Raised after items are added or removed to a player's inventory.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.LevelChanged">
            <summary>Raised after a player skill level changes. This happens as soon as they level up, not when the game notifies the player after their character goes to bed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.Warped">
            <summary>Raised after a player warps to a new location.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.LocationListChanged">
            <summary>Raised after a game location is added or removed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.BuildingListChanged">
            <summary>Raised after buildings are added or removed in a location.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.DebrisListChanged">
            <summary>Raised after debris are added or removed in a location.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.LargeTerrainFeatureListChanged">
            <summary>Raised after large terrain features (like bushes) are added or removed in a location.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.NpcListChanged">
            <summary>Raised after NPCs are added or removed in a location.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.ObjectListChanged">
            <summary>Raised after objects are added or removed in a location.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.ChestInventoryChanged">
            <summary>Raised after items are added or removed from a chest.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.TerrainFeatureListChanged">
            <summary>Raised after terrain features (like floors and trees) are added or removed in a location.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.LoadStageChanged">
            <summary>Raised when the low-level stage in the game's loading process has changed. See notes on <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.LoadStageChanged"/>.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.UnvalidatedUpdateTicking">
            <summary>Raised before the game performs its overall update tick (≈60 times per second). See notes on <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicking"/>.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.EventManager.UnvalidatedUpdateTicked">
            <summary>Raised after the game performs its overall update tick (≈60 times per second). See notes on <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicked"/>.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.EventManager.#ctor(StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.ModRegistry)">
            <summary>Construct an instance.</summary>
            <param name="monitor">Writes messages to the log.</param>
            <param name="modRegistry">The mod registry with which to identify mods.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Events.ManagedEvent`1">
            <summary>An event wrapper which intercepts and logs errors in handler code.</summary>
            <typeparam name="TEventArgs">The event arguments type.</typeparam>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ManagedEvent`1.Event">
            <summary>The underlying event.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.ManagedEvent`1.EventName">
            <summary>A human-readable name for the event.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.ManagedEvent`1.Monitor">
            <summary>Writes messages to the log.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.ManagedEvent`1.ModRegistry">
            <summary>The mod registry with which to identify mods.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.ManagedEvent`1.SourceMods">
            <summary>The display names for the mods which added each delegate.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.ManagedEvent`1.CachedInvocationList">
            <summary>The cached invocation list.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ManagedEvent`1.#ctor(System.String,StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.ModRegistry)">
            <summary>Construct an instance.</summary>
            <param name="eventName">A human-readable name for the event.</param>
            <param name="monitor">Writes messages to the log.</param>
            <param name="modRegistry">The mod registry with which to identify mods.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ManagedEvent`1.HasListeners">
            <summary>Get whether anything is listening to the event.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ManagedEvent`1.Add(System.EventHandler{`0})">
            <summary>Add an event handler.</summary>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ManagedEvent`1.Add(System.EventHandler{`0},StardewModdingAPI.Framework.IModMetadata)">
            <summary>Add an event handler.</summary>
            <param name="handler">The event handler.</param>
            <param name="mod">The mod which added the event handler.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ManagedEvent`1.Remove(System.EventHandler{`0})">
            <summary>Remove an event handler.</summary>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ManagedEvent`1.Raise(`0)">
            <summary>Raise the event and notify all handlers.</summary>
            <param name="args">The event arguments to pass.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ManagedEvent`1.RaiseForMods(`0,System.Func{StardewModdingAPI.Framework.IModMetadata,System.Boolean})">
            <summary>Raise the event and notify all handlers.</summary>
            <param name="args">The event arguments to pass.</param>
            <param name="match">A lambda which returns true if the event should be raised for the given mod.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ManagedEvent`1.AddTracking(StardewModdingAPI.Framework.IModMetadata,System.EventHandler{`0},System.Collections.Generic.IEnumerable{System.EventHandler{`0}})">
            <summary>Track an event handler.</summary>
            <param name="mod">The mod which added the handler.</param>
            <param name="handler">The event handler.</param>
            <param name="invocationList">The updated event invocation list.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ManagedEvent`1.RemoveTracking(System.EventHandler{`0},System.Collections.Generic.IEnumerable{System.EventHandler{`0}})">
            <summary>Remove tracking for an event handler.</summary>
            <param name="handler">The event handler.</param>
            <param name="invocationList">The updated event invocation list.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ManagedEvent`1.GetSourceMod(System.EventHandler{`0})">
            <summary>Get the mod which registered the given event handler, if available.</summary>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ManagedEvent`1.LogError(System.EventHandler{`0},System.Exception)">
            <summary>Log an exception from an event handler.</summary>
            <param name="handler">The event handler instance.</param>
            <param name="ex">The exception that was raised.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Events.ModDisplayEvents">
            <summary>Events related to UI and drawing to the screen.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModDisplayEvents.MenuChanged">
            <summary>Raised after a game menu is opened, closed, or replaced.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModDisplayEvents.Rendering">
            <summary>Raised before the game draws anything to the screen in a draw tick, as soon as the sprite batch is opened. The sprite batch may be closed and reopened multiple times after this event is called, but it's only raised once per draw tick. This event isn't useful for drawing to the screen, since the game will draw over it.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModDisplayEvents.Rendered">
            <summary>Raised after the game draws to the sprite patch in a draw tick, just before the final sprite batch is rendered to the screen. Since the game may open/close the sprite batch multiple times in a draw tick, the sprite batch may not contain everything being drawn and some things may already be rendered to the screen. Content drawn to the sprite batch at this point will be drawn over all vanilla content (including menus, HUD, and cursor).</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModDisplayEvents.RenderingWorld">
            <summary>Raised before the game world is drawn to the screen. This event isn't useful for drawing to the screen, since the game will draw over it.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModDisplayEvents.RenderedWorld">
            <summary>Raised after the game world is drawn to the sprite patch, before it's rendered to the screen. Content drawn to the sprite batch at this point will be drawn over the world, but under any active menu, HUD elements, or cursor.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModDisplayEvents.RenderingActiveMenu">
            <summary>When a menu is open (<see cref="P:StardewValley.Game1.activeClickableMenu"/> isn't null), raised before that menu is drawn to the screen. This includes the game's internal menus like the title screen. Content drawn to the sprite batch at this point will appear under the menu.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModDisplayEvents.RenderedActiveMenu">
            <summary>When a menu is open (<see cref="P:StardewValley.Game1.activeClickableMenu"/> isn't null), raised after that menu is drawn to the sprite batch but before it's rendered to the screen. Content drawn to the sprite batch at this point will appear over the menu and menu cursor.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModDisplayEvents.RenderingHud">
            <summary>Raised before drawing the HUD (item toolbar, clock, etc) to the screen. The vanilla HUD may be hidden at this point (e.g. because a menu is open). Content drawn to the sprite batch at this point will appear under the HUD.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModDisplayEvents.RenderedHud">
            <summary>Raised after drawing the HUD (item toolbar, clock, etc) to the sprite batch, but before it's rendered to the screen. The vanilla HUD may be hidden at this point (e.g. because a menu is open). Content drawn to the sprite batch at this point will appear over the HUD.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModDisplayEvents.WindowResized">
            <summary>Raised after the game window is resized.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ModDisplayEvents.#ctor(StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.Events.EventManager)">
            <summary>Construct an instance.</summary>
            <param name="mod">The mod which uses this instance.</param>
            <param name="eventManager">The underlying event manager.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Events.ModEvents">
            <summary>Manages access to events raised by SMAPI.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Events.ModEvents.Display">
            <summary>Events related to UI and drawing to the screen.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Events.ModEvents.GameLoop">
            <summary>Events linked to the game's update loop. The update loop runs roughly ≈60 times/second to run game logic like state changes, action handling, etc. These can be useful, but you should consider more semantic events like <see cref="P:StardewModdingAPI.Events.IModEvents.Input"/> if possible.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Events.ModEvents.Input">
            <summary>Events raised when the player provides input using a controller, keyboard, or mouse.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Events.ModEvents.Multiplayer">
            <summary>Events raised for multiplayer messages and connections.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Events.ModEvents.Player">
            <summary>Events raised when the player data changes.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Events.ModEvents.World">
            <summary>Events raised when something changes in the world.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Events.ModEvents.Specialized">
            <summary>Events serving specialized edge cases that shouldn't be used by most mods.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ModEvents.#ctor(StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.Events.EventManager)">
            <summary>Construct an instance.</summary>
            <param name="mod">The mod which uses this instance.</param>
            <param name="eventManager">The underlying event manager.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Events.ModEventsBase">
            <summary>An internal base class for event API classes.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.ModEventsBase.EventManager">
            <summary>The underlying event manager.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Events.ModEventsBase.Mod">
            <summary>The mod which uses this instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ModEventsBase.#ctor(StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.Events.EventManager)">
            <summary>Construct an instance.</summary>
            <param name="mod">The mod which uses this instance.</param>
            <param name="eventManager">The underlying event manager.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Events.ModGameLoopEvents">
            <summary>Events linked to the game's update loop. The update loop runs roughly ≈60 times/second to run game logic like state changes, action handling, etc. These can be useful, but you should consider more semantic events like <see cref="T:StardewModdingAPI.Events.IInputEvents"/> if possible.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.GameLaunched">
            <summary>Raised after the game is launched, right before the first update tick.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.UpdateTicking">
            <summary>Raised before the game performs its overall update tick (≈60 times per second).</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.UpdateTicked">
            <summary>Raised after the game performs its overall update tick (≈60 times per second).</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.OneSecondUpdateTicking">
            <summary>Raised once per second before the game state is updated.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.OneSecondUpdateTicked">
            <summary>Raised once per second after the game state is updated.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.SaveCreating">
            <summary>Raised before the game creates a new save file.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.SaveCreated">
            <summary>Raised after the game finishes creating the save file.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.Saving">
            <summary>Raised before the game begins writes data to the save file.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.Saved">
            <summary>Raised after the game finishes writing data to the save file.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.SaveLoaded">
            <summary>Raised after the player loads a save slot and the world is initialized.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.DayStarted">
            <summary>Raised after the game begins a new day (including when the player loads a save).</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.DayEnding">
            <summary>Raised before the game ends the current day. This happens before it starts setting up the next day and before <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.Saving"/>.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.TimeChanged">
            <summary>Raised after the in-game clock time changes.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModGameLoopEvents.ReturnedToTitle">
            <summary>Raised after the game returns to the title screen.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ModGameLoopEvents.#ctor(StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.Events.EventManager)">
            <summary>Construct an instance.</summary>
            <param name="mod">The mod which uses this instance.</param>
            <param name="eventManager">The underlying event manager.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Events.ModInputEvents">
            <summary>Events raised when the player provides input using a controller, keyboard, or mouse.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModInputEvents.ButtonPressed">
            <summary>Raised after the player presses a button on the keyboard, controller, or mouse.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModInputEvents.ButtonReleased">
            <summary>Raised after the player releases a button on the keyboard, controller, or mouse.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModInputEvents.CursorMoved">
            <summary>Raised after the player moves the in-game cursor.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModInputEvents.MouseWheelScrolled">
            <summary>Raised after the player scrolls the mouse wheel.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ModInputEvents.#ctor(StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.Events.EventManager)">
            <summary>Construct an instance.</summary>
            <param name="mod">The mod which uses this instance.</param>
            <param name="eventManager">The underlying event manager.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Events.ModMultiplayerEvents">
            <summary>Events raised for multiplayer messages and connections.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModMultiplayerEvents.PeerContextReceived">
            <summary>Raised after the mod context for a peer is received. This happens before the game approves the connection, so the player doesn't yet exist in the game. This is the earliest point where messages can be sent to the peer via SMAPI.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModMultiplayerEvents.ModMessageReceived">
            <summary>Raised after a mod message is received over the network.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModMultiplayerEvents.PeerDisconnected">
            <summary>Raised after the connection with a peer is severed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ModMultiplayerEvents.#ctor(StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.Events.EventManager)">
            <summary>Construct an instance.</summary>
            <param name="mod">The mod which uses this instance.</param>
            <param name="eventManager">The underlying event manager.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Events.ModPlayerEvents">
            <summary>Events raised when the player data changes.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModPlayerEvents.InventoryChanged">
            <summary>Raised after items are added or removed to a player's inventory. NOTE: this event is currently only raised for the local player.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModPlayerEvents.LevelChanged">
            <summary>Raised after a player skill level changes. This happens as soon as they level up, not when the game notifies the player after their character goes to bed.  NOTE: this event is currently only raised for the local player.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModPlayerEvents.Warped">
            <summary>Raised after a player warps to a new location. NOTE: this event is currently only raised for the local player.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ModPlayerEvents.#ctor(StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.Events.EventManager)">
            <summary>Construct an instance.</summary>
            <param name="mod">The mod which uses this instance.</param>
            <param name="eventManager">The underlying event manager.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Events.ModSpecializedEvents">
            <summary>Events serving specialized edge cases that shouldn't be used by most mods.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModSpecializedEvents.LoadStageChanged">
            <summary>Raised when the low-level stage in the game's loading process has changed. This is an advanced event for mods which need to run code at specific points in the loading process. The available stages or when they happen might change without warning in future versions (e.g. due to changes in the game's load process), so mods using this event are more likely to break or have bugs. Most mods should use <see cref="T:StardewModdingAPI.Events.IGameLoopEvents"/> instead.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModSpecializedEvents.UnvalidatedUpdateTicking">
            <summary>Raised before the game state is updated (≈60 times per second), regardless of normal SMAPI validation. This event is not thread-safe and may be invoked while game logic is running asynchronously. Changes to game state in this method may crash the game or corrupt an in-progress save. Do not use this event unless you're fully aware of the context in which your code will be run. Mods using this event will trigger a stability warning in the SMAPI console.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModSpecializedEvents.UnvalidatedUpdateTicked">
            <summary>Raised after the game state is updated (≈60 times per second), regardless of normal SMAPI validation. This event is not thread-safe and may be invoked while game logic is running asynchronously. Changes to game state in this method may crash the game or corrupt an in-progress save. Do not use this event unless you're fully aware of the context in which your code will be run. Mods using this event will trigger a stability warning in the SMAPI console.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ModSpecializedEvents.#ctor(StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.Events.EventManager)">
            <summary>Construct an instance.</summary>
            <param name="mod">The mod which uses this instance.</param>
            <param name="eventManager">The underlying event manager.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Events.ModWorldEvents">
            <summary>Events raised when something changes in the world.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModWorldEvents.LocationListChanged">
            <summary>Raised after a game location is added or removed.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModWorldEvents.BuildingListChanged">
            <summary>Raised after buildings are added or removed in a location.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModWorldEvents.DebrisListChanged">
            <summary>Raised after debris are added or removed in a location.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModWorldEvents.LargeTerrainFeatureListChanged">
            <summary>Raised after large terrain features (like bushes) are added or removed in a location.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModWorldEvents.NpcListChanged">
            <summary>Raised after NPCs are added or removed in a location.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModWorldEvents.ObjectListChanged">
            <summary>Raised after objects are added or removed in a location.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModWorldEvents.ChestInventoryChanged">
            <summary>Raised after items are added or removed from a chest.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Events.ModWorldEvents.TerrainFeatureListChanged">
            <summary>Raised after terrain features (like floors and trees) are added or removed in a location.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Events.ModWorldEvents.#ctor(StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.Events.EventManager)">
            <summary>Construct an instance.</summary>
            <param name="mod">The mod which uses this instance.</param>
            <param name="eventManager">The underlying event manager.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Exceptions.SAssemblyLoadFailedException">
            <summary>An exception thrown when an assembly can't be loaded by SMAPI, with all the relevant details in the message.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Exceptions.SAssemblyLoadFailedException.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Exceptions.SContentLoadException">
            <summary>An implementation of <see cref="T:Microsoft.Xna.Framework.Content.ContentLoadException"/> used by SMAPI to detect whether it was thrown by SMAPI or the underlying framework.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Exceptions.SContentLoadException.#ctor(System.String,System.Exception)">
            <summary>Construct an instance.</summary>
            <param name="message">The error message.</param>
            <param name="ex">The underlying exception, if any.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.GameVersion">
            <summary>An implementation of <see cref="T:StardewModdingAPI.ISemanticVersion"/> that correctly handles the non-semantic versions used by older Stardew Valley releases.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.GameVersion.VersionMap">
            <summary>A mapping of game to semantic versions.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.GameVersion.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="version">The game version string.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.GameVersion.ToString">
            <summary>Get a string representation of the version.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.GameVersion.GetSemanticVersionString(System.String)">
            <summary>Convert a game version string to a semantic version string.</summary>
            <param name="gameVersion">The game version string.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.GameVersion.GetGameVersionString(System.String)">
            <summary>Convert a semantic version string to the equivalent game version string.</summary>
            <param name="semanticVersion">The semantic version string.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.IModMetadata">
            <summary>Metadata for a mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.DisplayName">
            <summary>The mod's display name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.RootPath">
            <summary>The root path containing mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.DirectoryPath">
            <summary>The mod's full directory path within the <see cref="P:StardewModdingAPI.Framework.IModMetadata.RootPath"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.RelativeDirectoryPath">
            <summary>The <see cref="P:StardewModdingAPI.Framework.IModMetadata.DirectoryPath"/> relative to the <see cref="P:StardewModdingAPI.Framework.IModMetadata.RootPath"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.DataRecord">
            <summary>Metadata about the mod from SMAPI's internal data (if any).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.Status">
            <summary>The metadata resolution status.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.Warnings">
            <summary>Indicates non-error issues with the mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.Error">
            <summary>The reason the metadata is invalid, if any.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.IsIgnored">
            <summary>Whether the mod folder should be ignored. This is <c>true</c> if it was found within a folder whose name starts with a dot.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.Mod">
            <summary>The mod instance (if loaded and <see cref="P:StardewModdingAPI.IModInfo.IsContentPack"/> is false).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.ContentPack">
            <summary>The content pack instance (if loaded and <see cref="P:StardewModdingAPI.IModInfo.IsContentPack"/> is true).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.Translations">
            <summary>The translations for this mod (if loaded).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.Monitor">
            <summary>Writes messages to the console and log file as this mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.Api">
            <summary>The mod-provided API (if any).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.UpdateCheckData">
            <summary>The update-check metadata for this mod (if any).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.SetStatus(StardewModdingAPI.Framework.ModLoading.ModMetadataStatus,System.String)">
            <summary>Set the mod status.</summary>
            <param name="status">The metadata resolution status.</param>
            <param name="error">The reason the metadata is invalid, if any.</param>
            <returns>Return the instance for chaining.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.SetWarning(StardewModdingAPI.Toolkit.Framework.ModData.ModWarning)">
            <summary>Set a warning flag for the mod.</summary>
            <param name="warning">The warning to set.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.SetMod(StardewModdingAPI.IMod,StardewModdingAPI.Framework.ModHelpers.TranslationHelper)">
            <summary>Set the mod instance.</summary>
            <param name="mod">The mod instance to set.</param>
            <param name="translations">The translations for this mod (if loaded).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.SetMod(StardewModdingAPI.IContentPack,StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.ModHelpers.TranslationHelper)">
            <summary>Set the mod instance.</summary>
            <param name="contentPack">The contentPack instance to set.</param>
            <param name="monitor">Writes messages to the console and log file.</param>
            <param name="translations">The translations for this mod (if loaded).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.SetApi(System.Object)">
            <summary>Set the mod-provided API instance.</summary>
            <param name="api">The mod-provided API.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.SetUpdateData(StardewModdingAPI.Toolkit.Framework.Clients.WebApi.ModEntryModel)">
            <summary>Set the update-check metadata for this mod.</summary>
            <param name="data">The update-check metadata.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.HasManifest">
            <summary>Whether the mod manifest was loaded (regardless of whether the mod itself was loaded).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.HasID">
            <summary>Whether the mod has an ID (regardless of whether the ID is valid or the mod itself was loaded).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.HasID(System.String)">
            <summary>Whether the mod has the given ID.</summary>
            <param name="id">The mod ID to check.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.GetUpdateKeys(System.Boolean)">
            <summary>Get the defined update keys.</summary>
            <param name="validOnly">Only return valid update keys.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.GetRequiredModIds(System.Boolean)">
            <summary>Get the mod IDs that must be installed to load this mod.</summary>
            <param name="includeOptional">Whether to include optional dependencies.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.HasValidUpdateKeys">
            <summary>Whether the mod has at least one valid update key set.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.HasUnsuppressWarning(StardewModdingAPI.Toolkit.Framework.ModData.ModWarning)">
            <summary>Get whether the mod has a given warning and it hasn't been suppressed in the <see cref="P:StardewModdingAPI.Framework.IModMetadata.DataRecord"/>.</summary>
            <param name="warning">The warning to check.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.GetRelativePathWithRoot">
            <summary>Get a relative path which includes the root folder name.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Input.GamePadStateBuilder">
            <summary>An abstraction for manipulating controller state.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Input.GamePadStateBuilder.ButtonStates">
            <summary>The current button states.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Input.GamePadStateBuilder.LeftTrigger">
            <summary>The left trigger value.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Input.GamePadStateBuilder.RightTrigger">
            <summary>The right trigger value.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Input.GamePadStateBuilder.LeftStickPos">
            <summary>The left thumbstick position.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Input.GamePadStateBuilder.RightStickPos">
            <summary>The left thumbstick position.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.GamePadStateBuilder.#ctor(Microsoft.Xna.Framework.Input.GamePadState)">
            <summary>Construct an instance.</summary>
            <param name="state">The initial controller state.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.GamePadStateBuilder.SuppressButtons(System.Collections.Generic.IEnumerable{StardewModdingAPI.SButton})">
            <summary>Mark all matching buttons unpressed.</summary>
            <param name="buttons">The buttons.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.GamePadStateBuilder.SuppressButton(StardewModdingAPI.SButton)">
            <summary>Mark a button unpressed.</summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.GamePadStateBuilder.ToGamePadState">
            <summary>Construct an equivalent gamepad state.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.GamePadStateBuilder.GetPressedButtons">
            <summary>Get all pressed buttons.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.GamePadStateBuilder.GetBitmask(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Input.Buttons})">
            <summary>Get a bitmask representing the given buttons.</summary>
            <param name="buttons">The buttons to represent.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Input.InputStatus">
            <summary>The input status for a button during an update frame.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Input.InputStatus.None">
            <summary>The button was neither pressed, held, nor released.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Input.InputStatus.Pressed">
            <summary>The button was pressed in this frame.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Input.InputStatus.Held">
            <summary>The button has been held since the last frame.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Input.InputStatus.Released">
            <summary>The button was released in this frame.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Input.InputStatusExtensions">
            <summary>Extension methods for <see cref="T:StardewModdingAPI.Framework.Input.InputStatus"/>.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.InputStatusExtensions.IsDown(StardewModdingAPI.Framework.Input.InputStatus)">
            <summary>Whether the button was pressed or held.</summary>
            <param name="status">The button status.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Input.SInputState">
            <summary>Manages the game's input state.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Input.SInputState.LeftThumbstickDeadZone">
            <summary>The maximum amount of direction to ignore for the left thumbstick.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Input.SInputState.CursorPositionImpl">
            <summary>The cursor position on the screen adjusted for the zoom level.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Input.SInputState.LastPlayerTile">
            <summary>The player's last known tile position.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Input.SInputState.RealController">
            <summary>The controller state as of the last update.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Input.SInputState.RealKeyboard">
            <summary>The keyboard state as of the last update.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Input.SInputState.RealMouse">
            <summary>The mouse state as of the last update.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Input.SInputState.SuppressedController">
            <summary>A derivative of <see cref="P:StardewModdingAPI.Framework.Input.SInputState.RealController"/> which suppresses the buttons in <see cref="P:StardewModdingAPI.Framework.Input.SInputState.SuppressButtons"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Input.SInputState.SuppressedKeyboard">
            <summary>A derivative of <see cref="P:StardewModdingAPI.Framework.Input.SInputState.RealKeyboard"/> which suppresses the buttons in <see cref="P:StardewModdingAPI.Framework.Input.SInputState.SuppressButtons"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Input.SInputState.SuppressedMouse">
            <summary>A derivative of <see cref="P:StardewModdingAPI.Framework.Input.SInputState.RealMouse"/> which suppresses the buttons in <see cref="P:StardewModdingAPI.Framework.Input.SInputState.SuppressButtons"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Input.SInputState.CursorPosition">
            <summary>The cursor position on the screen adjusted for the zoom level.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Input.SInputState.ActiveButtons">
            <summary>The buttons which were pressed, held, or released.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Input.SInputState.SuppressButtons">
            <summary>The buttons to suppress when the game next handles input. Each button is suppressed until it's released.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.Clone">
            <summary>Get a copy of the current state.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.Update">
            <summary>This method is called by the game, and does nothing since SMAPI will already have updated by that point.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.TrueUpdate">
            <summary>Update the current button statuses for the given tick.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.UpdateSuppression">
            <summary>Apply input suppression to current input.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.GetGamePadState">
            <summary>Get the gamepad state visible to the game.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.GetKeyboardState">
            <summary>Get the keyboard state visible to the game.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.GetMouseState">
            <summary>Get the keyboard state visible to the game.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.IsDown(StardewModdingAPI.SButton)">
            <summary>Get whether a given button was pressed or held.</summary>
            <param name="button">The button to check.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.IsAnyDown(StardewValley.InputButton[])">
            <summary>Get whether any of the given buttons were pressed or held.</summary>
            <param name="buttons">The buttons to check.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.GetCursorPosition(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>Get the current cursor position.</summary>
            <param name="mouseState">The current mouse state.</param>
            <param name="absolutePixels">The absolute pixel position relative to the map, adjusted for pixel zoom.</param>
            <param name="zoomMultiplier">The multiplier applied to pixel coordinates to adjust them for pixel zoom.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.ShouldSuppressNow">
            <summary>Whether input should be suppressed in the current context.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.SuppressGivenStates(System.Collections.Generic.IDictionary{StardewModdingAPI.SButton,StardewModdingAPI.Framework.Input.InputStatus},Microsoft.Xna.Framework.Input.KeyboardState@,Microsoft.Xna.Framework.Input.MouseState@,Microsoft.Xna.Framework.Input.GamePadState@)">
            <summary>Apply input suppression to the given input states.</summary>
            <param name="activeButtons">The current button states to check.</param>
            <param name="keyboardState">The game's keyboard state for the current tick.</param>
            <param name="mouseState">The game's mouse state for the current tick.</param>
            <param name="gamePadState">The game's controller state for the current tick.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.DeriveStatuses(System.Collections.Generic.IDictionary{StardewModdingAPI.SButton,StardewModdingAPI.Framework.Input.InputStatus},Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.GamePadState)">
            <summary>Get the status of all pressed or released buttons relative to their previous status.</summary>
            <param name="previousStatuses">The previous button statuses.</param>
            <param name="keyboard">The keyboard state.</param>
            <param name="mouse">The mouse state.</param>
            <param name="controller">The controller state.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.DeriveStatus(StardewModdingAPI.Framework.Input.InputStatus,System.Boolean)">
            <summary>Get the status of a button relative to its previous status.</summary>
            <param name="oldStatus">The previous button status.</param>
            <param name="isDown">Whether the button is currently down.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.GetStatus(System.Collections.Generic.IDictionary{StardewModdingAPI.SButton,StardewModdingAPI.Framework.Input.InputStatus},StardewModdingAPI.SButton)">
            <summary>Get the status of a button.</summary>
            <param name="activeButtons">The current button states to check.</param>
            <param name="button">The button to check.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.GetPressedButtons(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.GamePadState)">
            <summary>Get the buttons pressed in the given stats.</summary>
            <param name="keyboard">The keyboard state.</param>
            <param name="mouse">The mouse state.</param>
            <param name="controller">The controller state.</param>
            <remarks>Thumbstick direction logic derived from <see cref="T:StardewValley.ButtonCollection"/>.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.Input.SInputState.IsRightThumbstickOutsideDeadZone(Microsoft.Xna.Framework.Vector2)">
            <summary>Get whether the right thumbstick should be considered outside the dead zone.</summary>
            <param name="direction">The right thumbstick value.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.InternalExtensions">
            <summary>Provides extension methods for SMAPI's internal use.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.InternalExtensions.LogOnce(StardewModdingAPI.IMonitor,System.Collections.Generic.HashSet{System.String},System.String,StardewModdingAPI.LogLevel)">
            <summary>Log a message for the player or developer the first time it occurs.</summary>
            <param name="monitor">The monitor through which to log the message.</param>
            <param name="hash">The hash of logged messages.</param>
            <param name="message">The message to log.</param>
            <param name="level">The log severity level.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.InternalExtensions.LogAsMod(StardewModdingAPI.Framework.IModMetadata,System.String,StardewModdingAPI.LogLevel)">
            <summary>Log a message using the mod's monitor.</summary>
            <param name="metadata">The mod whose monitor to use.</param>
            <param name="message">The message to log.</param>
            <param name="level">The log severity level.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.InternalExtensions.RaiseEmpty``1(StardewModdingAPI.Framework.Events.ManagedEvent{``0})">
            <summary>Raise the event using the default event args and notify all handlers.</summary>
            <typeparam name="TEventArgs">The event args type to construct.</typeparam>
            <param name="event">The event to raise.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.InternalExtensions.GetLogSummary(System.Exception)">
            <summary>Get a string representation of an exception suitable for writing to the error log.</summary>
            <param name="exception">The error to summarize.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.InternalExtensions.GetInnermostException(System.Exception)">
            <summary>Get the lowest exception in an exception stack.</summary>
            <param name="exception">The exception from which to search.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.InternalExtensions.IsOpen(Microsoft.Xna.Framework.Graphics.SpriteBatch,StardewModdingAPI.Framework.Reflection.Reflector)">
            <summary>Get whether the sprite batch is between a begin and end pair.</summary>
            <param name="spriteBatch">The sprite batch to check.</param>
            <param name="reflection">The reflection helper with which to access private fields.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager">
            <summary>Manages console output interception.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager.Output">
            <summary>The intercepting console writer.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager.OnMessageIntercepted">
            <summary>The event raised when a message is written to the console directly.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager.ExclusiveWriteWithoutInterception(System.Action)">
            <summary>Get an exclusive lock and write to the console output without interception.</summary>
            <param name="action">The action to perform within the exclusive write block.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager.Dispose">
            <summary>Release all resources.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Logging.InterceptingTextWriter">
            <summary>A text writer which allows intercepting output.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.Out">
            <summary>The underlying console output.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.Encoding">
            <summary>The character encoding in which the output is written.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.ShouldIntercept">
            <summary>Whether to intercept console output.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.OnMessageIntercepted">
            <summary>The event raised when a message is written to the console directly.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.#ctor(System.IO.TextWriter)">
            <summary>Construct an instance.</summary>
            <param name="output">The underlying output writer.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>Writes a subarray of characters to the text string or stream.</summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">The character position in the buffer at which to start retrieving data.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.Write(System.Char)">
            <summary>Writes a character to the text string or stream.</summary>
            <param name="ch">The character to write to the text stream.</param>
            <remarks>Console log messages from the game should be caught by <see cref="M:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.Write(System.Char[],System.Int32,System.Int32)"/>. This method passes through anything that bypasses that method for some reason, since it's better to show it to users than hide it from everyone.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter" /> and optionally releases the managed resources.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Logging.LogFileManager">
            <summary>Manages reading and writing to log file.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Logging.LogFileManager.Stream">
            <summary>The underlying stream writer.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Logging.LogFileManager.Path">
            <summary>The full path to the log file being written.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.LogFileManager.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="path">The log file to write.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.LogFileManager.WriteLine(System.String)">
            <summary>Write a message to the log.</summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.LogFileManager.Dispose">
            <summary>Release all resources.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Models.SConfig">
            <summary>The SMAPI configuration settings.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Models.SConfig.DefaultValues">
            <summary>The default config values, for fields that should be logged if different.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Models.SConfig.DefaultSuppressUpdateChecks">
            <summary>The default values for <see cref="P:StardewModdingAPI.Framework.Models.SConfig.SuppressUpdateChecks"/>, to log changes if different.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.DeveloperMode">
            <summary>Whether to enable development features.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.CheckForUpdates">
            <summary>Whether to check for newer versions of SMAPI and mods on startup.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.ParanoidWarnings">
            <summary>Whether to add a section to the 'mod issues' list for mods which which directly use potentially sensitive .NET APIs like file or shell access.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.UseBetaChannel">
            <summary>Whether to show beta versions as valid updates.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.GitHubProjectName">
            <summary>SMAPI's GitHub project name, used to perform update checks.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.WebApiBaseUrl">
            <summary>The base URL for SMAPI's web API, used to perform update checks.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.VerboseLogging">
            <summary>Whether SMAPI should log more information about the game context.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.LogNetworkTraffic">
            <summary>Whether SMAPI should log network traffic. Best combined with <see cref="P:StardewModdingAPI.Framework.Models.SConfig.VerboseLogging"/>, which includes network metadata.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.ConsoleColors">
            <summary>The colors to use for text written to the SMAPI console.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.SuppressUpdateChecks">
            <summary>The mod IDs SMAPI should ignore when performing update checks or validating update keys.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Models.SConfig.GetCustomSettings">
            <summary>Get the settings which have been customised by the player.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.BaseHelper">
            <summary>The common base class for mod helpers.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.BaseHelper.ModID">
            <summary>The unique ID of the mod for which the helper was created.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.BaseHelper.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="modID">The unique ID of the relevant mod.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.CommandHelper">
            <summary>Provides an API for managing console commands.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.CommandHelper.Mod">
            <summary>The mod using this instance.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.CommandHelper.CommandManager">
            <summary>Manages console commands.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.CommandHelper.#ctor(StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.CommandManager)">
            <summary>Construct an instance.</summary>
            <param name="mod">The mod using this instance.</param>
            <param name="commandManager">Manages console commands.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.CommandHelper.Add(System.String,System.String,System.Action{System.String,System.String[]})">
            <summary>Add a console command.</summary>
            <param name="name">The command name, which the user must type to trigger it.</param>
            <param name="documentation">The human-readable documentation shown when the player runs the built-in 'help' command.</param>
            <param name="callback">The method to invoke when the command is triggered. This method is passed the command name and arguments submitted by the user.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> or <paramref name="callback"/> is null or empty.</exception>
            <exception cref="T:System.FormatException">The <paramref name="name"/> is not a valid format.</exception>
            <exception cref="T:System.ArgumentException">There's already a command with that name.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.CommandHelper.Trigger(System.String,System.String[])">
            <summary>Trigger a command.</summary>
            <param name="name">The command name.</param>
            <param name="arguments">The command arguments.</param>
            <returns>Returns whether a matching command was triggered.</returns>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.ContentHelper">
            <summary>Provides an API for loading content assets.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ContentHelper.ContentCore">
            <summary>SMAPI's core content logic.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ContentHelper.GameContentManager">
            <summary>A content manager for this mod which manages files from the game's Content folder.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ContentHelper.ModContentManager">
            <summary>A content manager for this mod which manages files from the mod's folder.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ContentHelper.ModName">
            <summary>The friendly mod name for use in errors.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ContentHelper.Monitor">
            <summary>Encapsulates monitoring and logging for a given module.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.CurrentLocale">
            <summary>The game's current locale code (like <c>pt-BR</c>).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.CurrentLocaleConstant">
            <summary>The game's current locale as an enum value.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.ObservableAssetEditors">
            <summary>The observable implementation of <see cref="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.AssetEditors"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.ObservableAssetLoaders">
            <summary>The observable implementation of <see cref="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.AssetLoaders"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.AssetLoaders">
            <summary>Interceptors which provide the initial versions of matching content assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.AssetEditors">
            <summary>Interceptors which edit matching content assets after they're loaded.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.#ctor(StardewModdingAPI.Framework.ContentCoordinator,System.String,System.String,System.String,StardewModdingAPI.IMonitor)">
            <summary>Construct an instance.</summary>
            <param name="contentCore">SMAPI's core content logic.</param>
            <param name="modFolderPath">The absolute path to the mod folder.</param>
            <param name="modID">The unique ID of the relevant mod.</param>
            <param name="modName">The friendly mod name for use in errors.</param>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.Load``1(System.String,StardewModdingAPI.ContentSource)">
            <summary>Load content from the game folder or mod folder (if not already cached), and return it. When loading a <c>.png</c> file, this must be called outside the game's draw loop.</summary>
            <typeparam name="T">The expected data type. The main supported types are <see cref="T:xTile.Map"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>, and dictionaries; other types may be supported by the game's content pipeline.</typeparam>
            <param name="key">The asset key to fetch (if the <paramref name="source"/> is <see cref="F:StardewModdingAPI.ContentSource.GameContent"/>), or the local path to a content file relative to the mod folder.</param>
            <param name="source">Where to search for a matching content asset.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
            <exception cref="T:Microsoft.Xna.Framework.Content.ContentLoadException">The content asset couldn't be loaded (e.g. because it doesn't exist).</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.NormalizeAssetName(System.String)">
            <summary>Normalize an asset name so it's consistent with those generated by the game. This is mainly useful for string comparisons like <see cref="M:System.String.StartsWith(System.String)"/> on generated asset names, and isn't necessary when passing asset names into other content helper methods.</summary>
            <param name="assetName">The asset key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.GetActualAssetKey(System.String,StardewModdingAPI.ContentSource)">
            <summary>Get the underlying key in the game's content cache for an asset. This can be used to load custom map tilesheets, but should be avoided when you can use the content API instead. This does not validate whether the asset exists.</summary>
            <param name="key">The asset key to fetch (if the <paramref name="source"/> is <see cref="F:StardewModdingAPI.ContentSource.GameContent"/>), or the local path to a content file relative to the mod folder.</param>
            <param name="source">Where to search for a matching content asset.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.InvalidateCache(System.String)">
            <summary>Remove an asset from the content cache so it's reloaded on the next request. This will reload core game assets if needed, but references to the former asset will still show the previous content.</summary>
            <param name="key">The asset key to invalidate in the content folder.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
            <returns>Returns whether the given asset key was cached.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.InvalidateCache``1">
            <summary>Remove all assets of the given type from the cache so they're reloaded on the next request. <b>This can be a very expensive operation and should only be used in very specific cases.</b> This will reload core game assets if needed, but references to the former assets will still show the previous content.</summary>
            <typeparam name="T">The asset type to remove from the cache.</typeparam>
            <returns>Returns whether any assets were invalidated.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.InvalidateCache(System.Func{StardewModdingAPI.IAssetInfo,System.Boolean})">
            <summary>Remove matching assets from the content cache so they're reloaded on the next request. This will reload core game assets if needed, but references to the former asset will still show the previous content.</summary>
            <param name="predicate">A predicate matching the assets to invalidate.</param>
            <returns>Returns whether any cache entries were invalidated.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.AssertAndNormalizeAssetName(System.String)">
            <summary>Assert that the given key has a valid format.</summary>
            <param name="key">The asset key to check.</param>
            <exception cref="T:System.ArgumentException">The asset key is empty or contains invalid characters.</exception>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.ContentPackHelper">
            <summary>Provides an API for managing content packs.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ContentPackHelper.ContentPacks">
            <summary>The content packs loaded for this mod.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ContentPackHelper.CreateContentPack">
            <summary>Create a temporary content pack.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentPackHelper.#ctor(System.String,System.Lazy{StardewModdingAPI.IContentPack[]},System.Func{System.String,StardewModdingAPI.IManifest,StardewModdingAPI.IContentPack})">
            <summary>Construct an instance.</summary>
            <param name="modID">The unique ID of the relevant mod.</param>
            <param name="contentPacks">The content packs loaded for this mod.</param>
            <param name="createContentPack">Create a temporary content pack.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentPackHelper.GetOwned">
            <summary>Get all content packs loaded for this mod.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentPackHelper.CreateFake(System.String)">
            <summary>Create a temporary content pack to read files from a directory, using randomized manifest fields. This will generate fake manifest data; any <c>manifest.json</c> in the directory will be ignored. Temporary content packs will not appear in the SMAPI log and update checks will not be performed.</summary>
            <param name="directoryPath">The absolute directory path containing the content pack files.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentPackHelper.CreateTemporary(System.String,System.String,System.String,System.String,System.String,StardewModdingAPI.ISemanticVersion)">
            <summary>Create a temporary content pack to read files from a directory. Temporary content packs will not appear in the SMAPI log and update checks will not be performed.</summary>
            <param name="directoryPath">The absolute directory path containing the content pack files.</param>
            <param name="id">The content pack's unique ID.</param>
            <param name="name">The content pack name.</param>
            <param name="description">The content pack description.</param>
            <param name="author">The content pack author's name.</param>
            <param name="version">The content pack version.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.DataHelper">
            <summary>Provides an API for reading and storing local mod data.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.DataHelper.JsonHelper">
            <summary>Encapsulates SMAPI's JSON file parsing.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.DataHelper.ModFolderPath">
            <summary>The absolute path to the mod folder.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.DataHelper.#ctor(System.String,System.String,StardewModdingAPI.Toolkit.Serialization.JsonHelper)">
            <summary>Construct an instance.</summary>
            <param name="modID">The unique ID of the relevant mod.</param>
            <param name="modFolderPath">The absolute path to the mod folder.</param>
            <param name="jsonHelper">The absolute path to the mod folder.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.DataHelper.ReadJsonFile``1(System.String)">
            <summary>Read data from a JSON file in the mod's folder.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="path">The file path relative to the mod folder.</param>
            <returns>Returns the deserialized model, or <c>null</c> if the file doesn't exist or is empty.</returns>
            <exception cref="T:System.InvalidOperationException">The <paramref name="path"/> is not relative or contains directory climbing (../).</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.DataHelper.WriteJsonFile``1(System.String,``0)">
            <summary>Save data to a JSON file in the mod's folder.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="path">The file path relative to the mod folder.</param>
            <param name="data">The arbitrary data to save.</param>
            <exception cref="T:System.InvalidOperationException">The <paramref name="path"/> is not relative or contains directory climbing (../).</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.DataHelper.ReadSaveData``1(System.String)">
            <summary>Read arbitrary data stored in the current save slot. This is only possible if a save has been loaded.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="key">The unique key identifying the data.</param>
            <returns>Returns the parsed data, or <c>null</c> if the entry doesn't exist or is empty.</returns>
            <exception cref="T:System.InvalidOperationException">The player hasn't loaded a save file yet or isn't the main player.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.DataHelper.WriteSaveData``1(System.String,``0)">
            <summary>Save arbitrary data to the current save slot. This is only possible if a save has been loaded, and the data will be lost if the player exits without saving the current day.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="key">The unique key identifying the data.</param>
            <param name="model">The arbitrary data to save.</param>
            <exception cref="T:System.InvalidOperationException">The player hasn't loaded a save file yet or isn't the main player.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.DataHelper.ReadGlobalData``1(System.String)">
            <summary>Read arbitrary data stored on the local computer, synchronised by GOG/Steam if applicable.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="key">The unique key identifying the data.</param>
            <returns>Returns the parsed data, or <c>null</c> if the entry doesn't exist or is empty.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.DataHelper.WriteGlobalData``1(System.String,``0)">
            <summary>Save arbitrary data to the local computer, synchronised by GOG/Steam if applicable.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="key">The unique key identifying the data.</param>
            <param name="data">The arbitrary data to save.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.DataHelper.GetSaveFileKey(System.String)">
            <summary>Get the unique key for a save file data entry.</summary>
            <param name="key">The unique key identifying the data.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.DataHelper.GetDataFields(StardewModdingAPI.Enums.LoadStage)">
            <summary>Get the data fields to read/write for save data.</summary>
            <param name="stage">The current load stage.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.DataHelper.GetGlobalDataPath(System.String)">
            <summary>Get the absolute path for a global data file.</summary>
            <param name="key">The unique key identifying the data.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.DataHelper.AssertSlug(System.String,System.String)">
            <summary>Assert that a key contains only characters that are safe in all contexts.</summary>
            <param name="key">The key to check.</param>
            <param name="paramName">The argument name for any assertion error.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.InputHelper">
            <summary>Provides an API for checking and changing input state.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.InputHelper.InputState">
            <summary>Manages the game's input state.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.InputHelper.#ctor(System.String,StardewModdingAPI.Framework.Input.SInputState)">
            <summary>Construct an instance.</summary>
            <param name="modID">The unique ID of the relevant mod.</param>
            <param name="inputState">Manages the game's input state.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.InputHelper.GetCursorPosition">
            <summary>Get the current cursor position.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.InputHelper.IsDown(StardewModdingAPI.SButton)">
            <summary>Get whether a button is currently pressed.</summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.InputHelper.IsSuppressed(StardewModdingAPI.SButton)">
            <summary>Get whether a button is currently suppressed, so the game won't see it.</summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.InputHelper.Suppress(StardewModdingAPI.SButton)">
            <summary>Prevent the game from handling a button press. This doesn't prevent other mods from receiving the event.</summary>
            <param name="button">The button to suppress.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.ModHelper">
            <summary>Provides simplified APIs for writing mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.DirectoryPath">
            <summary>The full path to the mod's folder.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.Events">
            <summary>Manages access to events raised by SMAPI, which let your mod react when something happens in the game.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.Content">
            <summary>An API for loading content assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.ContentPacks">
            <summary>An API for managing content packs.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.Data">
            <summary>An API for reading and writing persistent mod data.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.Input">
            <summary>An API for checking and changing input state.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.Reflection">
            <summary>An API for accessing private game code.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.ModRegistry">
            <summary>an API for fetching metadata about loaded mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.ConsoleCommands">
            <summary>An API for managing console commands.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.Multiplayer">
            <summary>Provides multiplayer utilities.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.Translation">
            <summary>An API for reading translations stored in the mod's <c>i18n</c> folder, with one file per locale (like <c>en.json</c>) containing a flat key => value structure. Translations are fetched with locale fallback, so missing translations are filled in from broader locales (like <c>pt-BR.json</c> &lt; <c>pt.json</c> &lt; <c>default.json</c>).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModHelper.#ctor(System.String,System.String,StardewModdingAPI.Framework.Input.SInputState,StardewModdingAPI.Events.IModEvents,StardewModdingAPI.IContentHelper,StardewModdingAPI.IContentPackHelper,StardewModdingAPI.ICommandHelper,StardewModdingAPI.IDataHelper,StardewModdingAPI.IModRegistry,StardewModdingAPI.IReflectionHelper,StardewModdingAPI.IMultiplayerHelper,StardewModdingAPI.ITranslationHelper)">
            <summary>Construct an instance.</summary>
            <param name="modID">The mod's unique ID.</param>
            <param name="modDirectory">The full path to the mod's folder.</param>
            <param name="inputState">Manages the game's input state.</param>
            <param name="events">Manages access to events raised by SMAPI.</param>
            <param name="contentHelper">An API for loading content assets.</param>
            <param name="contentPackHelper">An API for managing content packs.</param>
            <param name="commandHelper">An API for managing console commands.</param>
            <param name="dataHelper">An API for reading and writing persistent mod data.</param>
            <param name="modRegistry">an API for fetching metadata about loaded mods.</param>
            <param name="reflectionHelper">An API for accessing private game code.</param>
            <param name="multiplayer">Provides multiplayer utilities.</param>
            <param name="translationHelper">An API for reading translations stored in the mod's <c>i18n</c> folder.</param>
            <exception cref="T:System.ArgumentNullException">An argument is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="modDirectory"/> path does not exist on disk.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModHelper.ReadConfig``1">
            <summary>Read the mod's configuration file (and create it if needed).</summary>
            <typeparam name="TConfig">The config class type. This should be a plain class that has public properties for the settings you want. These can be complex types.</typeparam>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModHelper.WriteConfig``1(``0)">
            <summary>Save to the mod's configuration file.</summary>
            <typeparam name="TConfig">The config class type.</typeparam>
            <param name="config">The config settings to save.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModHelper.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper">
            <summary>Provides metadata about installed mods.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.Registry">
            <summary>The underlying mod registry.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.Monitor">
            <summary>Encapsulates monitoring and logging for the mod.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.AccessedModApis">
            <summary>The mod IDs for APIs accessed by this instanced.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.ProxyFactory">
            <summary>Generates proxy classes to access mod APIs through an arbitrary interface.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.#ctor(System.String,StardewModdingAPI.Framework.ModRegistry,StardewModdingAPI.Framework.Reflection.InterfaceProxyFactory,StardewModdingAPI.IMonitor)">
            <summary>Construct an instance.</summary>
            <param name="modID">The unique ID of the relevant mod.</param>
            <param name="registry">The underlying mod registry.</param>
            <param name="proxyFactory">Generates proxy classes to access mod APIs through an arbitrary interface.</param>
            <param name="monitor">Encapsulates monitoring and logging for the mod.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.GetAll">
            <summary>Get metadata for all loaded mods.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.Get(System.String)">
            <summary>Get metadata for a loaded mod.</summary>
            <param name="uniqueID">The mod's unique ID.</param>
            <returns>Returns the matching mod's metadata, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.IsLoaded(System.String)">
            <summary>Get whether a mod has been loaded.</summary>
            <param name="uniqueID">The mod's unique ID.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.GetApi(System.String)">
            <summary>Get the API provided by a mod, or <c>null</c> if it has none. This signature requires using the <see cref="P:StardewModdingAPI.IModHelper.Reflection"/> API to access the API's properties and methods.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.GetApi``1(System.String)">
            <summary>Get the API provided by a mod, mapped to a given interface which specifies the expected properties and methods. If the mod has no API or it's not compatible with the given interface, get <c>null</c>.</summary>
            <typeparam name="TInterface">The interface which matches the properties and methods you intend to access.</typeparam>
            <param name="uniqueID">The mod's unique ID.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.MultiplayerHelper">
            <summary>Provides multiplayer utilities.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.MultiplayerHelper.Multiplayer">
            <summary>SMAPI's core multiplayer utility.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.MultiplayerHelper.#ctor(System.String,StardewModdingAPI.Framework.SMultiplayer)">
            <summary>Construct an instance.</summary>
            <param name="modID">The unique ID of the relevant mod.</param>
            <param name="multiplayer">SMAPI's core multiplayer utility.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.MultiplayerHelper.GetNewID">
            <summary>Get a new multiplayer ID.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.MultiplayerHelper.GetActiveLocations">
            <summary>Get the locations which are being actively synced from the host.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.MultiplayerHelper.GetConnectedPlayer(System.Int64)">
            <summary>Get a connected player.</summary>
            <param name="id">The player's unique ID.</param>
            <returns>Returns the connected player, or <c>null</c> if no such player is connected.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.MultiplayerHelper.GetConnectedPlayers">
            <summary>Get all connected players.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.MultiplayerHelper.SendMessage``1(``0,System.String,System.String[],System.Int64[])">
            <summary>Send a message to mods installed by connected players.</summary>
            <typeparam name="TMessage">The data type. This can be a class with a default constructor, or a value type.</typeparam>
            <param name="message">The data to send over the network.</param>
            <param name="messageType">A message type which receiving mods can use to decide whether it's the one they want to handle, like <c>SetPlayerLocation</c>. This doesn't need to be globally unique, since mods should check the originating mod ID.</param>
            <param name="modIDs">The mod IDs which should receive the message on the destination computers, or <c>null</c> for all mods. Specifying mod IDs is recommended to improve performance, unless it's a general-purpose broadcast.</param>
            <param name="playerIDs">The <see cref="P:StardewValley.Farmer.UniqueMultiplayerID" /> values for the players who should receive the message, or <c>null</c> for all players. If you don't need to broadcast to all players, specifying player IDs is recommended to reduce latency.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="message"/> or <paramref name="messageType" /> is null.</exception>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper">
            <summary>Provides helper methods for accessing private game code.</summary>
            <remarks>This implementation searches up the type hierarchy, and caches the reflected fields and methods with a sliding expiry (to optimize performance without unnecessary memory usage).</remarks>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.Reflector">
            <summary>The underlying reflection helper.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.ModName">
            <summary>The mod name for error messages.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.#ctor(System.String,System.String,StardewModdingAPI.Framework.Reflection.Reflector)">
            <summary>Construct an instance.</summary>
            <param name="modID">The unique ID of the relevant mod.</param>
            <param name="modName">The mod name for error messages.</param>
            <param name="reflector">The underlying reflection helper.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetField``1(System.Object,System.String,System.Boolean)">
            <summary>Get an instance field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="obj">The object which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetField``1(System.Type,System.String,System.Boolean)">
            <summary>Get a static field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="type">The type which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetProperty``1(System.Object,System.String,System.Boolean)">
            <summary>Get an instance property.</summary>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="obj">The object which has the property.</param>
            <param name="name">The property name.</param>
            <param name="required">Whether to throw an exception if the property is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetProperty``1(System.Type,System.String,System.Boolean)">
            <summary>Get a static property.</summary>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="type">The type which has the property.</param>
            <param name="name">The property name.</param>
            <param name="required">Whether to throw an exception if the property is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetMethod(System.Object,System.String,System.Boolean)">
            <summary>Get an instance method.</summary>
            <param name="obj">The object which has the method.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetMethod(System.Type,System.String,System.Boolean)">
            <summary>Get a static method.</summary>
            <param name="type">The type which has the method.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.AssertAccessAllowed``1(StardewModdingAPI.IReflectedField{``0})">
            <summary>Assert that mods can use the reflection helper to access the given member.</summary>
            <typeparam name="T">The field value type.</typeparam>
            <param name="field">The field being accessed.</param>
            <returns>Returns the same field instance for convenience.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.AssertAccessAllowed``1(StardewModdingAPI.IReflectedProperty{``0})">
            <summary>Assert that mods can use the reflection helper to access the given member.</summary>
            <typeparam name="T">The property value type.</typeparam>
            <param name="property">The property being accessed.</param>
            <returns>Returns the same property instance for convenience.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.AssertAccessAllowed(StardewModdingAPI.IReflectedMethod)">
            <summary>Assert that mods can use the reflection helper to access the given member.</summary>
            <param name="method">The method being accessed.</param>
            <returns>Returns the same method instance for convenience.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.AssertAccessAllowed(System.Reflection.MemberInfo)">
            <summary>Assert that mods can use the reflection helper to access the given member.</summary>
            <param name="member">The member being accessed.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.TranslationHelper">
            <summary>Provides translations stored in the mod's <c>i18n</c> folder, with one file per locale (like <c>en.json</c>) containing a flat key => value structure. Translations are fetched with locale fallback, so missing translations are filled in from broader locales (like <c>pt-BR.json</c> &lt; <c>pt.json</c> &lt; <c>default.json</c>).</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.Translator">
            <summary>The underlying translation manager.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.Locale">
            <summary>The current locale.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.LocaleEnum">
            <summary>The game's current language code.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.#ctor(System.String,System.String,StardewValley.LocalizedContentManager.LanguageCode)">
            <summary>Construct an instance.</summary>
            <param name="modID">The unique ID of the relevant mod.</param>
            <param name="locale">The initial locale.</param>
            <param name="languageCode">The game's current language code.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.GetTranslations">
            <summary>Get all translations for the current locale.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.Get(System.String)">
            <summary>Get a translation for the current locale.</summary>
            <param name="key">The translation key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.Get(System.String,System.Object)">
            <summary>Get a translation for the current locale.</summary>
            <param name="key">The translation key.</param>
            <param name="tokens">An object containing token key/value pairs. This can be an anonymous object (like <c>new { value = 42, name = "Cranberries" }</c>), a dictionary, or a class instance.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.SetTranslations(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>Set the translations to use.</summary>
            <param name="translations">The translations to use.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.SetLocale(System.String,StardewValley.LocalizedContentManager.LanguageCode)">
            <summary>Set the current locale and precache translations.</summary>
            <param name="locale">The current locale.</param>
            <param name="localeEnum">The game's current language code.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver">
            <summary>A minimal assembly definition resolver which resolves references to known assemblies.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver.Lookup">
            <summary>The known assemblies.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver.Add(Mono.Cecil.AssemblyDefinition[])">
            <summary>Add known assemblies to the resolver.</summary>
            <param name="assemblies">The known assemblies.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver.Resolve(Mono.Cecil.AssemblyNameReference)">
            <summary>Resolve an assembly reference.</summary>
            <param name="name">The assembly name.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver.Resolve(Mono.Cecil.AssemblyNameReference,Mono.Cecil.ReaderParameters)">
            <summary>Resolve an assembly reference.</summary>
            <param name="name">The assembly name.</param>
            <param name="parameters">The assembly reader parameters.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver.ResolveName(System.String)">
            <summary>Resolve a known assembly definition based on its short or full name.</summary>
            <param name="name">The assembly's short or full name.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.AssemblyLoader">
            <summary>Preprocesses and loads mod assemblies.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.Monitor">
            <summary>Encapsulates monitoring and logging.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.ParanoidMode">
            <summary>Whether to detect paranoid mode issues.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.AssemblyMap">
            <summary>Metadata for mapping assemblies to the current platform.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.TypeAssemblies">
            <summary>A type => assembly lookup for types which should be rewritten.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.AssemblyDefinitionResolver">
            <summary>A minimal assembly definition resolver which resolves references to known loaded assemblies.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.Disposables">
            <summary>The objects to dispose as part of this instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.#ctor(StardewModdingAPI.Toolkit.Utilities.Platform,StardewModdingAPI.IMonitor,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="targetPlatform">The current game platform.</param>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="paranoidMode">Whether to detect paranoid mode issues.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.Load(StardewModdingAPI.Framework.IModMetadata,System.String,System.Boolean)">
            <summary>Preprocess and load an assembly.</summary>
            <param name="mod">The mod for which the assembly is being loaded.</param>
            <param name="assemblyPath">The assembly file path.</param>
            <param name="assumeCompatible">Assume the mod is compatible, even if incompatible code is detected.</param>
            <returns>Returns the rewrite metadata for the preprocessed assembly.</returns>
            <exception cref="T:StardewModdingAPI.Framework.ModLoading.IncompatibleInstructionException">An incompatible CIL instruction was found while rewriting the assembly.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.IsAssemblyLoaded(Mono.Cecil.AssemblyNameReference)">
            <summary>Get whether an assembly is loaded.</summary>
            <param name="reference">The assembly name reference.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.ResolveAssembly(System.String)">
            <summary>Resolve an assembly by its name.</summary>
            <param name="name">The assembly name.</param>
            <remarks>
            This implementation returns the first loaded assembly which matches the short form of
            the assembly name, to resolve assembly resolution issues when rewriting
            assemblies (especially with Mono). Since this is meant to be called on <see cref="E:System.AppDomain.AssemblyResolve"/>,
            the implicit assumption is that loading the exact assembly failed.
            </remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.TrackForDisposal``1(``0)">
            <summary>Track an object for disposal as part of the assembly loader.</summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="instance">The disposable instance.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.GetReferencedLocalAssemblies(System.IO.FileInfo,System.Collections.Generic.HashSet{System.String},Mono.Cecil.IAssemblyResolver)">
            <summary>Get a list of referenced local assemblies starting from the mod assembly, ordered from leaf to root.</summary>
            <param name="file">The assembly file to load.</param>
            <param name="visitedAssemblyNames">The assembly names that should be skipped.</param>
            <param name="assemblyResolver">A resolver which resolves references to known assemblies.</param>
            <returns>Returns the rewrite metadata for the preprocessed assembly.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.RewriteAssembly(StardewModdingAPI.Framework.IModMetadata,Mono.Cecil.AssemblyDefinition,System.Collections.Generic.HashSet{System.String},System.String)">
            <summary>Rewrite the types referenced by an assembly.</summary>
            <param name="mod">The mod for which the assembly is being loaded.</param>
            <param name="assembly">The assembly to rewrite.</param>
            <param name="loggedMessages">The messages that have already been logged for this mod.</param>
            <param name="logPrefix">A string to prefix to log messages.</param>
            <returns>Returns whether the assembly was modified.</returns>
            <exception cref="T:StardewModdingAPI.Framework.ModLoading.IncompatibleInstructionException">An incompatible CIL instruction was found while rewriting the assembly.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.ProcessInstructionHandleResult(StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.ModLoading.IInstructionHandler,StardewModdingAPI.Framework.ModLoading.InstructionHandleResult,System.Collections.Generic.HashSet{System.String},System.String,System.String)">
            <summary>Process the result from an instruction handler.</summary>
            <param name="mod">The mod being analyzed.</param>
            <param name="handler">The instruction handler.</param>
            <param name="result">The result returned by the handler.</param>
            <param name="loggedMessages">The messages already logged for the current mod.</param>
            <param name="logPrefix">A string to prefix to log messages.</param>
            <param name="filename">The assembly filename for log messages.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.ChangeTypeScope(Mono.Cecil.TypeReference)">
            <summary>Get the correct reference to use for compatibility with the current platform.</summary>
            <param name="type">The type reference to rewrite.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.GetMethods(Mono.Cecil.ModuleDefinition)">
            <summary>Get all methods in a module.</summary>
            <param name="module">The module to search.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.AssemblyLoadStatus">
            <summary>Indicates the result of an assembly load.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoadStatus.Okay">
            <summary>The assembly was loaded successfully.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoadStatus.Failed">
            <summary>The assembly could not be loaded.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoadStatus.AlreadyLoaded">
            <summary>The assembly is already loaded.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.AssemblyParseResult">
            <summary>Metadata about a parsed assembly definition.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyParseResult.File">
            <summary>The original assembly file.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyParseResult.Definition">
            <summary>The assembly definition.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyParseResult.Status">
            <summary>The result of the assembly load.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyParseResult.#ctor(System.IO.FileInfo,Mono.Cecil.AssemblyDefinition,StardewModdingAPI.Framework.ModLoading.AssemblyLoadStatus)">
            <summary>Construct an instance.</summary>
            <param name="file">The original assembly file.</param>
            <param name="assembly">The assembly definition.</param>
            <param name="status">The result of the assembly load.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder">
            <summary>Finds incompatible CIL instructions that reference a given event.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.FullTypeName">
            <summary>The full type name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.EventName">
            <summary>The event name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.Result">
            <summary>The result to return for matching instructions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.#ctor(System.String,System.String,StardewModdingAPI.Framework.ModLoading.InstructionHandleResult)">
            <summary>Construct an instance.</summary>
            <param name="fullTypeName">The full type name for which to find references.</param>
            <param name="eventName">The event name for which to find references.</param>
            <param name="result">The result to return for matching instructions.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.IsMatch(Mono.Cecil.Cil.Instruction)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder">
            <summary>Finds incompatible CIL instructions that reference a given field.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.FullTypeName">
            <summary>The full type name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.FieldName">
            <summary>The field name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.Result">
            <summary>The result to return for matching instructions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.#ctor(System.String,System.String,StardewModdingAPI.Framework.ModLoading.InstructionHandleResult)">
            <summary>Construct an instance.</summary>
            <param name="fullTypeName">The full type name for which to find references.</param>
            <param name="fieldName">The field name for which to find references.</param>
            <param name="result">The result to return for matching instructions.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.IsMatch(Mono.Cecil.Cil.Instruction)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder">
            <summary>Finds incompatible CIL instructions that reference a given method.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.FullTypeName">
            <summary>The full type name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.MethodName">
            <summary>The method name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.Result">
            <summary>The result to return for matching instructions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.#ctor(System.String,System.String,StardewModdingAPI.Framework.ModLoading.InstructionHandleResult)">
            <summary>Construct an instance.</summary>
            <param name="fullTypeName">The full type name for which to find references.</param>
            <param name="methodName">The method name for which to find references.</param>
            <param name="result">The result to return for matching instructions.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.IsMatch(Mono.Cecil.Cil.Instruction)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder">
            <summary>Finds incompatible CIL instructions that reference a given property.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.FullTypeName">
            <summary>The full type name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.PropertyName">
            <summary>The property name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.Result">
            <summary>The result to return for matching instructions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.#ctor(System.String,System.String,StardewModdingAPI.Framework.ModLoading.InstructionHandleResult)">
            <summary>Construct an instance.</summary>
            <param name="fullTypeName">The full type name for which to find references.</param>
            <param name="propertyName">The property name for which to find references.</param>
            <param name="result">The result to return for matching instructions.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.IsMatch(Mono.Cecil.Cil.Instruction)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMemberWithUnexpectedTypeFinder">
            <summary>Finds references to a field, property, or method which returns a different type than the code expects.</summary>
            <remarks>This implementation is purely heuristic. It should never return a false positive, but won't detect all cases.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMemberWithUnexpectedTypeFinder.ValidateReferencesToAssemblies">
            <summary>The assembly names to which to heuristically detect broken references.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMemberWithUnexpectedTypeFinder.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMemberWithUnexpectedTypeFinder.#ctor(System.String[])">
            <summary>Construct an instance.</summary>
            <param name="validateReferencesToAssemblies">The assembly names to which to heuristically detect broken references.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMemberWithUnexpectedTypeFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMemberWithUnexpectedTypeFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMemberWithUnexpectedTypeFinder.ShouldValidate(Mono.Cecil.TypeReference)">
            <summary>Whether references to the given type should be validated.</summary>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMemberWithUnexpectedTypeFinder.IsUnsupported(Mono.Cecil.MethodReference)">
            <summary>Get whether a method reference is a special case that's not currently supported (e.g. array methods).</summary>
            <param name="method">The method reference.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMemberWithUnexpectedTypeFinder.GetFriendlyTypeName(Mono.Cecil.TypeReference)">
            <summary>Get a shorter type name for display.</summary>
            <param name="type">The type reference.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMissingMemberFinder">
            <summary>Finds references to a field, property, or method which no longer exists.</summary>
            <remarks>This implementation is purely heuristic. It should never return a false positive, but won't detect all cases.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMissingMemberFinder.ValidateReferencesToAssemblies">
            <summary>The assembly names to which to heuristically detect broken references.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMissingMemberFinder.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMissingMemberFinder.#ctor(System.String[])">
            <summary>Construct an instance.</summary>
            <param name="validateReferencesToAssemblies">The assembly names to which to heuristically detect broken references.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMissingMemberFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMissingMemberFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMissingMemberFinder.ShouldValidate(Mono.Cecil.TypeReference)">
            <summary>Whether references to the given type should be validated.</summary>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMissingMemberFinder.IsUnsupported(Mono.Cecil.MethodReference)">
            <summary>Get whether a method reference is a special case that's not currently supported (e.g. array methods).</summary>
            <param name="method">The method reference.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.ReferenceToMissingMemberFinder.IsProperty(Mono.Cecil.MethodReference)">
            <summary>Get whether a method reference is a property getter or setter.</summary>
            <param name="method">The method reference.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder">
            <summary>Finds incompatible CIL instructions that reference a given type.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.FullTypeName">
            <summary>The full type name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.Result">
            <summary>The result to return for matching instructions.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.ShouldIgnore">
            <summary>A lambda which overrides a matched type.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.#ctor(System.String,StardewModdingAPI.Framework.ModLoading.InstructionHandleResult,System.Func{Mono.Cecil.TypeReference,System.Boolean})">
            <summary>Construct an instance.</summary>
            <param name="fullTypeName">The full type name to match.</param>
            <param name="result">The result to return for matching instructions.</param>
            <param name="shouldIgnore">A lambda which overrides a matched type.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.IsMatch(Mono.Cecil.MethodDefinition)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="method">The method definition.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.IsMatch(Mono.Cecil.Cil.Instruction)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.IsMatch(Mono.Cecil.TypeReference)">
            <summary>Get whether a type reference matches the expected type.</summary>
            <param name="type">The type to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.IInstructionHandler">
            <summary>Performs predefined logic for detected CIL instructions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.IInstructionHandler.NounPhrase">
            <summary>A brief noun phrase indicating what the handler matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.IInstructionHandler.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.IInstructionHandler.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.IncompatibleInstructionException">
            <summary>An exception raised when an incompatible instruction is found while loading a mod assembly.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.IncompatibleInstructionException.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.IncompatibleInstructionException.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="message">A message which describes the error.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult">
            <summary>Indicates how an instruction was handled.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.None">
            <summary>No special handling is needed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.Rewritten">
            <summary>The instruction was successfully rewritten for compatibility.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.NotCompatible">
            <summary>The instruction is not compatible and can't be rewritten for compatibility.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.DetectedGamePatch">
            <summary>The instruction is compatible, but patches the game in a way that may impact stability.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.DetectedSaveSerializer">
            <summary>The instruction is compatible, but affects the save serializer in a way that may make saves unloadable without the mod.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.DetectedDynamic">
            <summary>The instruction is compatible, but uses the <c>dynamic</c> keyword which won't work on Linux/Mac.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.DetectedUnvalidatedUpdateTick">
            <summary>The instruction is compatible, but references <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicking"/> or <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicked"/> which may impact stability.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.DetectedConsoleAccess">
            <summary>The instruction accesses the SMAPI console directly.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.DetectedFilesystemAccess">
            <summary>The instruction accesses the filesystem directly.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.DetectedShellAccess">
            <summary>The instruction accesses the OS shell or processes directly.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.InvalidModStateException">
            <summary>An exception which indicates that something went seriously wrong while loading mods, and SMAPI should abort outright.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.InvalidModStateException.#ctor(System.String,System.Exception)">
            <summary>Construct an instance.</summary>
            <param name="message">The error message.</param>
            <param name="ex">The underlying exception, if any.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.ModDependencyStatus">
            <summary>The status of a given mod in the dependency-sorting algorithm.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.ModDependencyStatus.Queued">
            <summary>The mod hasn't been visited yet.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.ModDependencyStatus.Checking">
            <summary>The mod is currently being analyzed as part of a dependency chain.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.ModDependencyStatus.Sorted">
            <summary>The mod has already been sorted.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.ModDependencyStatus.Failed">
            <summary>The mod couldn't be sorted due to a metadata issue (e.g. missing dependencies).</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.ModMetadata">
            <summary>Metadata for a mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.DisplayName">
            <summary>The mod's display name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.RootPath">
            <summary>The root path containing mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.DirectoryPath">
            <summary>The mod's full directory path within the <see cref="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.RootPath"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.RelativeDirectoryPath">
            <summary>The <see cref="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.DirectoryPath"/> relative to the <see cref="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.RootPath"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.Manifest">
            <summary>The mod manifest.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.DataRecord">
            <summary>Metadata about the mod from SMAPI's internal data (if any).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.Status">
            <summary>The metadata resolution status.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.Warnings">
            <summary>Indicates non-error issues with the mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.Error">
            <summary>The reason the metadata is invalid, if any.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.IsIgnored">
            <summary>Whether the mod folder should be ignored. This is <c>true</c> if it was found within a folder whose name starts with a dot.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.Mod">
            <summary>The mod instance (if loaded and <see cref="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.IsContentPack"/> is false).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.ContentPack">
            <summary>The content pack instance (if loaded and <see cref="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.IsContentPack"/> is true).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.Translations">
            <summary>The translations for this mod (if loaded).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.Monitor">
            <summary>Writes messages to the console and log file as this mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.Api">
            <summary>The mod-provided API (if any).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.UpdateCheckData">
            <summary>The update-check metadata for this mod (if any).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.IsContentPack">
            <summary>Whether the mod is a content pack.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.#ctor(System.String,System.String,System.String,StardewModdingAPI.IManifest,StardewModdingAPI.Toolkit.Framework.ModData.ModDataRecordVersionedFields,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="displayName">The mod's display name.</param>
            <param name="directoryPath">The mod's full directory path within the <paramref name="rootPath"/>.</param>
            <param name="rootPath">The root path containing mods.</param>
            <param name="manifest">The mod manifest.</param>
            <param name="dataRecord">Metadata about the mod from SMAPI's internal data (if any).</param>
            <param name="isIgnored">Whether the mod folder should be ignored. This should be <c>true</c> if it was found within a folder whose name starts with a dot.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.SetStatus(StardewModdingAPI.Framework.ModLoading.ModMetadataStatus,System.String)">
            <summary>Set the mod status.</summary>
            <param name="status">The metadata resolution status.</param>
            <param name="error">The reason the metadata is invalid, if any.</param>
            <returns>Return the instance for chaining.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.SetWarning(StardewModdingAPI.Toolkit.Framework.ModData.ModWarning)">
            <summary>Set a warning flag for the mod.</summary>
            <param name="warning">The warning to set.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.SetMod(StardewModdingAPI.IMod,StardewModdingAPI.Framework.ModHelpers.TranslationHelper)">
            <summary>Set the mod instance.</summary>
            <param name="mod">The mod instance to set.</param>
            <param name="translations">The translations for this mod (if loaded).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.SetMod(StardewModdingAPI.IContentPack,StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.ModHelpers.TranslationHelper)">
            <summary>Set the mod instance.</summary>
            <param name="contentPack">The contentPack instance to set.</param>
            <param name="monitor">Writes messages to the console and log file.</param>
            <param name="translations">The translations for this mod (if loaded).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.SetApi(System.Object)">
            <summary>Set the mod-provided API instance.</summary>
            <param name="api">The mod-provided API.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.SetUpdateData(StardewModdingAPI.Toolkit.Framework.Clients.WebApi.ModEntryModel)">
            <summary>Set the update-check metadata for this mod.</summary>
            <param name="data">The update-check metadata.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.HasManifest">
            <summary>Whether the mod manifest was loaded (regardless of whether the mod itself was loaded).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.HasID">
            <summary>Whether the mod has an ID (regardless of whether the ID is valid or the mod itself was loaded).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.HasID(System.String)">
            <summary>Whether the mod has the given ID.</summary>
            <param name="id">The mod ID to check.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.GetUpdateKeys(System.Boolean)">
            <summary>Get the defined update keys.</summary>
            <param name="validOnly">Only return valid update keys.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.GetRequiredModIds(System.Boolean)">
            <summary>Get the mod IDs that must be installed to load this mod.</summary>
            <param name="includeOptional">Whether to include optional dependencies.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.HasValidUpdateKeys">
            <summary>Whether the mod has at least one valid update key set.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.HasUnsuppressWarning(StardewModdingAPI.Toolkit.Framework.ModData.ModWarning)">
            <summary>Get whether the mod has a given warning and it hasn't been suppressed in the <see cref="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.DataRecord"/>.</summary>
            <param name="warning">The warning to check.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.GetRelativePathWithRoot">
            <summary>Get a relative path which includes the root folder name.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.ModMetadataStatus">
            <summary>Indicates the status of a mod's metadata resolution.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.ModMetadataStatus.Found">
            <summary>The mod has been found, but hasn't been processed yet.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.ModMetadataStatus.Failed">
            <summary>The mod cannot be loaded.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.ModResolver">
            <summary>Finds and processes mod metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModResolver.ReadManifests(StardewModdingAPI.Toolkit.ModToolkit,System.String,StardewModdingAPI.Toolkit.Framework.ModData.ModDatabase)">
            <summary>Get manifest metadata for each folder in the given root path.</summary>
            <param name="toolkit">The mod toolkit.</param>
            <param name="rootPath">The root path to search for mods.</param>
            <param name="modDatabase">Handles access to SMAPI's internal mod metadata list.</param>
            <returns>Returns the manifests by relative folder.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModResolver.ValidateManifests(System.Collections.Generic.IEnumerable{StardewModdingAPI.Framework.IModMetadata},StardewModdingAPI.ISemanticVersion,System.Func{System.String,System.String})">
            <summary>Validate manifest metadata.</summary>
            <param name="mods">The mod manifests to validate.</param>
            <param name="apiVersion">The current SMAPI version.</param>
            <param name="getUpdateUrl">Get an update URL for an update key (if valid).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModResolver.ProcessDependencies(System.Collections.Generic.IEnumerable{StardewModdingAPI.Framework.IModMetadata},StardewModdingAPI.Toolkit.Framework.ModData.ModDatabase)">
            <summary>Sort the given mods by the order they should be loaded.</summary>
            <param name="mods">The mods to process.</param>
            <param name="modDatabase">Handles access to SMAPI's internal mod metadata list.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModResolver.ProcessDependencies(StardewModdingAPI.Framework.IModMetadata[],StardewModdingAPI.Toolkit.Framework.ModData.ModDatabase,StardewModdingAPI.Framework.IModMetadata,System.Collections.Generic.IDictionary{StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.ModLoading.ModDependencyStatus},System.Collections.Generic.Stack{StardewModdingAPI.Framework.IModMetadata},System.Collections.Generic.ICollection{StardewModdingAPI.Framework.IModMetadata})">
            <summary>Sort a mod's dependencies by the order they should be loaded, and remove any mods that can't be loaded due to missing or conflicting dependencies.</summary>
            <param name="mods">The full list of mods being validated.</param>
            <param name="modDatabase">Handles access to SMAPI's internal mod metadata list.</param>
            <param name="mod">The mod whose dependencies to process.</param>
            <param name="states">The dependency state for each mod.</param>
            <param name="sortedMods">The list in which to save mods sorted by dependency order.</param>
            <param name="currentChain">The current change of mod dependencies.</param>
            <returns>Returns the mod dependency status.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModResolver.GetModFolders(System.String)">
            <summary>Get all mod folders in a root folder, passing through empty folders as needed.</summary>
            <param name="rootPath">The root folder path to search.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModResolver.GetDependenciesFrom(StardewModdingAPI.IManifest,StardewModdingAPI.Framework.IModMetadata[])">
            <summary>Get the dependencies declared in a manifest.</summary>
            <param name="manifest">The mod manifest.</param>
            <param name="loadedMods">The loaded mods.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.ModResolver.ModDependency">
            <summary>Represents a dependency from one mod to another.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModResolver.ModDependency.ID">
            <summary>The unique ID of the required mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModResolver.ModDependency.MinVersion">
            <summary>The minimum required version (if any).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModResolver.ModDependency.IsRequired">
            <summary>Whether the mod shouldn't be loaded if the dependency isn't available.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModResolver.ModDependency.Mod">
            <summary>The loaded mod that fulfills the dependency (if available).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModResolver.ModDependency.#ctor(System.String,StardewModdingAPI.ISemanticVersion,StardewModdingAPI.Framework.IModMetadata,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="id">The unique ID of the required mod.</param>
            <param name="minVersion">The minimum required version (if any).</param>
            <param name="mod">The loaded mod that fulfills the dependency (if available).</param>
            <param name="isRequired">Whether the mod shouldn't be loaded if the dependency isn't available.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap">
            <summary>Metadata for mapping assemblies to the current <see cref="T:StardewModdingAPI.Toolkit.Utilities.Platform"/>.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.TargetPlatform">
            <summary>The target game platform.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.RemoveNames">
            <summary>The short assembly names to remove as assembly reference, and replace with the <see cref="F:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.Targets"/>. These should be short names (like "Stardew Valley").</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.Targets">
            <summary>The assemblies to target. Equivalent types should be rewritten to use these assemblies.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.TargetReferences">
            <summary>An assembly => reference cache.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.TargetModules">
            <summary>An assembly => module cache.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.#ctor(StardewModdingAPI.Toolkit.Utilities.Platform,System.String[],System.Reflection.Assembly[])">
            <summary>Construct an instance.</summary>
            <param name="targetPlatform">The target game platform.</param>
            <param name="removeAssemblyNames">The assembly short names to remove (like <c>Stardew Valley</c>).</param>
            <param name="targetAssemblies">The assemblies to target.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.RewriteHelper">
            <summary>Provides helper methods for field rewriters.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.RewriteHelper.TypeDefinitionComparer">
            <summary>The comparer which heuristically compares type definitions.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.RewriteHelper.AsFieldReference(Mono.Cecil.Cil.Instruction)">
            <summary>Get the field reference from an instruction if it matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.RewriteHelper.AsMethodReference(Mono.Cecil.Cil.Instruction)">
            <summary>Get the method reference from an instruction if it matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.RewriteHelper.IsSameType(System.Type,Mono.Cecil.TypeReference)">
            <summary>Get whether a type matches a type reference.</summary>
            <param name="type">The defined type.</param>
            <param name="reference">The type reference.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.RewriteHelper.LooksLikeSameType(Mono.Cecil.TypeReference,Mono.Cecil.TypeReference)">
            <summary>Determine whether two type IDs look like the same type, accounting for placeholder values such as !0.</summary>
            <param name="typeA">The type ID to compare.</param>
            <param name="typeB">The other type ID to compare.</param>
            <returns>true if the type IDs look like the same type, false if not.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.RewriteHelper.HasMatchingSignature(System.Reflection.MethodInfo,Mono.Cecil.MethodReference)">
            <summary>Get whether a method definition matches the signature expected by a method reference.</summary>
            <param name="definition">The method definition.</param>
            <param name="reference">The method reference.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.RewriteHelper.HasMatchingSignature(System.Type,Mono.Cecil.MethodReference)">
            <summary>Get whether a type has a method whose signature matches the one expected by a method reference.</summary>
            <param name="type">The type to check.</param>
            <param name="reference">The method reference.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldReplaceRewriter">
            <summary>Rewrites references to one field with another.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldReplaceRewriter.ToField">
            <summary>The new field to reference.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldReplaceRewriter.#ctor(System.Type,System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="type">The type whose field to which references should be rewritten.</param>
            <param name="fromFieldName">The field name to rewrite.</param>
            <param name="toFieldName">The new field name to reference.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldReplaceRewriter.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldToPropertyRewriter">
            <summary>Rewrites field references into property references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldToPropertyRewriter.Type">
            <summary>The type whose field to which references should be rewritten.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldToPropertyRewriter.PropertyName">
            <summary>The property name.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldToPropertyRewriter.#ctor(System.Type,System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="type">The type whose field to which references should be rewritten.</param>
            <param name="fieldName">The field name to rewrite.</param>
            <param name="propertyName">The property name (if different).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldToPropertyRewriter.#ctor(System.Type,System.String)">
            <summary>Construct an instance.</summary>
            <param name="type">The type whose field to which references should be rewritten.</param>
            <param name="fieldName">The field name to rewrite.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldToPropertyRewriter.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter">
            <summary>Rewrites method references from one parent type to another if the signatures match.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.FromType">
            <summary>The type whose methods to remap.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.ToType">
            <summary>The type with methods to map to.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.OnlyIfPlatformChanged">
            <summary>Whether to only rewrite references if loading the assembly on a different platform than it was compiled on.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.#ctor(System.Type,System.Type,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="fromType">The type whose methods to remap.</param>
            <param name="toType">The type with methods to map to.</param>
            <param name="onlyIfPlatformChanged">Whether to only rewrite references if loading the assembly on a different platform than it was compiled on.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.IsMatch(Mono.Cecil.Cil.Instruction,System.Boolean)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="instruction">The IL instruction.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Rewriters.StaticFieldToConstantRewriter`1">
            <summary>Rewrites static field references into constant values.</summary>
            <typeparam name="TValue">The constant value type.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.StaticFieldToConstantRewriter`1.Value">
            <summary>The constant value to replace with.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.StaticFieldToConstantRewriter`1.#ctor(System.Type,System.String,`0)">
            <summary>Construct an instance.</summary>
            <param name="type">The type whose field to which references should be rewritten.</param>
            <param name="fieldName">The field name to rewrite.</param>
            <param name="value">The constant value to replace with.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.StaticFieldToConstantRewriter`1.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.StaticFieldToConstantRewriter`1.CreateConstantInstruction(Mono.Cecil.Cil.ILProcessor,System.Object)">
            <summary>Create a CIL constant value instruction.</summary>
            <param name="cil">The CIL processor.</param>
            <param name="value">The constant value to set.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter">
            <summary>Rewrites all references to a type.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter.FromTypeName">
            <summary>The full type name to which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter.ToType">
            <summary>The new type to reference.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter.#ctor(System.String,System.Type,System.Func{Mono.Cecil.TypeReference,System.Boolean})">
            <summary>Construct an instance.</summary>
            <param name="fromTypeFullName">The full type name to which to find references.</param>
            <param name="toType">The new type to reference.</param>
            <param name="shouldIgnore">A lambda which overrides a matched type.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter.RewriteIfNeeded(Mono.Cecil.ModuleDefinition,Mono.Cecil.TypeReference,System.Action{Mono.Cecil.TypeReference})">
            <summary>Change a type reference if needed.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="type">The type to replace if it matches.</param>
            <param name="set">Assign the new type reference.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.TypeReferenceComparer">
            <summary>Performs heuristic equality checks for <see cref="T:Mono.Cecil.TypeReference"/> instances.</summary>
            <remarks>
            This implementation compares <see cref="T:Mono.Cecil.TypeReference"/> instances to see if they likely
            refer to the same type. While the implementation is obvious for types like <c>System.Bool</c>,
            this class mainly exists to handle cases like <c>System.Collections.Generic.Dictionary`2&lt;!0,Netcode.NetRoot`1&lt;!1&gt;&gt;</c>
            and <c>System.Collections.Generic.Dictionary`2&lt;TKey,Netcode.NetRoot`1&lt;TValue&gt;&gt;</c>
            which are compatible, but not directly comparable. It does this by splitting each type name
            into its component token types, and performing placeholder substitution (e.g. <c>!0</c> to
            <c>TKey</c> in the above example). If all components are equal after substitution, and the
            tokens can all be mapped to the same generic type, the types are considered equal.
            </remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.TypeReferenceComparer.Equals(Mono.Cecil.TypeReference,Mono.Cecil.TypeReference)">
            <summary>Get whether the specified objects are equal.</summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.TypeReferenceComparer.GetHashCode(Mono.Cecil.TypeReference)">
            <summary>Get a hash code for the specified object.</summary>
            <param name="obj">The object for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">The object type is a reference type and <paramref name="obj" /> is null.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.TypeReferenceComparer.HeuristicallyEquals(Mono.Cecil.TypeReference,Mono.Cecil.TypeReference)">
            <summary>Get whether two types are heuristically equal based on generic type token substitution.</summary>
            <param name="typeA">The first type to compare.</param>
            <param name="typeB">The second type to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.TypeReferenceComparer.MapPlaceholder(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Map a generic type placeholder (like <c>!0</c>) to its actual type.</summary>
            <param name="placeholder">The token placeholder.</param>
            <param name="type">The actual type.</param>
            <param name="map">The map of token to map substitutions.</param>
            <returns>Returns the previously-mapped type if applicable, else the <paramref name="type"/>.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.TypeReferenceComparer.GetTypeSymbols(System.String)">
            <summary>Get the top-level type symbols in a type name (e.g. <code>List</code> and <code>NetRef&lt;T&gt;</code> in <code>List&lt;NetRef&lt;T&gt;&gt;</code>)</summary>
            <param name="typeName">The full type name.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModRegistry">
            <summary>Tracks the installed mods.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModRegistry.Mods">
            <summary>The registered mod data.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModRegistry.ModNamesByAssembly">
            <summary>An assembly full name => mod lookup.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModRegistry.AreAllModsLoaded">
            <summary>Whether all mod assemblies have been loaded.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModRegistry.AreAllModsInitialized">
            <summary>Whether all mods have been initialized and their <see cref="M:StardewModdingAPI.IMod.Entry(StardewModdingAPI.IModHelper)"/> method called.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModRegistry.Add(StardewModdingAPI.Framework.IModMetadata)">
            <summary>Register a mod.</summary>
            <param name="metadata">The mod metadata.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModRegistry.TrackAssemblies(StardewModdingAPI.Framework.IModMetadata,System.Reflection.Assembly)">
            <summary>Track a mod's assembly for use via <see cref="M:StardewModdingAPI.Framework.ModRegistry.GetFrom(System.Type)"/>.</summary>
            <param name="metadata">The mod metadata.</param>
            <param name="modAssembly">The mod assembly.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModRegistry.GetAll(System.Boolean,System.Boolean)">
            <summary>Get metadata for all loaded mods.</summary>
            <param name="assemblyMods">Whether to include SMAPI mods.</param>
            <param name="contentPacks">Whether to include content pack mods.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModRegistry.Get(System.String)">
            <summary>Get metadata for a loaded mod.</summary>
            <param name="uniqueID">The mod's unique ID.</param>
            <returns>Returns the matching mod's metadata, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModRegistry.GetFrom(System.Type)">
            <summary>Get the mod metadata from one of its assemblies.</summary>
            <param name="type">The type to check.</param>
            <returns>Returns the mod name, or <c>null</c> if the type isn't part of a known mod.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModRegistry.GetFromStack">
            <summary>Get the friendly name for the closest assembly registered as a source of deprecation warnings.</summary>
            <returns>Returns the source name, or <c>null</c> if no registered assemblies were found.</returns>
        </member>
        <member name="T:StardewModdingAPI.Framework.Monitor">
            <summary>Encapsulates monitoring and logic for a given module.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Monitor.Source">
            <summary>The name of the module which logs messages using this instance.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Monitor.ConsoleWriter">
            <summary>Handles writing color-coded text to the console.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Monitor.ConsoleInterceptor">
            <summary>Manages access to the console output.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Monitor.LogFile">
            <summary>The log file to which to write messages.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Monitor.MaxLevelLength">
            <summary>The maximum length of the <see cref="T:StardewModdingAPI.LogLevel"/> values.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Monitor.IsVerbose">
            <summary>Whether verbose logging is enabled. This enables more detailed diagnostic messages than are normally needed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Monitor.ShowFullStampInConsole">
            <summary>Whether to show the full log stamps (with time/level/logger) in the console. If false, shows a simplified stamp with only the logger.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Monitor.ShowTraceInConsole">
            <summary>Whether to show trace messages in the console.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Monitor.WriteToConsole">
            <summary>Whether to write anything to the console. This should be disabled if no console is available.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.#ctor(System.String,StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager,StardewModdingAPI.Framework.Logging.LogFileManager,StardewModdingAPI.Internal.ConsoleWriting.ColorSchemeConfig,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="source">The name of the module which logs messages using this instance.</param>
            <param name="consoleInterceptor">Intercepts access to the console output.</param>
            <param name="logFile">The log file to which to write messages.</param>
            <param name="colorConfig">The colors to use for text written to the SMAPI console.</param>
            <param name="isVerbose">Whether verbose logging is enabled. This enables more detailed diagnostic messages than are normally needed.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.Log(System.String,StardewModdingAPI.LogLevel)">
            <summary>Log a message for the player or developer.</summary>
            <param name="message">The message to log.</param>
            <param name="level">The log severity level.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.VerboseLog(System.String)">
            <summary>Log a message that only appears when <see cref="P:StardewModdingAPI.IMonitor.IsVerbose"/> is enabled.</summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.Newline">
            <summary>Write a newline to the console and log file.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.LogFatal(System.String)">
            <summary>Log a fatal error message.</summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.LogUserInput(System.String)">
            <summary>Log console input from the user.</summary>
            <param name="input">The user input to log.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.LogImpl(System.String,System.String,StardewModdingAPI.Internal.ConsoleWriting.ConsoleLogLevel)">
            <summary>Write a message line to the log.</summary>
            <param name="source">The name of the mod logging the message.</param>
            <param name="message">The message to log.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.GenerateMessagePrefix(System.String,StardewModdingAPI.Internal.ConsoleWriting.ConsoleLogLevel)">
            <summary>Generate a message prefix for the current time.</summary>
            <param name="source">The name of the mod logging the message.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Networking.MessageType">
            <summary>Network message types recognized by SMAPI and Stardew Valley.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Networking.MessageType.ModMessage">
            <summary>A data message intended for mods to consume.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Networking.MessageType.ModContext">
            <summary>Metadata context about a player synced by SMAPI.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Networking.MessageType.ServerIntroduction">
            <summary>Metadata about the host server sent to a farmhand.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Networking.MessageType.PlayerIntroduction">
            <summary>Metadata about a player sent to a farmhand or server.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Networking.ModMessageModel">
            <summary>The metadata for a mod message.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.ModMessageModel.FromPlayerID">
            <summary>The unique ID of the player who broadcast the message.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.ModMessageModel.FromModID">
            <summary>The unique ID of the mod which broadcast the message.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.ModMessageModel.ToPlayerIDs">
            <summary>The players who should receive the message, or <c>null</c> for all players.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.ModMessageModel.ToModIDs">
            <summary>The mods which should receive the message, or <c>null</c> for all mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.ModMessageModel.Type">
            <summary>A message type which receiving mods can use to decide whether it's the one they want to handle, like <c>SetPlayerLocation</c>. This doesn't need to be globally unique, since mods should check the originating mod ID.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.ModMessageModel.Data">
            <summary>The custom mod data being broadcast.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.ModMessageModel.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.ModMessageModel.#ctor(System.Int64,System.String,System.Int64[],System.String[],System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>Construct an instance.</summary>
            <param name="fromPlayerID">The unique ID of the player who broadcast the message.</param>
            <param name="fromModID">The unique ID of the mod which broadcast the message.</param>
            <param name="toPlayerIDs">The players who should receive the message, or <c>null</c> for all players.</param>
            <param name="toModIDs">The mods which should receive the message, or <c>null</c> for all mods.</param>
            <param name="type">A message type which receiving mods can use to decide whether it's the one they want to handle, like <c>SetPlayerLocation</c>. This doesn't need to be globally unique, since mods should check the originating mod ID.</param>
            <param name="data">The custom mod data being broadcast.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.ModMessageModel.#ctor(StardewModdingAPI.Framework.Networking.ModMessageModel)">
            <summary>Construct an instance.</summary>
            <param name="message">The message to clone.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Networking.MultiplayerPeer">
            <summary>Metadata about a connected player.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Networking.MultiplayerPeer.SendMessageImpl">
            <summary>A method which sends a message to the peer.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.MultiplayerPeer.PlayerID">
            <summary>The player's unique ID.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.MultiplayerPeer.IsHost">
            <summary>Whether this is a connection to the host player.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.MultiplayerPeer.HasSmapi">
            <summary>Whether the player has SMAPI installed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.MultiplayerPeer.Platform">
            <summary>The player's OS platform, if <see cref="P:StardewModdingAPI.Framework.Networking.MultiplayerPeer.HasSmapi"/> is true.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.MultiplayerPeer.GameVersion">
            <summary>The installed version of Stardew Valley, if <see cref="P:StardewModdingAPI.Framework.Networking.MultiplayerPeer.HasSmapi"/> is true.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.MultiplayerPeer.ApiVersion">
            <summary>The installed version of SMAPI, if <see cref="P:StardewModdingAPI.Framework.Networking.MultiplayerPeer.HasSmapi"/> is true.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.MultiplayerPeer.Mods">
            <summary>The installed mods, if <see cref="P:StardewModdingAPI.Framework.Networking.MultiplayerPeer.HasSmapi"/> is true.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.MultiplayerPeer.#ctor(System.Int64,StardewModdingAPI.Framework.Networking.RemoteContextModel,System.Action{StardewValley.Network.OutgoingMessage},System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="playerID">The player's unique ID.</param>
            <param name="model">The metadata to copy.</param>
            <param name="sendMessage">A method which sends a message to the peer.</param>
            <param name="isHost">Whether this is a connection to the host player.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.MultiplayerPeer.GetMod(System.String)">
            <summary>Get metadata for a mod installed by the player.</summary>
            <param name="id">The unique mod ID.</param>
            <returns>Returns the mod info, or <c>null</c> if the player doesn't have that mod.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.MultiplayerPeer.SendMessage(StardewValley.Network.OutgoingMessage)">
            <summary>Send a message to the given peer, bypassing the game's normal validation to allow messages before the connection is approved.</summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.MultiplayerPeerMod.Name">
            <summary>The mod's display name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.MultiplayerPeerMod.ID">
            <summary>The unique mod ID.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.MultiplayerPeerMod.Version">
            <summary>The mod version.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.MultiplayerPeerMod.#ctor(StardewModdingAPI.Framework.Networking.RemoteContextModModel)">
            <summary>Construct an instance.</summary>
            <param name="mod">The mod metadata.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Networking.RemoteContextModel">
            <summary>Metadata about the game, SMAPI, and installed mods exchanged with connected computers.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.RemoteContextModel.IsHost">
            <summary>Whether this player is the host player.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.RemoteContextModel.Platform">
            <summary>The game's platform version.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.RemoteContextModel.GameVersion">
            <summary>The installed version of Stardew Valley.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.RemoteContextModel.ApiVersion">
            <summary>The installed version of SMAPI.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.RemoteContextModel.Mods">
            <summary>The installed mods.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Networking.RemoteContextModModel">
            <summary>Metadata about an installed mod exchanged with connected computers.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.RemoteContextModModel.Name">
            <summary>The mod's display name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.RemoteContextModModel.ID">
            <summary>The unique mod ID.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Networking.RemoteContextModModel.Version">
            <summary>The mod version.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Networking.SGalaxyNetClient">
            <summary>A multiplayer client used to connect to a hosted server. This is an implementation of <see cref="T:StardewValley.SDKs.GalaxyNetClient"/> with callbacks for SMAPI functionality.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Networking.SGalaxyNetClient.OnProcessingMessage">
            <summary>A callback to raise when receiving a message. This receives the incoming message, a method to send an arbitrary message, and a callback to run the default logic.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Networking.SGalaxyNetClient.OnSendingMessage">
            <summary>A callback to raise when sending a message. This receives the outgoing message, a method to send an arbitrary message, and a callback to resume the default logic.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.SGalaxyNetClient.#ctor(Galaxy.Api.GalaxyID,System.Action{StardewValley.Network.IncomingMessage,System.Action{StardewValley.Network.OutgoingMessage},System.Action},System.Action{StardewValley.Network.OutgoingMessage,System.Action{StardewValley.Network.OutgoingMessage},System.Action})">
            <summary>Construct an instance.</summary>
            <param name="address">The remote address being connected.</param>
            <param name="onProcessingMessage">A callback to raise when receiving a message. This receives the incoming message, a method to send an arbitrary message, and a callback to run the default logic.</param>
            <param name="onSendingMessage">A callback to raise when sending a message. This receives the outgoing message, a method to send an arbitrary message, and a callback to resume the default logic.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.SGalaxyNetClient.sendMessage(StardewValley.Network.OutgoingMessage)">
            <summary>Send a message to the connected peer.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.SGalaxyNetClient.processIncomingMessage(StardewValley.Network.IncomingMessage)">
            <summary>Process an incoming network message.</summary>
            <param name="message">The message to process.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Networking.SGalaxyNetServer">
            <summary>A multiplayer server used to connect to an incoming player. This is an implementation of <see cref="T:StardewValley.Network.LidgrenServer"/> that adds support for SMAPI's metadata context exchange.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Networking.SGalaxyNetServer.OnProcessingMessage">
            <summary>A callback to raise when receiving a message. This receives the incoming message, a method to send a message, and a callback to run the default logic.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Networking.SGalaxyNetServer.Multiplayer">
            <summary>SMAPI's implementation of the game's core multiplayer logic.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.SGalaxyNetServer.#ctor(StardewValley.Network.IGameServer,StardewModdingAPI.Framework.SMultiplayer,System.Action{StardewValley.Network.IncomingMessage,System.Action{StardewValley.Network.OutgoingMessage},System.Action})">
            <summary>Construct an instance.</summary>
            <param name="gameServer">The underlying game server.</param>
            <param name="multiplayer">SMAPI's implementation of the game's core multiplayer logic.</param>
            <param name="onProcessingMessage">A callback to raise when receiving a message. This receives the incoming message, a method to send a message, and a callback to run the default logic.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.SGalaxyNetServer.onReceiveMessage(Galaxy.Api.GalaxyID,System.IO.Stream)">
            <summary>Read and process a message from the client.</summary>
            <param name="peer">The Galaxy peer ID.</param>
            <param name="messageStream">The data to process.</param>
            <remarks>This reimplements <see cref="M:StardewValley.SDKs.GalaxyNetServer.onReceiveMessage(Galaxy.Api.GalaxyID,System.IO.Stream)"/>, but adds a callback to <see cref="F:StardewModdingAPI.Framework.Networking.SGalaxyNetServer.OnProcessingMessage"/>.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.SGalaxyNetServer.SendMessageToPeerID(System.UInt64,StardewValley.Network.OutgoingMessage)">
            <summary>Send a message to a remote peer.</summary>
            <param name="peerID">The unique Galaxy ID, derived from <see cref="M:Galaxy.Api.GalaxyID.ToUint64"/>.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Networking.SLidgrenClient">
            <summary>A multiplayer client used to connect to a hosted server. This is an implementation of <see cref="T:StardewValley.Network.LidgrenClient"/> with callbacks for SMAPI functionality.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Networking.SLidgrenClient.OnProcessingMessage">
            <summary>A callback to raise when receiving a message. This receives the incoming message, a method to send an arbitrary message, and a callback to run the default logic.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Networking.SLidgrenClient.OnSendingMessage">
            <summary>A callback to raise when sending a message. This receives the outgoing message, a method to send an arbitrary message, and a callback to resume the default logic.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.SLidgrenClient.#ctor(System.String,System.Action{StardewValley.Network.IncomingMessage,System.Action{StardewValley.Network.OutgoingMessage},System.Action},System.Action{StardewValley.Network.OutgoingMessage,System.Action{StardewValley.Network.OutgoingMessage},System.Action})">
            <summary>Construct an instance.</summary>
            <param name="address">The remote address being connected.</param>
            <param name="onProcessingMessage">A callback to raise when receiving a message. This receives the incoming message, a method to send an arbitrary message, and a callback to run the default logic.</param>
            <param name="onSendingMessage">A callback to raise when sending a message. This receives the outgoing message, a method to send an arbitrary message, and a callback to resume the default logic.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.SLidgrenClient.sendMessage(StardewValley.Network.OutgoingMessage)">
            <summary>Send a message to the connected peer.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.SLidgrenClient.processIncomingMessage(StardewValley.Network.IncomingMessage)">
            <summary>Process an incoming network message.</summary>
            <param name="message">The message to process.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Networking.SLidgrenServer">
            <summary>A multiplayer server used to connect to an incoming player. This is an implementation of <see cref="T:StardewValley.Network.LidgrenServer"/> that adds support for SMAPI's metadata context exchange.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Networking.SLidgrenServer.Multiplayer">
            <summary>SMAPI's implementation of the game's core multiplayer logic.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Networking.SLidgrenServer.OnProcessingMessage">
            <summary>A callback to raise when receiving a message. This receives the incoming message, a method to send a message, and a callback to run the default logic.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.SLidgrenServer.#ctor(StardewValley.Network.IGameServer,StardewModdingAPI.Framework.SMultiplayer,System.Action{StardewValley.Network.IncomingMessage,System.Action{StardewValley.Network.OutgoingMessage},System.Action})">
            <summary>Construct an instance.</summary>
            <param name="multiplayer">SMAPI's implementation of the game's core multiplayer logic.</param>
            <param name="gameServer">The underlying game server.</param>
            <param name="onProcessingMessage">A callback to raise when receiving a message. This receives the incoming message, a method to send a message, and a callback to run the default logic.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Networking.SLidgrenServer.parseDataMessageFromClient(Lidgren.Network.NetIncomingMessage)">
            <summary>Parse a data message from a client.</summary>
            <param name="rawMessage">The raw network message to parse.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Patching.GamePatcher">
            <summary>Encapsulates applying Harmony patches to the game.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Patching.GamePatcher.Monitor">
            <summary>Encapsulates monitoring and logging.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Patching.GamePatcher.#ctor(StardewModdingAPI.IMonitor)">
            <summary>Construct an instance.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Patching.GamePatcher.Apply(StardewModdingAPI.Framework.Patching.IHarmonyPatch[])">
            <summary>Apply all loaded patches to the game.</summary>
            <param name="patches">The patches to apply.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Patching.IHarmonyPatch">
            <summary>A Harmony patch to apply.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Patching.IHarmonyPatch.Name">
            <summary>A unique name for this patch.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Patching.IHarmonyPatch.Apply(Harmony.HarmonyInstance)">
            <summary>Apply the Harmony patch.</summary>
            <param name="harmony">The Harmony instance.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Reflection.CacheEntry">
            <summary>A cached member reflection result.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Reflection.CacheEntry.IsValid">
            <summary>Whether the lookup found a valid match.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Reflection.CacheEntry.MemberInfo">
            <summary>The reflection data for this member (or <c>null</c> if invalid).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.CacheEntry.#ctor(System.Boolean,System.Reflection.MemberInfo)">
            <summary>Construct an instance.</summary>
            <param name="isValid">Whether the lookup found a valid match.</param>
            <param name="memberInfo">The reflection data for this member (or <c>null</c> if invalid).</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Reflection.InterfaceProxyBuilder">
            <summary>Generates a proxy class to access a mod API through an arbitrary interface.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.InterfaceProxyBuilder.TargetType">
            <summary>The target class type.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.InterfaceProxyBuilder.ProxyType">
            <summary>The generated proxy type.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.InterfaceProxyBuilder.#ctor(System.String,System.Reflection.Emit.ModuleBuilder,System.Type,System.Type)">
            <summary>Construct an instance.</summary>
            <param name="name">The type name to generate.</param>
            <param name="moduleBuilder">The CLR module in which to create proxy classes.</param>
            <param name="interfaceType">The interface type to implement.</param>
            <param name="targetType">The target type.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.InterfaceProxyBuilder.CreateInstance(System.Object)">
            <summary>Create an instance of the proxy for a target instance.</summary>
            <param name="targetInstance">The target instance.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.InterfaceProxyBuilder.ProxyMethod(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo,System.Reflection.Emit.FieldBuilder)">
            <summary>Define a method which proxies access to a method on the target.</summary>
            <param name="proxyBuilder">The proxy type being generated.</param>
            <param name="target">The target method.</param>
            <param name="instanceField">The proxy field containing the API instance.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Reflection.InterfaceProxyFactory">
            <summary>Generates proxy classes to access mod APIs through an arbitrary interface.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.InterfaceProxyFactory.ModuleBuilder">
            <summary>The CLR module in which to create proxy classes.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.InterfaceProxyFactory.Builders">
            <summary>The generated proxy types.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.InterfaceProxyFactory.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.InterfaceProxyFactory.CreateProxy``1(System.Object,System.String,System.String)">
            <summary>Create an API proxy.</summary>
            <typeparam name="TInterface">The interface through which to access the API.</typeparam>
            <param name="instance">The API instance to access.</param>
            <param name="sourceModID">The unique ID of the mod consuming the API.</param>
            <param name="targetModID">The unique ID of the mod providing the API.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Reflection.ReflectedField`1">
            <summary>A field obtained through reflection.</summary>
            <typeparam name="TValue">The field value type.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.ReflectedField`1.ParentType">
            <summary>The type that has the field.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.ReflectedField`1.Parent">
            <summary>The object that has the instance field (if applicable).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Reflection.ReflectedField`1.DisplayName">
            <summary>The display name shown in error messages.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Reflection.ReflectedField`1.FieldInfo">
            <summary>The reflection metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.ReflectedField`1.#ctor(System.Type,System.Object,System.Reflection.FieldInfo,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="parentType">The type that has the field.</param>
            <param name="obj">The object that has the instance field (if applicable).</param>
            <param name="field">The reflection metadata.</param>
            <param name="isStatic">Whether the field is static.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parentType"/> or <paramref name="field"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="obj"/> is null for a non-static field, or not null for a static field.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.ReflectedField`1.GetValue">
            <summary>Get the field value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.ReflectedField`1.SetValue(`0)">
            <summary>Set the field value.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Reflection.ReflectedMethod">
            <summary>A method obtained through reflection.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.ReflectedMethod.ParentType">
            <summary>The type that has the method.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.ReflectedMethod.Parent">
            <summary>The object that has the instance method (if applicable).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Reflection.ReflectedMethod.DisplayName">
            <summary>The display name shown in error messages.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Reflection.ReflectedMethod.MethodInfo">
            <summary>The reflection metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.ReflectedMethod.#ctor(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="parentType">The type that has the method.</param>
            <param name="obj">The object that has the instance method(if applicable).</param>
            <param name="method">The reflection metadata.</param>
            <param name="isStatic">Whether the method is static.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parentType"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="obj"/> is null for a non-static method, or not null for a static method.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.ReflectedMethod.Invoke``1(System.Object[])">
            <summary>Invoke the method.</summary>
            <typeparam name="TValue">The return type.</typeparam>
            <param name="arguments">The method arguments to pass in.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.ReflectedMethod.Invoke(System.Object[])">
            <summary>Invoke the method.</summary>
            <param name="arguments">The method arguments to pass in.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Reflection.ReflectedProperty`1">
            <summary>A property obtained through reflection.</summary>
            <typeparam name="TValue">The property value type.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.ReflectedProperty`1.DisplayName">
            <summary>The display name shown in error messages.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.ReflectedProperty`1.GetMethod">
            <summary>The underlying property getter.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.ReflectedProperty`1.SetMethod">
            <summary>The underlying property setter.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Reflection.ReflectedProperty`1.PropertyInfo">
            <summary>The reflection metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.ReflectedProperty`1.#ctor(System.Type,System.Object,System.Reflection.PropertyInfo,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="parentType">The type that has the property.</param>
            <param name="obj">The object that has the instance property (if applicable).</param>
            <param name="property">The reflection metadata.</param>
            <param name="isStatic">Whether the property is static.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parentType"/> or <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="obj"/> is null for a non-static property, or not null for a static property.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.ReflectedProperty`1.GetValue">
            <summary>Get the property value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.ReflectedProperty`1.SetValue(`0)">
            <summary>Set the property value.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Reflection.Reflector">
            <summary>Provides helper methods for accessing inaccessible code.</summary>
            <remarks>This implementation searches up the type hierarchy, and caches the reflected fields and methods with a sliding expiry (to optimize performance without unnecessary memory usage).</remarks>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.Reflector.Cache">
            <summary>The cached fields and methods found via reflection.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.Reflector.SlidingCacheExpiry">
            <summary>The sliding cache expiration time.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetField``1(System.Object,System.String,System.Boolean)">
            <summary>Get a instance field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="obj">The object which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
            <returns>Returns the field wrapper, or <c>null</c> if the field doesn't exist and <paramref name="required"/> is <c>false</c>.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetField``1(System.Type,System.String,System.Boolean)">
            <summary>Get a static field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="type">The type which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetProperty``1(System.Object,System.String,System.Boolean)">
            <summary>Get a instance property.</summary>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="obj">The object which has the property.</param>
            <param name="name">The property name.</param>
            <param name="required">Whether to throw an exception if the property is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetProperty``1(System.Type,System.String,System.Boolean)">
            <summary>Get a static property.</summary>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="type">The type which has the property.</param>
            <param name="name">The property name.</param>
            <param name="required">Whether to throw an exception if the property is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetMethod(System.Object,System.String,System.Boolean)">
            <summary>Get a instance method.</summary>
            <param name="obj">The object which has the method.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetMethod(System.Type,System.String,System.Boolean)">
            <summary>Get a static method.</summary>
            <param name="type">The type which has the method.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetMethod(System.Object,System.String,System.Type[],System.Boolean)">
            <summary>Get a instance method.</summary>
            <param name="obj">The object which has the method.</param>
            <param name="name">The field name.</param>
            <param name="argumentTypes">The argument types of the method signature to find.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetMethod(System.Type,System.String,System.Type[],System.Boolean)">
            <summary>Get a static method.</summary>
            <param name="type">The type which has the method.</param>
            <param name="name">The field name.</param>
            <param name="argumentTypes">The argument types of the method signature to find.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetFieldFromHierarchy``1(System.Type,System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>Get a field from the type hierarchy.</summary>
            <typeparam name="TValue">The expected field type.</typeparam>
            <param name="type">The type which has the field.</param>
            <param name="obj">The object which has the field.</param>
            <param name="name">The field name.</param>
            <param name="bindingFlags">The reflection binding which flags which indicates what type of field to find.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetPropertyFromHierarchy``1(System.Type,System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>Get a property from the type hierarchy.</summary>
            <typeparam name="TValue">The expected property type.</typeparam>
            <param name="type">The type which has the property.</param>
            <param name="obj">The object which has the property.</param>
            <param name="name">The property name.</param>
            <param name="bindingFlags">The reflection binding which flags which indicates what type of property to find.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetMethodFromHierarchy(System.Type,System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>Get a method from the type hierarchy.</summary>
            <param name="type">The type which has the method.</param>
            <param name="obj">The object which has the method.</param>
            <param name="name">The method name.</param>
            <param name="bindingFlags">The reflection binding which flags which indicates what type of method to find.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetMethodFromHierarchy(System.Type,System.Object,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>Get a method from the type hierarchy.</summary>
            <param name="type">The type which has the method.</param>
            <param name="obj">The object which has the method.</param>
            <param name="name">The method name.</param>
            <param name="bindingFlags">The reflection binding which flags which indicates what type of method to find.</param>
            <param name="argumentTypes">The argument types of the method signature to find.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetCached``1(System.String,System.Func{``0})">
            <summary>Get a method or field through the cache.</summary>
            <typeparam name="TMemberInfo">The expected <see cref="T:System.Reflection.MemberInfo"/> type.</typeparam>
            <param name="key">The cache key.</param>
            <param name="fetch">Fetches a new value to cache.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.RequestExitDelegate">
            <summary>A delegate which requests that SMAPI immediately exit the game. This should only be invoked when an irrecoverable fatal error happens that risks save corruption or game-breaking bugs.</summary>
            <param name="module">The module which requested an immediate exit.</param>
            <param name="reason">The reason provided for the shutdown.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.RewriteFacades.SpriteBatchMethods">
            <summary>Provides <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> method signatures that can be injected into mod code for compatibility between Linux/Mac or Windows.</summary>
            <remarks>This is public to support SMAPI rewriting and should not be referenced directly by mods.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.RewriteFacades.SpriteBatchMethods.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>Construct an instance.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.SCore">
            <summary>The core class which initializes and manages SMAPI.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.LogFile">
            <summary>The log file to which to write messages.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.ConsoleManager">
            <summary>Manages console output interception.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.Monitor">
            <summary>The core logger and monitor for SMAPI.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.MonitorForGame">
            <summary>The core logger and monitor on behalf of the game.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.CancellationToken">
            <summary>Tracks whether the game should exit immediately and any pending initialization should be cancelled.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.Reflection">
            <summary>Simplifies access to private game code.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.Translator">
            <summary>Encapsulates access to SMAPI core translations.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.Settings">
            <summary>The SMAPI configuration settings.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.GameInstance">
            <summary>The underlying game instance.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SCore.ContentCore">
            <summary>The underlying content manager.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.ModRegistry">
            <summary>Tracks the installed mods.</summary>
            <remarks>This is initialized after the game starts.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.EventManager">
            <summary>Manages SMAPI events for mods.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.IsGameRunning">
            <summary>Whether the game is currently running.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.IsDisposed">
            <summary>Whether the program has been disposed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.SuppressConsolePatterns">
            <summary>Regex patterns which match console non-error messages to suppress from the console and log.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.ReplaceConsolePatterns">
            <summary>Regex patterns which match console messages to show a more friendly error for.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SCore.Toolkit">
            <summary>The mod toolkit used for generic mod interactions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SCore.ModsPath">
            <summary>The path to search for mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SCore.DeprecationManager">
            <summary>Manages deprecation warnings.</summary>
            <remarks>This is initialized after the game starts. This is accessed directly because it's not part of the normal class model.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.#ctor(System.String,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="modsPath">The path to search for mods.</param>
            <param name="writeToConsole">Whether to output log messages to the console.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.RunInteractively">
            <summary>Launch SMAPI.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.InitializeBeforeFirstAssetLoaded">
            <summary>Initialize mods before the first game asset is loaded. At this point the core content managers are loaded (so mods can load their own assets), but the game is mostly uninitialized.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.InitializeAfterGameStart">
            <summary>Initialize SMAPI and mods after the game starts.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.OnLocaleChanged">
            <summary>Handle the game changing locale.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.RunConsoleLoop">
            <summary>Run a loop handling console input.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.ValidateContentIntegrity">
            <summary>Look for common issues with the game's XNB content, and log warnings if anything looks broken or outdated.</summary>
            <returns>Returns whether all integrity checks passed.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.CheckForUpdatesAsync(StardewModdingAPI.Framework.IModMetadata[])">
            <summary>Asynchronously check for a new version of SMAPI and any installed mods, and print alerts to the console if an update is available.</summary>
            <param name="mods">The mods to include in the update check (if eligible).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.VerifyPath(System.String)">
            <summary>Create a directory path if it doesn't exist.</summary>
            <param name="path">The directory path.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.LoadMods(StardewModdingAPI.Framework.IModMetadata[],StardewModdingAPI.Toolkit.Serialization.JsonHelper,StardewModdingAPI.Framework.ContentCoordinator,StardewModdingAPI.Toolkit.Framework.ModData.ModDatabase)">
            <summary>Load and hook up the given mods.</summary>
            <param name="mods">The mods to load.</param>
            <param name="jsonHelper">The JSON helper with which to read mods' JSON files.</param>
            <param name="contentCore">The content manager to use for mod content.</param>
            <param name="modDatabase">Handles access to SMAPI's internal mod metadata list.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.TryLoadMod(StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.IModMetadata[],StardewModdingAPI.Framework.ModLoading.AssemblyLoader,StardewModdingAPI.Framework.Reflection.InterfaceProxyFactory,StardewModdingAPI.Toolkit.Serialization.JsonHelper,StardewModdingAPI.Framework.ContentCoordinator,StardewModdingAPI.Toolkit.Framework.ModData.ModDatabase,System.Collections.Generic.HashSet{System.String},System.String@,System.String@)">
            <summary>Load a given mod.</summary>
            <param name="mod">The mod to load.</param>
            <param name="mods">The mods being loaded.</param>
            <param name="assemblyLoader">Preprocesses and loads mod assemblies</param>
            <param name="proxyFactory">Generates proxy classes to access mod APIs through an arbitrary interface.</param>
            <param name="jsonHelper">The JSON helper with which to read mods' JSON files.</param>
            <param name="contentCore">The content manager to use for mod content.</param>
            <param name="modDatabase">Handles access to SMAPI's internal mod metadata list.</param>
            <param name="suppressUpdateChecks">The mod IDs to ignore when validating update keys.</param>
            <param name="errorReasonPhrase">The user-facing reason phrase explaining why the mod couldn't be loaded (if applicable).</param>
            <param name="errorDetails">More detailed details about the error intended for developers (if any).</param>
            <returns>Returns whether the mod was successfully loaded.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.LogModWarnings(System.Collections.Generic.IEnumerable{StardewModdingAPI.Framework.IModMetadata},System.Collections.Generic.IDictionary{StardewModdingAPI.Framework.IModMetadata,System.Tuple{System.String,System.String}})">
            <summary>Write a summary of mod warnings to the console and log.</summary>
            <param name="mods">The loaded mods.</param>
            <param name="skippedMods">The mods which were skipped, along with the friendly and developer reasons.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.TryLoadModEntry(System.Reflection.Assembly,StardewModdingAPI.Mod@,System.String@)">
            <summary>Load a mod's entry class.</summary>
            <param name="modAssembly">The mod assembly.</param>
            <param name="mod">The loaded instance.</param>
            <param name="error">The error indicating why loading failed (if applicable).</param>
            <returns>Returns whether the mod entry class was successfully loaded.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.ReloadTranslations(System.Collections.Generic.IEnumerable{StardewModdingAPI.Framework.IModMetadata})">
            <summary>Reload translations for all mods.</summary>
            <param name="mods">The mods for which to reload translations.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.ReadTranslationFiles(System.String,System.Collections.Generic.IList{System.String}@)">
            <summary>Read translations from a directory containing JSON translation files.</summary>
            <param name="folderPath">The folder path to search.</param>
            <param name="errors">The errors indicating why translation files couldn't be parsed, indexed by translation filename.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.HandleCommand(System.String,System.String[])">
            <summary>The method called when the user submits a core SMAPI command in the console.</summary>
            <param name="name">The command name.</param>
            <param name="arguments">The command arguments.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.HandleConsoleMessage(StardewModdingAPI.IMonitor,System.String)">
            <summary>Redirect messages logged directly to the console to the given monitor.</summary>
            <param name="gameMonitor">The monitor with which to log messages as the game.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.PressAnyKeyToExit">
            <summary>Show a 'press any key to exit' message, and exit when they press a key.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.PressAnyKeyToExit(System.Boolean)">
            <summary>Show a 'press any key to exit' message, and exit when they press a key.</summary>
            <param name="showMessage">Whether to print a 'press any key to exit' message to the console.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.GetSecondaryMonitor(System.String)">
            <summary>Get a monitor instance derived from SMAPI's current settings.</summary>
            <param name="name">The name of the module which will log messages with this instance.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.GetLogPath">
            <summary>Get the absolute path to the next available log file.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.PurgeNormalLogs">
            <summary>Delete normal (non-crash) log files created by SMAPI.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.SCore.ReplaceLogPattern">
            <summary>A console log pattern to replace with a different message.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SCore.ReplaceLogPattern.Search">
            <summary>The regex pattern matching the portion of the message to replace.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SCore.ReplaceLogPattern.Replacement">
            <summary>The replacement string.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SCore.ReplaceLogPattern.LogLevel">
            <summary>The log level for the new message.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SCore.ReplaceLogPattern.#ctor(System.Text.RegularExpressions.Regex,System.String,StardewModdingAPI.LogLevel)">
            <summary>Construct an instance.</summary>
            <param name="search">The regex pattern matching the portion of the message to replace.</param>
            <param name="replacement">The replacement string.</param>
            <param name="logLevel">The log level for the new message.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Serialization.ColorConverter">
            <summary>Handles deserialization of <see cref="T:Microsoft.Xna.Framework.Color"/> for crossplatform compatibility.</summary>
            <remarks>
            - Linux/Mac format: { "B": 76, "G": 51, "R": 25, "A": 102 }
            - Windows format:   "26, 51, 76, 102"
            </remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.Serialization.ColorConverter.ReadObject(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>Read a JSON object.</summary>
            <param name="obj">The JSON object to read.</param>
            <param name="path">The path to the current JSON node.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Serialization.ColorConverter.ReadString(System.String,System.String)">
            <summary>Read a JSON string.</summary>
            <param name="str">The JSON string value.</param>
            <param name="path">The path to the current JSON node.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Serialization.PointConverter">
            <summary>Handles deserialization of <see cref="T:StardewModdingAPI.Framework.Serialization.PointConverter"/> for crossplatform compatibility.</summary>
            <remarks>
            - Linux/Mac format: { "X": 1, "Y": 2 }
            - Windows format:   "1, 2"
            </remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.Serialization.PointConverter.ReadObject(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>Read a JSON object.</summary>
            <param name="obj">The JSON object to read.</param>
            <param name="path">The path to the current JSON node.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Serialization.PointConverter.ReadString(System.String,System.String)">
            <summary>Read a JSON string.</summary>
            <param name="str">The JSON string value.</param>
            <param name="path">The path to the current JSON node.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Serialization.RectangleConverter">
            <summary>Handles deserialization of <see cref="T:Microsoft.Xna.Framework.Rectangle"/> for crossplatform compatibility.</summary>
            <remarks>
            - Linux/Mac format: { "X": 1, "Y": 2, "Width": 3, "Height": 4 }
            - Windows format:   "{X:1 Y:2 Width:3 Height:4}"
            </remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.Serialization.RectangleConverter.ReadObject(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>Read a JSON object.</summary>
            <param name="obj">The JSON object to read.</param>
            <param name="path">The path to the current JSON node.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Serialization.RectangleConverter.ReadString(System.String,System.String)">
            <summary>Read a JSON string.</summary>
            <param name="str">The JSON string value.</param>
            <param name="path">The path to the current JSON node.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.SGame">
            <summary>SMAPI's extension of the game's core <see cref="T:StardewValley.Game1"/>, used to inject events.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.Monitor">
            <summary>Encapsulates monitoring and logging for SMAPI.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.MonitorForGame">
            <summary>Encapsulates monitoring and logging on the game's behalf.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.Events">
            <summary>Manages SMAPI events for mods.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.ModRegistry">
            <summary>Tracks the installed mods.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.DeprecationManager">
            <summary>Manages deprecation warnings.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.DrawCrashTimer">
            <summary>The maximum number of consecutive attempts SMAPI should make to recover from a draw error.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.UpdateCrashTimer">
            <summary>The maximum number of consecutive attempts SMAPI should make to recover from an update error.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.AfterLoadTimer">
            <summary>The number of ticks until SMAPI should notify mods that the game has loaded.</summary>
            <remarks>Skipping a few frames ensures the game finishes initializing the world before mods try to change it.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.IsSaveContentRemoved">
            <summary>Whether custom content was removed from the save data to avoid a crash.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.IsBetweenSaveEvents">
            <summary>Whether the game is saving and SMAPI has already raised <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.Saving"/>.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.IsBetweenCreateEvents">
            <summary>Whether the game is creating the save file and SMAPI has already raised <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveCreating"/>.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.OnLoadingFirstAsset">
            <summary>A callback to invoke the first time *any* game content manager loads an asset.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.OnGameInitialized">
            <summary>A callback to invoke after the game finishes initializing.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.OnGameExiting">
            <summary>A callback to invoke when the game exits.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.Reflection">
            <summary>Simplifies access to private game code.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.Translator">
            <summary>Encapsulates access to SMAPI core translations.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.CancellationToken">
            <summary>Propagates notification that SMAPI should exit.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.Watchers">
            <summary>Monitors the entire game state for changes.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.WatcherSnapshot">
            <summary>A snapshot of the current <see cref="F:StardewModdingAPI.Framework.SGame.Watchers"/> state.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.IsInitialized">
            <summary>Whether post-game-startup initialization has been performed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.NextContentManagerIsMain">
            <summary>Whether the next content manager requested by the game will be for <see cref="F:StardewValley.Game1.content"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGame.ConstructorHack">
            <summary>Static state to use while <see cref="T:StardewValley.Game1"/> is initializing, which happens before the <see cref="T:StardewModdingAPI.Framework.SGame"/> constructor runs.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGame.TicksElapsed">
            <summary>The number of update ticks which have already executed. This is similar to <see cref="F:StardewValley.Game1.ticks"/>, but incremented more consistently for every tick.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGame.ContentCore">
            <summary>SMAPI's content manager.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGame.CommandManager">
            <summary>Manages console commands.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGame.Input">
            <summary>Manages input visible to the game.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGame.Multiplayer">
            <summary>The game's core multiplayer utility.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGame.CommandQueue">
            <summary>A list of queued commands to execute.</summary>
            <remarks>This property must be threadsafe, since it's accessed from a separate console input thread.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.ReloadAssetInterceptorsQueue">
            <summary>Asset interceptors added or removed since the last tick.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.#ctor(StardewModdingAPI.Framework.Monitor,StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.Reflection.Reflector,StardewModdingAPI.Framework.Translator,StardewModdingAPI.Framework.Events.EventManager,StardewModdingAPI.Toolkit.Serialization.JsonHelper,StardewModdingAPI.Framework.ModRegistry,StardewModdingAPI.Framework.DeprecationManager,System.Action,System.Action,System.Threading.CancellationTokenSource,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="monitor">Encapsulates monitoring and logging for SMAPI.</param>
            <param name="monitorForGame">Encapsulates monitoring and logging on the game's behalf.</param>
            <param name="reflection">Simplifies access to private game code.</param>
            <param name="translator">Encapsulates access to arbitrary translations.</param>
            <param name="eventManager">Manages SMAPI events for mods.</param>
            <param name="jsonHelper">Encapsulates SMAPI's JSON file parsing.</param>
            <param name="modRegistry">Tracks the installed mods.</param>
            <param name="deprecationManager">Manages deprecation warnings.</param>
            <param name="onGameInitialized">A callback to invoke after the game finishes initializing.</param>
            <param name="onGameExiting">A callback to invoke when the game exits.</param>
            <param name="cancellationToken">Propagates notification that SMAPI should exit.</param>
            <param name="logNetworkTraffic">Whether to log network traffic.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.InitializeAfterGameStarted">
            <summary>Initialize just before the game's first update tick.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.OnExiting(System.Object,System.EventArgs)">
            <summary>Perform cleanup logic when the game exits.</summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event args.</param>
            <remarks>This overrides the logic in <see cref="M:StardewValley.Game1.exitEvent(System.Object,System.EventArgs)"/> to let SMAPI clean up before exit.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.OnNewDayAfterFade">
            <summary>A callback invoked before <see cref="M:StardewValley.Game1.newDayAfterFade(System.Action)"/> runs.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.OnModMessageReceived(StardewModdingAPI.Framework.Networking.ModMessageModel)">
            <summary>A callback invoked when a mod message is received.</summary>
            <param name="message">The message to deliver to applicable mods.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.OnSaveContentRemoved">
            <summary>A callback invoked when custom content is removed from the save data to avoid a crash.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.OnLoadStageChanged(StardewModdingAPI.Enums.LoadStage)">
            <summary>A callback invoked when the game's low-level load stage changes.</summary>
            <param name="newStage">The new load stage.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.OnAssetInterceptorsChanged(StardewModdingAPI.Framework.IModMetadata,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>A callback invoked when a mod adds or removes an asset interceptor.</summary>
            <param name="mod">The mod which added or removed interceptors.</param>
            <param name="added">The added interceptors.</param>
            <param name="removed">The removed interceptors.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.CreateContentManager(System.IServiceProvider,System.String)">
            <summary>Constructor a content manager to read XNB files.</summary>
            <param name="serviceProvider">The service provider to use to locate services.</param>
            <param name="rootDirectory">The root directory to search for content.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>The method called when the game is updating its state. This happens roughly 60 times per second.</summary>
            <param name="gameTime">A snapshot of the game timing state.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame._draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>The method called to draw everything to the screen.</summary>
            <param name="gameTime">A snapshot of the game timing state.</param>
            <param name="target_screen">The render target, if any.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.DrawImpl(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>Replicate the game's draw logic with some changes for SMAPI.</summary>
            <param name="gameTime">A snapshot of the game timing state.</param>
            <param name="target_screen">The render target, if any.</param>
            <remarks>This implementation is identical to <see cref="M:StardewValley.Game1.Draw(Microsoft.Xna.Framework.GameTime)"/>, except for try..catch around menu draw code, private field references replaced by wrappers, and added events.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.ExitGameImmediately(System.String)">
            <summary>Immediately exit the game without saving. This should only be invoked when an irrecoverable fatal error happens that risks save corruption or game-breaking bugs.</summary>
            <param name="message">The fatal log message.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.SGameConstructorHack">
            <summary>The static state to use while <see cref="T:StardewValley.Game1"/> is initializing, which happens before the <see cref="T:StardewModdingAPI.Framework.SGame"/> constructor runs.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGameConstructorHack.Monitor">
            <summary>Encapsulates monitoring and logging.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGameConstructorHack.Reflection">
            <summary>Simplifies access to private game code.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGameConstructorHack.JsonHelper">
            <summary>Encapsulates SMAPI's JSON file parsing.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGameConstructorHack.OnLoadingFirstAsset">
            <summary>A callback to invoke the first time *any* game content manager loads an asset.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGameConstructorHack.#ctor(StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.Reflection.Reflector,StardewModdingAPI.Toolkit.Serialization.JsonHelper,System.Action)">
            <summary>Construct an instance.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="reflection">Simplifies access to private game code.</param>
            <param name="jsonHelper">Encapsulates SMAPI's JSON file parsing.</param>
            <param name="onLoadingFirstAsset">A callback to invoke the first time *any* game content manager loads an asset.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Singleton`1">
            <summary>Provides singleton instances of a given type.</summary>
            <typeparam name="T">The instance type.</typeparam>
        </member>
        <member name="P:StardewModdingAPI.Framework.Singleton`1.Instance">
            <summary>The singleton instance.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.SModHooks">
            <summary>Invokes callbacks for mod hooks provided by the game.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SModHooks.BeforeNewDayAfterFade">
            <summary>A callback to invoke before <see cref="M:StardewValley.Game1.newDayAfterFade(System.Action)"/> runs.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SModHooks.#ctor(System.Action)">
            <summary>Construct an instance.</summary>
            <param name="beforeNewDayAfterFade">A callback to invoke before <see cref="M:StardewValley.Game1.newDayAfterFade(System.Action)"/> runs.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SModHooks.OnGame1_NewDayAfterFade(System.Action)">
            <summary>A hook invoked when <see cref="M:StardewValley.Game1.newDayAfterFade(System.Action)"/> is called.</summary>
            <param name="action">The vanilla <see cref="M:StardewValley.Game1.newDayAfterFade(System.Action)"/> logic.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.SMultiplayer">
             <summary>SMAPI's implementation of the game's core multiplayer logic.</summary>
             <remarks>
             SMAPI syncs mod context to all players through the host as such:
               1. Farmhand sends ModContext + PlayerIntro.
               2. If host receives ModContext: it stores the context, replies with known contexts, and forwards it to other farmhands.
               3. If host receives PlayerIntro before ModContext: it stores a 'vanilla player' context, and forwards it to other farmhands.
               4. If farmhand receives ModContext: it stores it.
               5. If farmhand receives ServerIntro without a preceding ModContext: it stores a 'vanilla host' context.
               6. If farmhand receives PlayerIntro without a preceding ModContext AND it's not the host peer: it stores a 'vanilla player' context.
            
             Once a farmhand/server stored a context, messages can be sent to that player through the SMAPI APIs.
             </remarks>
        </member>
        <member name="F:StardewModdingAPI.Framework.SMultiplayer.Monitor">
            <summary>Encapsulates monitoring and logging.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SMultiplayer.ModRegistry">
            <summary>Tracks the installed mods.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SMultiplayer.JsonHelper">
            <summary>Encapsulates SMAPI's JSON file parsing.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SMultiplayer.Reflection">
            <summary>Simplifies access to private code.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SMultiplayer.EventManager">
            <summary>Manages SMAPI events.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SMultiplayer.OnModMessageReceived">
            <summary>A callback to invoke when a mod message is received.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SMultiplayer.LogNetworkTraffic">
            <summary>Whether to log network traffic.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SMultiplayer.Peers">
            <summary>The metadata for each connected peer.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SMultiplayer.HostPeer">
            <summary>The metadata for the host player, if the current player is a farmhand.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.#ctor(StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.Events.EventManager,StardewModdingAPI.Toolkit.Serialization.JsonHelper,StardewModdingAPI.Framework.ModRegistry,StardewModdingAPI.Framework.Reflection.Reflector,System.Action{StardewModdingAPI.Framework.Networking.ModMessageModel},System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="eventManager">Manages SMAPI events.</param>
            <param name="jsonHelper">Encapsulates SMAPI's JSON file parsing.</param>
            <param name="modRegistry">Tracks the installed mods.</param>
            <param name="reflection">Simplifies access to private code.</param>
            <param name="onModMessageReceived">A callback to invoke when a mod message is received.</param>
            <param name="logNetworkTraffic">Whether to log network traffic.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.CleanupOnMultiplayerExit">
            <summary>Perform cleanup needed when a multiplayer session ends.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.InitClient(StardewValley.Network.Client)">
            <summary>Initialize a client before the game connects to a remote server.</summary>
            <param name="client">The client to initialize.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.InitServer(StardewValley.Network.Server)">
            <summary>Initialize a server before the game connects to an incoming player.</summary>
            <param name="server">The server to initialize.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.OnClientSendingMessage(StardewValley.Network.OutgoingMessage,System.Action{StardewValley.Network.OutgoingMessage},System.Action)">
            <summary>A callback raised when sending a message as a farmhand.</summary>
            <param name="message">The message being sent.</param>
            <param name="sendMessage">Send an arbitrary message through the client.</param>
            <param name="resume">Resume sending the underlying message.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.OnServerProcessingMessage(StardewValley.Network.IncomingMessage,System.Action{StardewValley.Network.OutgoingMessage},System.Action)">
            <summary>Process an incoming network message as the host player.</summary>
            <param name="message">The message to process.</param>
            <param name="sendMessage">A method which sends the given message to the client.</param>
            <param name="resume">Process the message using the game's default logic.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.OnClientProcessingMessage(StardewValley.Network.IncomingMessage,System.Action{StardewValley.Network.OutgoingMessage},System.Action)">
            <summary>Process an incoming network message as a farmhand.</summary>
            <param name="message">The message to process.</param>
            <param name="sendMessage">Send an arbitrary message through the client.</param>
            <param name="resume">Resume processing the message using the game's default logic.</param>
            <returns>Returns whether the message was handled.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.removeDisconnectedFarmers">
            <summary>Remove players who are disconnecting.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.BroadcastModMessage``1(``0,System.String,System.String,System.String[],System.Int64[])">
            <summary>Broadcast a mod message to matching players.</summary>
            <param name="message">The data to send over the network.</param>
            <param name="messageType">A message type which receiving mods can use to decide whether it's the one they want to handle, like <c>SetPlayerLocation</c>. This doesn't need to be globally unique, since mods should check the originating mod ID.</param>
            <param name="fromModID">The unique ID of the mod sending the message.</param>
            <param name="toModIDs">The mod IDs which should receive the message on the destination computers, or <c>null</c> for all mods. Specifying mod IDs is recommended to improve performance, unless it's a general-purpose broadcast.</param>
            <param name="toPlayerIDs">The <see cref="P:StardewValley.Farmer.UniqueMultiplayerID" /> values for the players who should receive the message, or <c>null</c> for all players. If you don't need to broadcast to all players, specifying player IDs is recommended to reduce latency.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.AddPeer(StardewModdingAPI.Framework.Networking.MultiplayerPeer,System.Boolean,System.Boolean)">
            <summary>Save a received peer.</summary>
            <param name="peer">The peer to add.</param>
            <param name="canBeHost">Whether to track the peer as the host if applicable.</param>
            <param name="raiseEvent">Whether to raise the <see cref="F:StardewModdingAPI.Framework.Events.EventManager.PeerContextReceived"/> event.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.ReadContext(System.IO.BinaryReader)">
            <summary>Read the metadata context for a player.</summary>
            <param name="reader">The stream reader.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.ReceiveModMessage(StardewValley.Network.IncomingMessage)">
            <summary>Receive a mod message sent from another player's mods.</summary>
            <param name="message">The raw message to parse.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.GetKnownPlayerIDs">
            <summary>Get all connected player IDs, including the current player.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.GetContextSyncMessageFields">
            <summary>Get the fields to include in a context sync message sent to other players.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SMultiplayer.GetContextSyncMessageFields(StardewModdingAPI.IMultiplayerPeer)">
            <summary>Get the fields to include in a context sync message sent to other players.</summary>
            <param name="peer">The peer whose data to represent.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.SnapshotDiff`1">
            <summary>A snapshot of a tracked value.</summary>
            <typeparam name="T">The tracked value type.</typeparam>
        </member>
        <member name="P:StardewModdingAPI.Framework.SnapshotDiff`1.IsChanged">
            <summary>Whether the value changed since the last update.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SnapshotDiff`1.Old">
            <summary>The previous value.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SnapshotDiff`1.New">
            <summary>The current value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SnapshotDiff`1.Update(System.Boolean,`0,`0)">
            <summary>Update the snapshot.</summary>
            <param name="isChanged">Whether the value changed since the last update.</param>
            <param name="old">The previous value.</param>
            <param name="now">The current value.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SnapshotDiff`1.Update(StardewModdingAPI.Framework.StateTracking.IValueWatcher{`0})">
            <summary>Update the snapshot.</summary>
            <param name="watcher">The value watcher to snapshot.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.SnapshotItemListDiff">
            <summary>A snapshot of a tracked item list.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SnapshotItemListDiff.IsChanged">
            <summary>Whether the item list changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SnapshotItemListDiff.Removed">
            <summary>The removed values.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SnapshotItemListDiff.Added">
            <summary>The added values.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SnapshotItemListDiff.QuantityChanged">
            <summary>The items whose stack sizes changed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SnapshotItemListDiff.#ctor(StardewValley.Item[],StardewValley.Item[],StardewModdingAPI.Events.ItemStackSizeChange[])">
            <summary>Update the snapshot.</summary>
            <param name="added">The added values.</param>
            <param name="removed">The removed values.</param>
            <param name="sizesChanged">The items whose stack sizes changed.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SnapshotItemListDiff.TryGetChanges(System.Collections.Generic.ISet{StardewValley.Item},System.Collections.Generic.ISet{StardewValley.Item},System.Collections.Generic.IDictionary{StardewValley.Item,System.Int32},StardewModdingAPI.Framework.SnapshotItemListDiff@)">
            <summary>Get a snapshot diff if anything changed in the given data.</summary>
            <param name="added">The added item stacks.</param>
            <param name="removed">The removed item stacks.</param>
            <param name="stackSizes">The items with their previous stack sizes.</param>
            <param name="changes">The inventory changes, or <c>null</c> if nothing changed.</param>
            <returns>Returns whether anything changed.</returns>
        </member>
        <member name="T:StardewModdingAPI.Framework.SnapshotListDiff`1">
            <summary>A snapshot of a tracked list.</summary>
            <typeparam name="T">The tracked list value type.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.SnapshotListDiff`1.RemovedImpl">
            <summary>The removed values.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SnapshotListDiff`1.AddedImpl">
            <summary>The added values.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SnapshotListDiff`1.IsChanged">
            <summary>Whether the value changed since the last update.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SnapshotListDiff`1.Removed">
            <summary>The removed values.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SnapshotListDiff`1.Added">
            <summary>The added values.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SnapshotListDiff`1.Update(System.Boolean,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>Update the snapshot.</summary>
            <param name="isChanged">Whether the value changed since the last update.</param>
            <param name="removed">The removed values.</param>
            <param name="added">The added values.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SnapshotListDiff`1.Update(StardewModdingAPI.Framework.StateTracking.ICollectionWatcher{`0})">
            <summary>Update the snapshot.</summary>
            <param name="watcher">The value watcher to snapshot.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.ChestTracker">
            <summary>Tracks changes to a chest's items.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.ChestTracker.StackSizes">
            <summary>The item stack sizes as of the last update.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.ChestTracker.Added">
            <summary>Items added since the last update.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.ChestTracker.Removed">
            <summary>Items removed since the last update.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.ChestTracker.InventoryWatcher">
            <summary>The underlying inventory watcher.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.ChestTracker.Chest">
            <summary>The chest being tracked.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.ChestTracker.#ctor(StardewValley.Objects.Chest)">
            <summary>Construct an instance.</summary>
            <param name="chest">The chest being tracked.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.ChestTracker.Update">
            <summary>Update the current values if needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.ChestTracker.Reset">
            <summary>Reset all trackers so their current values are the baseline.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.ChestTracker.TryGetInventoryChanges(StardewModdingAPI.Framework.SnapshotItemListDiff@)">
            <summary>Get the inventory changes since the last update, if anything changed.</summary>
            <param name="changes">The inventory changes, or <c>null</c> if nothing changed.</param>
            <returns>Returns whether anything changed.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.ChestTracker.Dispose">
            <summary>Release watchers and resources.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.Comparers.EquatableComparer`1">
            <summary>Compares instances using <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/>.</summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.Comparers.EquatableComparer`1.Equals(`0,`0)">
            <summary>Determines whether the specified objects are equal.</summary>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.Comparers.EquatableComparer`1.GetHashCode(`0)">
            <summary>Get a hash code for the specified object.</summary>
            <param name="obj">The value.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.Comparers.GenericEqualsComparer`1">
            <summary>Compares values using their <see cref="M:System.Object.Equals(System.Object)"/> method. This should only be used when <see cref="T:StardewModdingAPI.Framework.StateTracking.Comparers.EquatableComparer`1"/> won't work, since this doesn't validate whether they're comparable.</summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.Comparers.GenericEqualsComparer`1.Equals(`0,`0)">
            <summary>Determines whether the specified objects are equal.</summary>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.Comparers.GenericEqualsComparer`1.GetHashCode(`0)">
            <summary>Get a hash code for the specified object.</summary>
            <param name="obj">The value.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.Comparers.ObjectReferenceComparer`1">
            <summary>A comparer which considers two references equal if they point to the same instance.</summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.Comparers.ObjectReferenceComparer`1.Equals(`0,`0)">
            <summary>Determines whether the specified objects are equal.</summary>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.Comparers.ObjectReferenceComparer`1.GetHashCode(`0)">
            <summary>Get a hash code for the specified object.</summary>
            <param name="obj">The value.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.FieldWatchers.BaseDisposableWatcher">
            <summary>The base implementation for a disposable watcher.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.BaseDisposableWatcher.IsDisposed">
            <summary>Whether the watcher has been disposed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.BaseDisposableWatcher.Dispose">
            <summary>Stop watching the field and release all references.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.BaseDisposableWatcher.AssertNotDisposed">
            <summary>Throw an exception if the watcher is disposed.</summary>
            <exception cref="T:System.ObjectDisposedException">The watcher is disposed.</exception>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableListWatcher`1">
            <summary>A watcher which detects changes to a collection of values using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instance.</summary>
            <typeparam name="TValue">The value type within the collection.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableListWatcher`1.CurrentValues">
            <summary>The collection to watch.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableListWatcher`1.LastValues">
            <summary>The values during the previous update.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableListWatcher`1.AddedImpl">
            <summary>The pairs added since the last reset.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableListWatcher`1.RemovedImpl">
            <summary>The pairs removed since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableListWatcher`1.IsChanged">
            <summary>Whether the value changed since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableListWatcher`1.Added">
            <summary>The values added since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableListWatcher`1.Removed">
            <summary>The values removed since the last reset.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableListWatcher`1.#ctor(System.Collections.Generic.ICollection{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Construct an instance.</summary>
            <param name="values">The collection to watch.</param>
            <param name="comparer">The equality comparer which indicates whether two values are the same.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableListWatcher`1.Update">
            <summary>Update the current value if needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableListWatcher`1.Reset">
            <summary>Set the current value as the baseline.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableWatcher`1">
            <summary>A watcher which detects changes to a value using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instance.</summary>
            <typeparam name="TValue">The comparable value type.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableWatcher`1.GetValue">
            <summary>Get the current value.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableWatcher`1.Comparer">
            <summary>The equality comparer.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableWatcher`1.PreviousValue">
            <summary>The field value at the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableWatcher`1.CurrentValue">
            <summary>The latest value.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableWatcher`1.IsChanged">
            <summary>Whether the value changed since the last reset.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableWatcher`1.#ctor(System.Func{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Construct an instance.</summary>
            <param name="getValue">Get the current value.</param>
            <param name="comparer">The equality comparer which indicates whether two values are the same.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableWatcher`1.Update">
            <summary>Update the current value if needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableWatcher`1.Reset">
            <summary>Set the current value as the baseline.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ComparableWatcher`1.Dispose">
            <summary>Release any references if needed when the field is no longer needed.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ImmutableCollectionWatcher`1">
            <summary>A collection watcher which never changes.</summary>
            <typeparam name="TValue">The value type within the collection.</typeparam>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ImmutableCollectionWatcher`1.Instance">
            <summary>A singleton collection watcher instance.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ImmutableCollectionWatcher`1.IsChanged">
            <summary>Whether the collection changed since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ImmutableCollectionWatcher`1.Added">
            <summary>The values added since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ImmutableCollectionWatcher`1.Removed">
            <summary>The values removed since the last reset.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ImmutableCollectionWatcher`1.Update">
            <summary>Update the current value if needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ImmutableCollectionWatcher`1.Reset">
            <summary>Set the current value as the baseline.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ImmutableCollectionWatcher`1.Dispose">
            <summary>Stop watching the field and release all references.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetCollectionWatcher`1">
            <summary>A watcher which detects changes to a Netcode collection.</summary>
            <typeparam name="TValue">The value type within the collection.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetCollectionWatcher`1.Field">
            <summary>The field being watched.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetCollectionWatcher`1.AddedImpl">
            <summary>The pairs added since the last reset.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetCollectionWatcher`1.RemovedImpl">
            <summary>The pairs removed since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetCollectionWatcher`1.IsChanged">
            <summary>Whether the collection changed since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetCollectionWatcher`1.Added">
            <summary>The values added since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetCollectionWatcher`1.Removed">
            <summary>The values removed since the last reset.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetCollectionWatcher`1.#ctor(Netcode.NetCollection{`0})">
            <summary>Construct an instance.</summary>
            <param name="field">The field to watch.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetCollectionWatcher`1.Update">
            <summary>Update the current value if needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetCollectionWatcher`1.Reset">
            <summary>Set the current value as the baseline.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetCollectionWatcher`1.Dispose">
            <summary>Stop watching the field and release all references.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetCollectionWatcher`1.OnValueAdded(`0)">
            <summary>A callback invoked when an entry is added to the collection.</summary>
            <param name="value">The added value.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetCollectionWatcher`1.OnValueRemoved(`0)">
            <summary>A callback invoked when an entry is removed from the collection.</summary>
            <param name="value">The added value.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetDictionaryWatcher`5">
            <summary>A watcher which detects changes to a net dictionary field.</summary>
            <typeparam name="TKey">The dictionary key type.</typeparam>
            <typeparam name="TValue">The dictionary value type.</typeparam>
            <typeparam name="TField">The net type equivalent to <typeparamref name="TValue"/>.</typeparam>
            <typeparam name="TSerialDict">The serializable dictionary type that can store the keys and values.</typeparam>
            <typeparam name="TSelf">The net field instance type.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetDictionaryWatcher`5.PairsAdded">
            <summary>The pairs added since the last reset.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetDictionaryWatcher`5.PairsRemoved">
            <summary>The pairs removed since the last reset.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetDictionaryWatcher`5.Field">
            <summary>The field being watched.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetDictionaryWatcher`5.IsChanged">
            <summary>Whether the collection changed since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetDictionaryWatcher`5.Added">
            <summary>The values added since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetDictionaryWatcher`5.Removed">
            <summary>The values removed since the last reset.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetDictionaryWatcher`5.#ctor(Netcode.NetDictionary{`0,`1,`2,`3,`4})">
            <summary>Construct an instance.</summary>
            <param name="field">The field to watch.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetDictionaryWatcher`5.Update">
            <summary>Update the current value if needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetDictionaryWatcher`5.Reset">
            <summary>Set the current value as the baseline.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetDictionaryWatcher`5.Dispose">
            <summary>Stop watching the field and release all references.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetDictionaryWatcher`5.OnValueAdded(`0,`1)">
            <summary>A callback invoked when an entry is added to the dictionary.</summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetDictionaryWatcher`5.OnValueRemoved(`0,`1)">
            <summary>A callback invoked when an entry is removed from the dictionary.</summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1">
            <summary>A watcher which detects changes to a net list field.</summary>
            <typeparam name="TValue">The list value type.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.Field">
            <summary>The field being watched.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.AddedImpl">
            <summary>The pairs added since the last reset.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.RemovedImpl">
            <summary>The pairs removed since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.IsChanged">
            <summary>Whether the collection changed since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.Added">
            <summary>The values added since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.Removed">
            <summary>The values removed since the last reset.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.#ctor(Netcode.NetList{`0,Netcode.NetRef{`0}})">
            <summary>Construct an instance.</summary>
            <param name="field">The field to watch.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.Reset">
            <summary>Set the current value as the baseline.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.Update">
            <summary>Update the current value if needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.Dispose">
            <summary>Stop watching the field and release all references.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.OnArrayReplaced(Netcode.NetList{`0,Netcode.NetRef{`0}},System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>A callback invoked when the value list is replaced.</summary>
            <param name="list">The net field whose values changed.</param>
            <param name="oldValues">The previous list of values.</param>
            <param name="newValues">The new list of values.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.OnElementChanged(Netcode.NetList{`0,Netcode.NetRef{`0}},System.Int32,`0,`0)">
            <summary>A callback invoked when an entry is replaced.</summary>
            <param name="list">The net field whose values changed.</param>
            <param name="index">The list index which changed.</param>
            <param name="oldValue">The previous value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.Add(`0)">
            <summary>Track an added item.</summary>
            <param name="value">The value that was added.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetListWatcher`1.Remove(`0)">
            <summary>Track a removed item.</summary>
            <param name="value">The value that was removed.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetValueWatcher`2">
            <summary>A watcher which detects changes to a net value field.</summary>
            <typeparam name="TValue">The value type wrapped by the net field.</typeparam>
            <typeparam name="TNetField">The net field type.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetValueWatcher`2.Field">
            <summary>The field being watched.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetValueWatcher`2.IsChanged">
            <summary>Whether the value changed since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetValueWatcher`2.PreviousValue">
            <summary>The field value at the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetValueWatcher`2.CurrentValue">
            <summary>The latest value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetValueWatcher`2.#ctor(Netcode.NetFieldBase{`0,`1})">
            <summary>Construct an instance.</summary>
            <param name="field">The field to watch.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetValueWatcher`2.Update">
            <summary>Update the current value if needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetValueWatcher`2.Reset">
            <summary>Set the current value as the baseline.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetValueWatcher`2.Dispose">
            <summary>Stop watching the field and release all references.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.NetValueWatcher`2.OnValueChanged(`1,`0,`0)">
            <summary>A callback invoked when the field's value changes.</summary>
            <param name="field">The field being watched.</param>
            <param name="oldValue">The old field value.</param>
            <param name="newValue">The new field value.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ObservableCollectionWatcher`1">
            <summary>A watcher which detects changes to an observable collection.</summary>
            <typeparam name="TValue">The value type within the collection.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ObservableCollectionWatcher`1.Field">
            <summary>The field being watched.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ObservableCollectionWatcher`1.AddedImpl">
            <summary>The pairs added since the last reset.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ObservableCollectionWatcher`1.RemovedImpl">
            <summary>The pairs removed since the last reset.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ObservableCollectionWatcher`1.PreviousValues">
            <summary>The previous values as of the last update.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ObservableCollectionWatcher`1.IsChanged">
            <summary>Whether the collection changed since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ObservableCollectionWatcher`1.Added">
            <summary>The values added since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ObservableCollectionWatcher`1.Removed">
            <summary>The values removed since the last reset.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ObservableCollectionWatcher`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
            <summary>Construct an instance.</summary>
            <param name="field">The field to watch.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ObservableCollectionWatcher`1.Update">
            <summary>Update the current value if needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ObservableCollectionWatcher`1.Reset">
            <summary>Set the current value as the baseline.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ObservableCollectionWatcher`1.Dispose">
            <summary>Stop watching the field and release all references.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.ObservableCollectionWatcher`1.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>A callback invoked when an entry is added or removed from the collection.</summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.FieldWatchers.WatcherFactory">
            <summary>Provides convenience wrappers for creating watchers.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.WatcherFactory.ForGenericEquality``1(System.Func{``0})">
            <summary>Get a watcher which compares values using their <see cref="M:System.Object.Equals(System.Object)"/> method. This method should only be used when <see cref="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.WatcherFactory.ForEquatable``1(System.Func{``0})"/> won't work, since this doesn't validate whether they're comparable.</summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="getValue">Get the current value.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.WatcherFactory.ForEquatable``1(System.Func{``0})">
            <summary>Get a watcher for an <see cref="T:System.IEquatable`1"/> value.</summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="getValue">Get the current value.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.WatcherFactory.ForReference``1(System.Func{``0})">
            <summary>Get a watcher which detects when an object reference changes.</summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="getValue">Get the current value.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.WatcherFactory.ForNetValue``2(Netcode.NetFieldBase{``0,``1})">
            <summary>Get a watcher for a net collection.</summary>
            <typeparam name="T">The value type.</typeparam>
            <typeparam name="TSelf">The net field instance type.</typeparam>
            <param name="field">The net collection.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.WatcherFactory.ForReferenceList``1(System.Collections.Generic.ICollection{``0})">
            <summary>Get a watcher which detects when an object reference in a collection changes.</summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="collection">The observable collection.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.WatcherFactory.ForObservableCollection``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>Get a watcher for an observable collection.</summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="collection">The observable collection.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.WatcherFactory.ForImmutableCollection``1">
            <summary>Get a watcher for a collection that never changes.</summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.WatcherFactory.ForNetCollection``1(Netcode.NetCollection{``0})">
            <summary>Get a watcher for a net collection.</summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="collection">The net collection.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.WatcherFactory.ForNetList``1(Netcode.NetList{``0,Netcode.NetRef{``0}})">
            <summary>Get a watcher for a net list.</summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="collection">The net list.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.FieldWatchers.WatcherFactory.ForNetDictionary``5(Netcode.NetDictionary{``0,``1,``2,``3,``4})">
            <summary>Get a watcher for a net dictionary.</summary>
            <typeparam name="TKey">The dictionary key type.</typeparam>
            <typeparam name="TValue">The dictionary value type.</typeparam>
            <typeparam name="TField">The net type equivalent to <typeparamref name="TValue"/>.</typeparam>
            <typeparam name="TSerialDict">The serializable dictionary type that can store the keys and values.</typeparam>
            <typeparam name="TSelf">The net field instance type.</typeparam>
            <param name="field">The net field.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.ICollectionWatcher`1">
            <summary>A watcher which tracks changes to a collection.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.ICollectionWatcher`1.Added">
            <summary>The values added since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.ICollectionWatcher`1.Removed">
            <summary>The values removed since the last reset.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.IDictionaryWatcher`2">
            <summary>A watcher which tracks changes to a dictionary.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.IValueWatcher`1">
            <summary>A watcher which tracks changes to a value.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.IValueWatcher`1.PreviousValue">
            <summary>The field value at the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.IValueWatcher`1.CurrentValue">
            <summary>The latest value.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.IWatcher">
            <summary>A watcher which detects changes to something.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.IWatcher.IsChanged">
            <summary>Whether the value changed since the last reset.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.IWatcher.Update">
            <summary>Update the current value if needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.IWatcher.Reset">
            <summary>Set the current value as the baseline.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.LocationTracker">
            <summary>Tracks changes to a location's data.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.LocationTracker.Watchers">
            <summary>The underlying watchers.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.LocationTracker.IsChanged">
            <summary>Whether the value changed since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.LocationTracker.Location">
            <summary>The tracked location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.LocationTracker.BuildingsWatcher">
            <summary>Tracks added or removed buildings.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.LocationTracker.DebrisWatcher">
            <summary>Tracks added or removed debris.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.LocationTracker.LargeTerrainFeaturesWatcher">
            <summary>Tracks added or removed large terrain features.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.LocationTracker.NpcsWatcher">
            <summary>Tracks added or removed NPCs.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.LocationTracker.ObjectsWatcher">
            <summary>Tracks added or removed objects.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.LocationTracker.TerrainFeaturesWatcher">
            <summary>Tracks added or removed terrain features.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.LocationTracker.ChestWatchers">
            <summary>Tracks items added or removed to chests.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.LocationTracker.#ctor(StardewValley.GameLocation)">
            <summary>Construct an instance.</summary>
            <param name="location">The location to track.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.LocationTracker.Update">
            <summary>Update the current value if needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.LocationTracker.Reset">
            <summary>Set the current value as the baseline.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.LocationTracker.Dispose">
            <summary>Stop watching the player fields and release all references.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.LocationTracker.UpdateChestWatcherList(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Xna.Framework.Vector2,StardewValley.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.Xna.Framework.Vector2,StardewValley.Object}})">
            <summary>Update the watcher list for added or removed chests.</summary>
            <param name="added">The objects added to the location.</param>
            <param name="removed">The objects removed from the location.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.PlayerTracker">
            <summary>Tracks changes to a player's data.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.PlayerTracker.PreviousInventory">
            <summary>The player's inventory as of the last reset.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.PlayerTracker.CurrentInventory">
            <summary>The player's inventory change as of the last update.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.PlayerTracker.LastValidLocation">
            <summary>The player's last valid location.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.PlayerTracker.Watchers">
            <summary>The underlying watchers.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.PlayerTracker.Player">
            <summary>The player being tracked.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.PlayerTracker.LocationWatcher">
            <summary>The player's current location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.PlayerTracker.SkillWatchers">
            <summary>Tracks changes to the player's skill levels.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.PlayerTracker.#ctor(StardewValley.Farmer)">
            <summary>Construct an instance.</summary>
            <param name="player">The player to track.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.PlayerTracker.Update">
            <summary>Update the current values if needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.PlayerTracker.Reset">
            <summary>Reset all trackers so their current values are the baseline.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.PlayerTracker.GetCurrentLocation">
            <summary>Get the player's current location, ignoring temporary null values.</summary>
            <remarks>The game will set <see cref="P:StardewValley.Character.currentLocation"/> to null in some cases, e.g. when they're a secondary player in multiplayer and transition to a location that hasn't been synced yet. While that's happening, this returns the player's last valid location instead.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.PlayerTracker.TryGetInventoryChanges(StardewModdingAPI.Framework.SnapshotItemListDiff@)">
            <summary>Get the inventory changes since the last update, if anything changed.</summary>
            <param name="changes">The inventory changes, or <c>null</c> if nothing changed.</param>
            <returns>Returns whether anything changed.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.PlayerTracker.Dispose">
            <summary>Release watchers and resources.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.PlayerTracker.GetInventory">
            <summary>Get the player's current inventory.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.Snapshots.LocationSnapshot">
            <summary>A frozen snapshot of a tracked game location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.LocationSnapshot.Location">
            <summary>The tracked location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.LocationSnapshot.Buildings">
            <summary>Tracks added or removed buildings.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.LocationSnapshot.Debris">
            <summary>Tracks added or removed debris.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.LocationSnapshot.LargeTerrainFeatures">
            <summary>Tracks added or removed large terrain features.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.LocationSnapshot.Npcs">
            <summary>Tracks added or removed NPCs.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.LocationSnapshot.Objects">
            <summary>Tracks added or removed objects.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.LocationSnapshot.TerrainFeatures">
            <summary>Tracks added or removed terrain features.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.LocationSnapshot.ChestItems">
            <summary>Tracks changed chest inventories.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.Snapshots.LocationSnapshot.#ctor(StardewValley.GameLocation)">
            <summary>Construct an instance.</summary>
            <param name="location">The tracked location.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.Snapshots.LocationSnapshot.Update(StardewModdingAPI.Framework.StateTracking.LocationTracker)">
            <summary>Update the tracked values.</summary>
            <param name="watcher">The watcher to snapshot.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.Snapshots.PlayerSnapshot">
            <summary>A frozen snapshot of a tracked player.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.Snapshots.PlayerSnapshot.EmptyItemListDiff">
            <summary>An empty item list diff.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.PlayerSnapshot.Player">
            <summary>The player being tracked.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.PlayerSnapshot.Location">
            <summary>The player's current location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.PlayerSnapshot.Skills">
            <summary>Tracks changes to the player's skill levels.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.PlayerSnapshot.Inventory">
            <summary>Get a list of inventory changes.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.Snapshots.PlayerSnapshot.#ctor(StardewValley.Farmer)">
            <summary>Construct an instance.</summary>
            <param name="player">The player being tracked.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.Snapshots.PlayerSnapshot.Update(StardewModdingAPI.Framework.StateTracking.PlayerTracker)">
            <summary>Update the tracked values.</summary>
            <param name="watcher">The player watcher to snapshot.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.Snapshots.WatcherSnapshot">
            <summary>A frozen snapshot of the game state watchers.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.WatcherSnapshot.WindowSize">
            <summary>Tracks changes to the window size.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.WatcherSnapshot.CurrentPlayer">
            <summary>Tracks changes to the current player.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.WatcherSnapshot.Time">
            <summary>Tracks changes to the time of day (in 24-hour military format).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.WatcherSnapshot.SaveID">
            <summary>Tracks changes to the save ID.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.WatcherSnapshot.Locations">
            <summary>Tracks changes to the game's locations.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.WatcherSnapshot.ActiveMenu">
            <summary>Tracks changes to <see cref="P:StardewValley.Game1.activeClickableMenu"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.WatcherSnapshot.Cursor">
            <summary>Tracks changes to the cursor position.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.WatcherSnapshot.MouseWheelScroll">
            <summary>Tracks changes to the mouse wheel scroll.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.WatcherSnapshot.Locale">
            <summary>Tracks changes to the content locale.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.Snapshots.WatcherSnapshot.Update(StardewModdingAPI.Framework.WatcherCore)">
            <summary>Update the tracked values.</summary>
            <param name="watchers">The watchers to snapshot.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.Snapshots.WorldLocationsSnapshot">
            <summary>A frozen snapshot of the tracked game locations.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.Snapshots.WorldLocationsSnapshot.LocationsDict">
            <summary>A map of tracked locations.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.WorldLocationsSnapshot.LocationList">
            <summary>Tracks changes to the location list.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.Snapshots.WorldLocationsSnapshot.Locations">
            <summary>The tracked locations.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.Snapshots.WorldLocationsSnapshot.Update(StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker)">
            <summary>Update the tracked values.</summary>
            <param name="watcher">The watcher to snapshot.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker">
            <summary>Detects changes to the game's locations.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.LocationListWatcher">
            <summary>Tracks changes to the location list.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.MineLocationListWatcher">
            <summary>Tracks changes to the list of active mine locations.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.LocationDict">
            <summary>A lookup of the tracked locations.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.BuildingIndoors">
            <summary>A lookup of registered buildings and their indoor location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.IsLocationListChanged">
            <summary>Whether locations were added or removed since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.IsChanged">
            <summary>Whether any tracked location data changed since the last reset.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Locations">
            <summary>The tracked locations.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Added">
            <summary>The locations removed since the last update.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Removed">
            <summary>The locations added since the last update.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.#ctor(System.Collections.ObjectModel.ObservableCollection{StardewValley.GameLocation},System.Collections.Generic.IList{StardewValley.Locations.MineShaft})">
            <summary>Construct an instance.</summary>
            <param name="locations">The game's list of locations.</param>
            <param name="activeMineLocations">The game's list of active mine locations.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Update">
            <summary>Update the current value if needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.ResetLocationList">
            <summary>Set the current location list as the baseline.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Reset">
            <summary>Set the current value as the baseline.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.HasLocationTracker(StardewValley.GameLocation)">
            <summary>Get whether the given location is tracked.</summary>
            <param name="location">The location to check.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Dispose">
            <summary>Stop watching the player fields and release all references.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Add(System.Collections.Generic.IEnumerable{StardewValley.Buildings.Building})">
            <summary>Add the given buildings.</summary>
            <param name="buildings">The buildings to add.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Add(System.Collections.Generic.IEnumerable{StardewValley.GameLocation})">
            <summary>Add the given locations.</summary>
            <param name="locations">The locations to add.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Remove(System.Collections.Generic.IEnumerable{StardewValley.Buildings.Building})">
            <summary>Remove the given buildings.</summary>
            <param name="buildings">The buildings to remove.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Remove(System.Collections.Generic.IEnumerable{StardewValley.GameLocation})">
            <summary>Remove the given locations.</summary>
            <param name="locations">The locations to remove.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Add(StardewValley.Buildings.Building)">
            <summary>Add the given building.</summary>
            <param name="building">The building to add.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Add(StardewValley.GameLocation)">
            <summary>Add the given location.</summary>
            <param name="location">The location to add.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Remove(StardewValley.Buildings.Building)">
            <summary>Remove the given building.</summary>
            <param name="building">The building to remove.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.Remove(StardewValley.GameLocation)">
            <summary>Remove the given location.</summary>
            <param name="location">The location to remove.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.StateTracking.WorldLocationsTracker.GetWatchers">
            <summary>The underlying watchers.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Translator">
            <summary>Encapsulates access to arbitrary translations. Translations are fetched with locale fallback, so missing translations are filled in from broader locales (like <c>pt-BR.json</c> &lt; <c>pt.json</c> &lt; <c>default.json</c>).</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Translator.All">
            <summary>The translations for each locale.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Translator.ForLocale">
            <summary>The translations for the current locale, with locale fallback taken into account.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Translator.Locale">
            <summary>The current locale.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Translator.LocaleEnum">
            <summary>The game's current language code.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Translator.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Translator.SetLocale(System.String,StardewValley.LocalizedContentManager.LanguageCode)">
            <summary>Set the current locale and precache translations.</summary>
            <param name="locale">The current locale.</param>
            <param name="localeEnum">The game's current language code.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Translator.GetTranslations">
            <summary>Get all translations for the current locale.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Translator.Get(System.String)">
            <summary>Get a translation for the current locale.</summary>
            <param name="key">The translation key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Translator.Get(System.String,System.Object)">
            <summary>Get a translation for the current locale.</summary>
            <param name="key">The translation key.</param>
            <param name="tokens">An object containing token key/value pairs. This can be an anonymous object (like <c>new { value = 42, name = "Cranberries" }</c>), a dictionary, or a class instance.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Translator.SetTranslations(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>Set the translations to use.</summary>
            <param name="translations">The translations to use.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Translator.GetRelevantLocales(System.String)">
            <summary>Get the locales which can provide translations for the given locale, in precedence order.</summary>
            <param name="locale">The locale for which to find valid locales.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Utilities.ContextHash`1">
            <summary>A <see cref="T:System.Collections.Generic.HashSet`1"/> wrapper meant for tracking recursive contexts.</summary>
            <typeparam name="T">The key type.</typeparam>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.ContextHash`1.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.ContextHash`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Construct an instance.</summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values in the set, or <c>null</c> to use the default comparer for the set type.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.ContextHash`1.Track(`0,System.Action)">
            <summary>Add a key while an action is in progress, and remove it when it completes.</summary>
            <param name="key">The key to add.</param>
            <param name="action">The action to perform.</param>
            <exception cref="T:System.InvalidOperationException">The specified key is already added.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.ContextHash`1.Track``1(`0,System.Func{``0})">
            <summary>Add a key while an action is in progress, and remove it when it completes.</summary>
            <typeparam name="TResult">The value type returned by the method.</typeparam>
            <param name="key">The key to add.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Utilities.Countdown">
            <summary>Counts down from a baseline value.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Utilities.Countdown.Initial">
            <summary>The initial value from which to count down.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Utilities.Countdown.Current">
            <summary>The current value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.Countdown.#ctor(System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="initial">The initial value from which to count down.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.Countdown.Decrement">
            <summary>Reduce the current value by one.</summary>
            <returns>Returns whether the value was decremented (i.e. wasn't already zero).</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.Countdown.Reset">
            <summary>Restart the countdown.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.WatcherCore">
            <summary>Monitors the entire game state for changes, virally spreading watchers into any new entities that get created.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.WatcherCore.Watchers">
            <summary>The underlying watchers for convenience. These are accessible individually as separate properties.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.WatcherCore.WindowSizeWatcher">
            <summary>Tracks changes to the window size.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.WatcherCore.CurrentPlayerTracker">
            <summary>Tracks changes to the current player.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.WatcherCore.TimeWatcher">
            <summary>Tracks changes to the time of day (in 24-hour military format).</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.WatcherCore.SaveIdWatcher">
            <summary>Tracks changes to the save ID.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.WatcherCore.LocationsWatcher">
            <summary>Tracks changes to the game's locations.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.WatcherCore.ActiveMenuWatcher">
            <summary>Tracks changes to <see cref="P:StardewValley.Game1.activeClickableMenu"/>.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.WatcherCore.CursorWatcher">
            <summary>Tracks changes to the cursor position.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.WatcherCore.MouseWheelScrollWatcher">
            <summary>Tracks changes to the mouse wheel scroll.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.WatcherCore.LocaleWatcher">
            <summary>Tracks changes to the content locale.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.WatcherCore.#ctor(StardewModdingAPI.Framework.Input.SInputState)">
            <summary>Construct an instance.</summary>
            <param name="inputState">Manages input visible to the game.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.WatcherCore.Update">
            <summary>Update the watchers and adjust for added or removed entities.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.WatcherCore.Reset">
            <summary>Reset the current values as the baseline.</summary>
        </member>
        <member name="T:StardewModdingAPI.GamePlatform">
            <summary>The game's platform version.</summary>
        </member>
        <member name="F:StardewModdingAPI.GamePlatform.Android">
            <summary>The Android version of the game.</summary>
        </member>
        <member name="F:StardewModdingAPI.GamePlatform.Linux">
            <summary>The Linux version of the game.</summary>
        </member>
        <member name="F:StardewModdingAPI.GamePlatform.Mac">
            <summary>The Mac version of the game.</summary>
        </member>
        <member name="F:StardewModdingAPI.GamePlatform.Windows">
            <summary>The Windows version of the game.</summary>
        </member>
        <member name="T:StardewModdingAPI.IAssetData`1">
            <summary>Generic metadata and methods for a content asset being loaded.</summary>
            <typeparam name="TValue">The expected data type.</typeparam>
        </member>
        <member name="P:StardewModdingAPI.IAssetData`1.Data">
            <summary>The content data being read.</summary>
        </member>
        <member name="M:StardewModdingAPI.IAssetData`1.ReplaceWith(`0)">
            <summary>Replace the entire content value with the given value. This is generally not recommended, since it may break compatibility with other mods or different versions of the game.</summary>
            <param name="value">The new content value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.InvalidCastException">The <paramref name="value"/>'s type is not compatible with the loaded asset's type.</exception>
        </member>
        <member name="T:StardewModdingAPI.IAssetData">
            <summary>Generic metadata and methods for a content asset being loaded.</summary>
        </member>
        <member name="M:StardewModdingAPI.IAssetData.AsDictionary``2">
            <summary>Get a helper to manipulate the data as a dictionary.</summary>
            <typeparam name="TKey">The expected dictionary key.</typeparam>
            <typeparam name="TValue">The expected dictionary value.</typeparam>
            <exception cref="T:System.InvalidOperationException">The content being read isn't a dictionary.</exception>
        </member>
        <member name="M:StardewModdingAPI.IAssetData.AsImage">
            <summary>Get a helper to manipulate the data as an image.</summary>
            <exception cref="T:System.InvalidOperationException">The content being read isn't an image.</exception>
        </member>
        <member name="M:StardewModdingAPI.IAssetData.GetData``1">
            <summary>Get the data as a given type.</summary>
            <typeparam name="TData">The expected data type.</typeparam>
            <exception cref="T:System.InvalidCastException">The data can't be converted to <typeparamref name="TData"/>.</exception>
        </member>
        <member name="T:StardewModdingAPI.IAssetDataForDictionary`2">
            <summary>Encapsulates access and changes to dictionary content being read from a data file.</summary>
        </member>
        <member name="T:StardewModdingAPI.IAssetDataForImage">
            <summary>Encapsulates access and changes to image content being read from a data file.</summary>
        </member>
        <member name="M:StardewModdingAPI.IAssetDataForImage.PatchImage(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Rectangle},StardewModdingAPI.PatchMode)">
            <summary>Overwrite part of the image.</summary>
            <param name="source">The image to patch into the content.</param>
            <param name="sourceArea">The part of the <paramref name="source"/> to copy (or <c>null</c> to take the whole texture). This must be within the bounds of the <paramref name="source"/> texture.</param>
            <param name="targetArea">The part of the content to patch (or <c>null</c> to patch the whole texture). The original content within this area will be erased. This must be within the bounds of the existing spritesheet.</param>
            <param name="patchMode">Indicates how an image should be patched.</param>
            <exception cref="T:System.ArgumentNullException">One of the arguments is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetArea"/> is outside the bounds of the spritesheet.</exception>
            <exception cref="T:System.InvalidOperationException">The content being read isn't an image.</exception>
        </member>
        <member name="T:StardewModdingAPI.IAssetEditor">
            <summary>Edits matching content assets.</summary>
        </member>
        <member name="M:StardewModdingAPI.IAssetEditor.CanEdit``1(StardewModdingAPI.IAssetInfo)">
            <summary>Get whether this instance can edit the given asset.</summary>
            <param name="asset">Basic metadata about the asset being loaded.</param>
        </member>
        <member name="M:StardewModdingAPI.IAssetEditor.Edit``1(StardewModdingAPI.IAssetData)">
            <summary>Edit a matched asset.</summary>
            <param name="asset">A helper which encapsulates metadata about an asset and enables changes to it.</param>
        </member>
        <member name="T:StardewModdingAPI.IAssetInfo">
            <summary>Basic metadata for a content asset.</summary>
        </member>
        <member name="P:StardewModdingAPI.IAssetInfo.Locale">
            <summary>The content's locale code, if the content is localized.</summary>
        </member>
        <member name="P:StardewModdingAPI.IAssetInfo.AssetName">
            <summary>The normalized asset name being read. The format may change between platforms; see <see cref="M:StardewModdingAPI.IAssetInfo.AssetNameEquals(System.String)"/> to compare with a known path.</summary>
        </member>
        <member name="P:StardewModdingAPI.IAssetInfo.DataType">
            <summary>The content data type.</summary>
        </member>
        <member name="M:StardewModdingAPI.IAssetInfo.AssetNameEquals(System.String)">
            <summary>Get whether the asset name being loaded matches a given name after normalization.</summary>
            <param name="path">The expected asset path, relative to the game's content folder and without the .xnb extension or locale suffix (like 'Data\ObjectInformation').</param>
        </member>
        <member name="T:StardewModdingAPI.IAssetLoader">
            <summary>Provides the initial version for matching assets loaded by the game. SMAPI will raise an error if two mods try to load the same asset; in most cases you should use <see cref="T:StardewModdingAPI.IAssetEditor"/> instead.</summary>
        </member>
        <member name="M:StardewModdingAPI.IAssetLoader.CanLoad``1(StardewModdingAPI.IAssetInfo)">
            <summary>Get whether this instance can load the initial version of the given asset.</summary>
            <param name="asset">Basic metadata about the asset being loaded.</param>
        </member>
        <member name="M:StardewModdingAPI.IAssetLoader.Load``1(StardewModdingAPI.IAssetInfo)">
            <summary>Load a matched asset.</summary>
            <param name="asset">Basic metadata about the asset being loaded.</param>
        </member>
        <member name="T:StardewModdingAPI.ICommandHelper">
            <summary>Provides an API for managing console commands.</summary>
        </member>
        <member name="M:StardewModdingAPI.ICommandHelper.Add(System.String,System.String,System.Action{System.String,System.String[]})">
            <summary>Add a console command.</summary>
            <param name="name">The command name, which the user must type to trigger it.</param>
            <param name="documentation">The human-readable documentation shown when the player runs the built-in 'help' command.</param>
            <param name="callback">The method to invoke when the command is triggered. This method is passed the command name and arguments submitted by the user.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> or <paramref name="callback"/> is null or empty.</exception>
            <exception cref="T:System.FormatException">The <paramref name="name"/> is not a valid format.</exception>
            <exception cref="T:System.ArgumentException">There's already a command with that name.</exception>
        </member>
        <member name="M:StardewModdingAPI.ICommandHelper.Trigger(System.String,System.String[])">
            <summary>Trigger a command.</summary>
            <param name="name">The command name.</param>
            <param name="arguments">The command arguments.</param>
            <returns>Returns whether a matching command was triggered.</returns>
        </member>
        <member name="T:StardewModdingAPI.IContentHelper">
            <summary>Provides an API for loading content assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.IContentHelper.AssetLoaders">
            <summary>Interceptors which provide the initial versions of matching content assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.IContentHelper.AssetEditors">
            <summary>Interceptors which edit matching content assets after they're loaded.</summary>
        </member>
        <member name="P:StardewModdingAPI.IContentHelper.CurrentLocale">
            <summary>The game's current locale code (like <c>pt-BR</c>).</summary>
        </member>
        <member name="P:StardewModdingAPI.IContentHelper.CurrentLocaleConstant">
            <summary>The game's current locale as an enum value.</summary>
        </member>
        <member name="M:StardewModdingAPI.IContentHelper.Load``1(System.String,StardewModdingAPI.ContentSource)">
            <summary>Load content from the game folder or mod folder (if not already cached), and return it. When loading a <c>.png</c> file, this must be called outside the game's draw loop.</summary>
            <typeparam name="T">The expected data type. The main supported types are <see cref="T:xTile.Map"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>, and dictionaries; other types may be supported by the game's content pipeline.</typeparam>
            <param name="key">The asset key to fetch (if the <paramref name="source"/> is <see cref="F:StardewModdingAPI.ContentSource.GameContent"/>), or the local path to a content file relative to the mod folder.</param>
            <param name="source">Where to search for a matching content asset.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
            <exception cref="T:Microsoft.Xna.Framework.Content.ContentLoadException">The content asset couldn't be loaded (e.g. because it doesn't exist).</exception>
        </member>
        <member name="M:StardewModdingAPI.IContentHelper.NormalizeAssetName(System.String)">
            <summary>Normalize an asset name so it's consistent with those generated by the game. This is mainly useful for string comparisons like <see cref="M:System.String.StartsWith(System.String)"/> on generated asset names, and isn't necessary when passing asset names into other content helper methods.</summary>
            <param name="assetName">The asset key.</param>
        </member>
        <member name="M:StardewModdingAPI.IContentHelper.GetActualAssetKey(System.String,StardewModdingAPI.ContentSource)">
            <summary>Get the underlying key in the game's content cache for an asset. This can be used to load custom map tilesheets, but should be avoided when you can use the content API instead. This does not validate whether the asset exists.</summary>
            <param name="key">The asset key to fetch (if the <paramref name="source"/> is <see cref="F:StardewModdingAPI.ContentSource.GameContent"/>), or the local path to a content file relative to the mod folder.</param>
            <param name="source">Where to search for a matching content asset.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
        </member>
        <member name="M:StardewModdingAPI.IContentHelper.InvalidateCache(System.String)">
            <summary>Remove an asset from the content cache so it's reloaded on the next request. This will reload core game assets if needed, but references to the former asset will still show the previous content.</summary>
            <param name="key">The asset key to invalidate in the content folder.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
            <returns>Returns whether the given asset key was cached.</returns>
        </member>
        <member name="M:StardewModdingAPI.IContentHelper.InvalidateCache``1">
            <summary>Remove all assets of the given type from the cache so they're reloaded on the next request. <b>This can be a very expensive operation and should only be used in very specific cases.</b> This will reload core game assets if needed, but references to the former assets will still show the previous content.</summary>
            <typeparam name="T">The asset type to remove from the cache.</typeparam>
            <returns>Returns whether any assets were invalidated.</returns>
        </member>
        <member name="M:StardewModdingAPI.IContentHelper.InvalidateCache(System.Func{StardewModdingAPI.IAssetInfo,System.Boolean})">
            <summary>Remove matching assets from the content cache so they're reloaded on the next request. This will reload core game assets if needed, but references to the former asset will still show the previous content.</summary>
            <param name="predicate">A predicate matching the assets to invalidate.</param>
            <returns>Returns whether any cache entries were invalidated.</returns>
        </member>
        <member name="T:StardewModdingAPI.IContentPack">
            <summary>An API that provides access to a content pack.</summary>
        </member>
        <member name="P:StardewModdingAPI.IContentPack.DirectoryPath">
            <summary>The full path to the content pack's folder.</summary>
        </member>
        <member name="P:StardewModdingAPI.IContentPack.Manifest">
            <summary>The content pack's manifest.</summary>
        </member>
        <member name="P:StardewModdingAPI.IContentPack.Translation">
            <summary>Provides translations stored in the content pack's <c>i18n</c> folder. See <see cref="P:StardewModdingAPI.IModHelper.Translation"/> for more info.</summary>
        </member>
        <member name="M:StardewModdingAPI.IContentPack.HasFile(System.String)">
            <summary>Get whether a given file exists in the content pack.</summary>
            <param name="path">The file path to check.</param>
        </member>
        <member name="M:StardewModdingAPI.IContentPack.ReadJsonFile``1(System.String)">
            <summary>Read a JSON file from the content pack folder.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="path">The file path relative to the content pack directory.</param>
            <returns>Returns the deserialized model, or <c>null</c> if the file doesn't exist or is empty.</returns>
            <exception cref="T:System.InvalidOperationException">The <paramref name="path"/> is not relative or contains directory climbing (../).</exception>
        </member>
        <member name="M:StardewModdingAPI.IContentPack.WriteJsonFile``1(System.String,``0)">
            <summary>Save data to a JSON file in the content pack's folder.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="path">The file path relative to the mod folder.</param>
            <param name="data">The arbitrary data to save.</param>
            <exception cref="T:System.InvalidOperationException">The <paramref name="path"/> is not relative or contains directory climbing (../).</exception>
        </member>
        <member name="M:StardewModdingAPI.IContentPack.LoadAsset``1(System.String)">
            <summary>Load content from the content pack folder (if not already cached), and return it. When loading a <c>.png</c> file, this must be called outside the game's draw loop.</summary>
            <typeparam name="T">The expected data type. The main supported types are <see cref="T:xTile.Map"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>, and dictionaries; other types may be supported by the game's content pipeline.</typeparam>
            <param name="key">The local path to a content file relative to the content pack folder.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
            <exception cref="T:Microsoft.Xna.Framework.Content.ContentLoadException">The content asset couldn't be loaded (e.g. because it doesn't exist).</exception>
        </member>
        <member name="M:StardewModdingAPI.IContentPack.GetActualAssetKey(System.String)">
            <summary>Get the underlying key in the game's content cache for an asset. This can be used to load custom map tilesheets, but should be avoided when you can use the content API instead. This does not validate whether the asset exists.</summary>
            <param name="key">The the local path to a content file relative to the content pack folder.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
        </member>
        <member name="T:StardewModdingAPI.IContentPackHelper">
            <summary>Provides an API for managing content packs.</summary>
        </member>
        <member name="M:StardewModdingAPI.IContentPackHelper.GetOwned">
            <summary>Get all content packs loaded for this mod.</summary>
        </member>
        <member name="M:StardewModdingAPI.IContentPackHelper.CreateFake(System.String)">
            <summary>Create a temporary content pack to read files from a directory, using randomized manifest fields. Temporary content packs will not appear in the SMAPI log and update checks will not be performed.</summary>
            <param name="directoryPath">The absolute directory path containing the content pack files.</param>
        </member>
        <member name="M:StardewModdingAPI.IContentPackHelper.CreateTemporary(System.String,System.String,System.String,System.String,System.String,StardewModdingAPI.ISemanticVersion)">
            <summary>Create a temporary content pack to read files from a directory. Temporary content packs will not appear in the SMAPI log and update checks will not be performed.</summary>
            <param name="directoryPath">The absolute directory path containing the content pack files.</param>
            <param name="id">The content pack's unique ID.</param>
            <param name="name">The content pack name.</param>
            <param name="description">The content pack description.</param>
            <param name="author">The content pack author's name.</param>
            <param name="version">The content pack version.</param>
        </member>
        <member name="T:StardewModdingAPI.ICursorPosition">
            <summary>Represents a cursor position in the different coordinate systems.</summary>
        </member>
        <member name="P:StardewModdingAPI.ICursorPosition.AbsolutePixels">
            <summary>The pixel position relative to the top-left corner of the in-game map.</summary>
        </member>
        <member name="P:StardewModdingAPI.ICursorPosition.ScreenPixels">
            <summary>The pixel position relative to the top-left corner of the visible screen.</summary>
        </member>
        <member name="P:StardewModdingAPI.ICursorPosition.Tile">
            <summary>The tile position under the cursor relative to the top-left corner of the map.</summary>
        </member>
        <member name="P:StardewModdingAPI.ICursorPosition.GrabTile">
            <summary>The tile position that the game considers under the cursor for purposes of clicking actions. This may be different than <see cref="P:StardewModdingAPI.ICursorPosition.Tile"/> if that's too far from the player.</summary>
        </member>
        <member name="T:StardewModdingAPI.IDataHelper">
            <summary>Provides an API for reading and storing local mod data.</summary>
        </member>
        <member name="M:StardewModdingAPI.IDataHelper.ReadJsonFile``1(System.String)">
            <summary>Read data from a JSON file in the mod's folder.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="path">The file path relative to the mod folder.</param>
            <returns>Returns the deserialized model, or <c>null</c> if the file doesn't exist or is empty.</returns>
            <exception cref="T:System.InvalidOperationException">The <paramref name="path"/> is not relative or contains directory climbing (../).</exception>
        </member>
        <member name="M:StardewModdingAPI.IDataHelper.WriteJsonFile``1(System.String,``0)">
            <summary>Save data to a JSON file in the mod's folder.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="path">The file path relative to the mod folder.</param>
            <param name="data">The arbitrary data to save.</param>
            <exception cref="T:System.InvalidOperationException">The <paramref name="path"/> is not relative or contains directory climbing (../).</exception>
        </member>
        <member name="M:StardewModdingAPI.IDataHelper.ReadSaveData``1(System.String)">
            <summary>Read arbitrary data stored in the current save slot. This is only possible if a save has been loaded.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="key">The unique key identifying the data.</param>
            <returns>Returns the parsed data, or <c>null</c> if the entry doesn't exist or is empty.</returns>
            <exception cref="T:System.InvalidOperationException">The player hasn't loaded a save file yet or isn't the main player.</exception>
        </member>
        <member name="M:StardewModdingAPI.IDataHelper.WriteSaveData``1(System.String,``0)">
            <summary>Save arbitrary data to the current save slot. This is only possible if a save has been loaded, and the data will be lost if the player exits without saving the current day.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="key">The unique key identifying the data.</param>
            <param name="data">The arbitrary data to save.</param>
            <exception cref="T:System.InvalidOperationException">The player hasn't loaded a save file yet or isn't the main player.</exception>
        </member>
        <member name="M:StardewModdingAPI.IDataHelper.ReadGlobalData``1(System.String)">
            <summary>Read arbitrary data stored on the local computer, synchronised by GOG/Steam if applicable.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="key">The unique key identifying the data.</param>
            <returns>Returns the parsed data, or <c>null</c> if the entry doesn't exist or is empty.</returns>
        </member>
        <member name="M:StardewModdingAPI.IDataHelper.WriteGlobalData``1(System.String,``0)">
            <summary>Save arbitrary data to the local computer, synchronised by GOG/Steam if applicable.</summary>
            <typeparam name="TModel">The model type. This should be a plain class that has public properties for the data you want. The properties can be complex types.</typeparam>
            <param name="key">The unique key identifying the data.</param>
            <param name="data">The arbitrary data to save.</param>
        </member>
        <member name="T:StardewModdingAPI.IInputHelper">
            <summary>Provides an API for checking and changing input state.</summary>
        </member>
        <member name="M:StardewModdingAPI.IInputHelper.GetCursorPosition">
            <summary>Get the current cursor position.</summary>
        </member>
        <member name="M:StardewModdingAPI.IInputHelper.IsDown(StardewModdingAPI.SButton)">
            <summary>Get whether a button is currently pressed.</summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:StardewModdingAPI.IInputHelper.IsSuppressed(StardewModdingAPI.SButton)">
            <summary>Get whether a button is currently suppressed, so the game won't see it.</summary>
            <param name="button">The button.</param>
        </member>
        <member name="M:StardewModdingAPI.IInputHelper.Suppress(StardewModdingAPI.SButton)">
            <summary>Prevent the game from handling a button press. This doesn't prevent other mods from receiving the event.</summary>
            <param name="button">The button to suppress.</param>
        </member>
        <member name="T:StardewModdingAPI.IMod">
            <summary>The implementation for a Stardew Valley mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMod.Helper">
            <summary>Provides simplified APIs for writing mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMod.Monitor">
            <summary>Writes messages to the console and log file.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMod.ModManifest">
            <summary>The mod's manifest.</summary>
        </member>
        <member name="M:StardewModdingAPI.IMod.Entry(StardewModdingAPI.IModHelper)">
            <summary>The mod entry point, called after the mod is first loaded.</summary>
            <param name="helper">Provides simplified APIs for writing mods.</param>
        </member>
        <member name="M:StardewModdingAPI.IMod.GetApi">
            <summary>Get an API that other mods can access. This is always called after <see cref="M:StardewModdingAPI.IMod.Entry(StardewModdingAPI.IModHelper)"/>.</summary>
        </member>
        <member name="T:StardewModdingAPI.IModHelper">
            <summary>Provides simplified APIs for writing mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.DirectoryPath">
            <summary>The full path to the mod's folder.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.Events">
            <summary>Manages access to events raised by SMAPI, which let your mod react when something happens in the game.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.ConsoleCommands">
            <summary>An API for managing console commands.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.Content">
            <summary>An API for loading content assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.ContentPacks">
            <summary>An API for managing content packs.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.Data">
            <summary>An API for reading and writing persistent mod data.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.Input">
            <summary>An API for checking and changing input state.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.Reflection">
            <summary>Simplifies access to private game code.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.ModRegistry">
            <summary>Metadata about loaded mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.Multiplayer">
            <summary>Provides multiplayer utilities.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.Translation">
            <summary>Provides translations stored in the mod's <c>i18n</c> folder, with one file per locale (like <c>en.json</c>) containing a flat key => value structure. Translations are fetched with locale fallback, so missing translations are filled in from broader locales (like <c>pt-BR.json</c> &lt; <c>pt.json</c> &lt; <c>default.json</c>).</summary>
        </member>
        <member name="M:StardewModdingAPI.IModHelper.ReadConfig``1">
            <summary>Read the mod's configuration file (and create it if needed).</summary>
            <typeparam name="TConfig">The config class type. This should be a plain class that has public properties for the settings you want. These can be complex types.</typeparam>
        </member>
        <member name="M:StardewModdingAPI.IModHelper.WriteConfig``1(``0)">
            <summary>Save to the mod's configuration file.</summary>
            <typeparam name="TConfig">The config class type.</typeparam>
            <param name="config">The config settings to save.</param>
        </member>
        <member name="T:StardewModdingAPI.IModInfo">
            <summary>Metadata for a loaded mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModInfo.Manifest">
            <summary>The mod manifest.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModInfo.IsContentPack">
            <summary>Whether the mod is a content pack.</summary>
        </member>
        <member name="T:StardewModdingAPI.IModLinked">
            <summary>An instance linked to a mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModLinked.ModID">
            <summary>The unique ID of the mod for which the instance was created.</summary>
        </member>
        <member name="T:StardewModdingAPI.IModRegistry">
            <summary>Provides an API for fetching metadata about loaded mods.</summary>
        </member>
        <member name="M:StardewModdingAPI.IModRegistry.GetAll">
            <summary>Get metadata for all loaded mods.</summary>
        </member>
        <member name="M:StardewModdingAPI.IModRegistry.Get(System.String)">
            <summary>Get metadata for a loaded mod.</summary>
            <param name="uniqueID">The mod's unique ID.</param>
            <returns>Returns the matching mod's metadata, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:StardewModdingAPI.IModRegistry.IsLoaded(System.String)">
            <summary>Get whether a mod has been loaded.</summary>
            <param name="uniqueID">The mod's unique ID.</param>
        </member>
        <member name="M:StardewModdingAPI.IModRegistry.GetApi(System.String)">
            <summary>Get the API provided by a mod, or <c>null</c> if it has none. This signature requires using the <see cref="P:StardewModdingAPI.IModHelper.Reflection"/> API to access the API's properties and methods.</summary>
            <param name="uniqueID">The mod's unique ID.</param>
        </member>
        <member name="M:StardewModdingAPI.IModRegistry.GetApi``1(System.String)">
            <summary>Get the API provided by a mod, mapped to a given interface which specifies the expected properties and methods. If the mod has no API or it's not compatible with the given interface, get <c>null</c>.</summary>
            <typeparam name="TInterface">The interface which matches the properties and methods you intend to access.</typeparam>
            <param name="uniqueID">The mod's unique ID.</param>
        </member>
        <member name="T:StardewModdingAPI.IMonitor">
            <summary>Encapsulates monitoring and logging for a given module.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMonitor.IsVerbose">
            <summary>Whether verbose logging is enabled. This enables more detailed diagnostic messages than are normally needed.</summary>
        </member>
        <member name="M:StardewModdingAPI.IMonitor.Log(System.String,StardewModdingAPI.LogLevel)">
            <summary>Log a message for the player or developer.</summary>
            <param name="message">The message to log.</param>
            <param name="level">The log severity level.</param>
        </member>
        <member name="M:StardewModdingAPI.IMonitor.VerboseLog(System.String)">
            <summary>Log a message that only appears when <see cref="P:StardewModdingAPI.IMonitor.IsVerbose"/> is enabled.</summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="T:StardewModdingAPI.IMultiplayerHelper">
            <summary>Provides multiplayer utilities.</summary>
        </member>
        <member name="M:StardewModdingAPI.IMultiplayerHelper.GetNewID">
            <summary>Get a new multiplayer ID.</summary>
        </member>
        <member name="M:StardewModdingAPI.IMultiplayerHelper.GetActiveLocations">
            <summary>Get the locations which are being actively synced from the host.</summary>
        </member>
        <member name="M:StardewModdingAPI.IMultiplayerHelper.GetConnectedPlayer(System.Int64)">
            <summary>Get a connected player.</summary>
            <param name="id">The player's unique ID.</param>
            <returns>Returns the connected player, or <c>null</c> if no such player is connected.</returns>
        </member>
        <member name="M:StardewModdingAPI.IMultiplayerHelper.GetConnectedPlayers">
            <summary>Get all connected players.</summary>
        </member>
        <member name="M:StardewModdingAPI.IMultiplayerHelper.SendMessage``1(``0,System.String,System.String[],System.Int64[])">
            <summary>Send a message to mods installed by connected players.</summary>
            <typeparam name="TMessage">The data type. This can be a class with a default constructor, or a value type.</typeparam>
            <param name="message">The data to send over the network.</param>
            <param name="messageType">A message type which receiving mods can use to decide whether it's the one they want to handle, like <c>SetPlayerLocation</c>. This doesn't need to be globally unique, since mods should check the originating mod ID.</param>
            <param name="modIDs">The mod IDs which should receive the message on the destination computers, or <c>null</c> for all mods. Specifying mod IDs is recommended to improve performance, unless it's a general-purpose broadcast.</param>
            <param name="playerIDs">The <see cref="P:StardewValley.Farmer.UniqueMultiplayerID" /> values for the players who should receive the message, or <c>null</c> for all players. If you don't need to broadcast to all players, specifying player IDs is recommended to reduce latency.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="message"/> or <paramref name="messageType" /> is null.</exception>
        </member>
        <member name="T:StardewModdingAPI.IMultiplayerPeer">
            <summary>Metadata about a connected player.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMultiplayerPeer.PlayerID">
            <summary>The player's unique ID.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMultiplayerPeer.IsHost">
            <summary>Whether this is a connection to the host player.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMultiplayerPeer.HasSmapi">
            <summary>Whether the player has SMAPI installed.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMultiplayerPeer.Platform">
            <summary>The player's OS platform, if <see cref="P:StardewModdingAPI.IMultiplayerPeer.HasSmapi"/> is true.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMultiplayerPeer.GameVersion">
            <summary>The installed version of Stardew Valley, if <see cref="P:StardewModdingAPI.IMultiplayerPeer.HasSmapi"/> is true.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMultiplayerPeer.ApiVersion">
            <summary>The installed version of SMAPI, if <see cref="P:StardewModdingAPI.IMultiplayerPeer.HasSmapi"/> is true.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMultiplayerPeer.Mods">
            <summary>The installed mods, if <see cref="P:StardewModdingAPI.IMultiplayerPeer.HasSmapi"/> is true.</summary>
        </member>
        <member name="M:StardewModdingAPI.IMultiplayerPeer.GetMod(System.String)">
            <summary>Get metadata for a mod installed by the player.</summary>
            <param name="id">The unique mod ID.</param>
            <returns>Returns the mod info, or <c>null</c> if the player doesn't have that mod.</returns>
        </member>
        <member name="T:StardewModdingAPI.IMultiplayerPeerMod">
            <summary>Metadata about a mod installed by a connected player.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMultiplayerPeerMod.Name">
            <summary>The mod's display name.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMultiplayerPeerMod.ID">
            <summary>The unique mod ID.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMultiplayerPeerMod.Version">
            <summary>The mod version.</summary>
        </member>
        <member name="T:StardewModdingAPI.IReflectedField`1">
            <summary>A field obtained through reflection.</summary>
            <typeparam name="TValue">The field value type.</typeparam>
        </member>
        <member name="P:StardewModdingAPI.IReflectedField`1.FieldInfo">
            <summary>The reflection metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.IReflectedField`1.GetValue">
            <summary>Get the field value.</summary>
        </member>
        <member name="M:StardewModdingAPI.IReflectedField`1.SetValue(`0)">
            <summary>Set the field value.</summary>
        </member>
        <member name="T:StardewModdingAPI.IReflectedMethod">
            <summary>A method obtained through reflection.</summary>
        </member>
        <member name="P:StardewModdingAPI.IReflectedMethod.MethodInfo">
            <summary>The reflection metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.IReflectedMethod.Invoke``1(System.Object[])">
            <summary>Invoke the method.</summary>
            <typeparam name="TValue">The return type.</typeparam>
            <param name="arguments">The method arguments to pass in.</param>
        </member>
        <member name="M:StardewModdingAPI.IReflectedMethod.Invoke(System.Object[])">
            <summary>Invoke the method.</summary>
            <param name="arguments">The method arguments to pass in.</param>
        </member>
        <member name="T:StardewModdingAPI.IReflectedProperty`1">
            <summary>A property obtained through reflection.</summary>
            <typeparam name="TValue">The property value type.</typeparam>
        </member>
        <member name="P:StardewModdingAPI.IReflectedProperty`1.PropertyInfo">
            <summary>The reflection metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.IReflectedProperty`1.GetValue">
            <summary>Get the property value.</summary>
        </member>
        <member name="M:StardewModdingAPI.IReflectedProperty`1.SetValue(`0)">
            <summary>Set the property value.</summary>
        </member>
        <member name="T:StardewModdingAPI.IReflectionHelper">
            <summary>Provides an API for accessing inaccessible code.</summary>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetField``1(System.Object,System.String,System.Boolean)">
            <summary>Get an instance field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="obj">The object which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetField``1(System.Type,System.String,System.Boolean)">
            <summary>Get a static field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="type">The type which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetProperty``1(System.Object,System.String,System.Boolean)">
            <summary>Get an instance property.</summary>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="obj">The object which has the property.</param>
            <param name="name">The property name.</param>
            <param name="required">Whether to throw an exception if the property is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetProperty``1(System.Type,System.String,System.Boolean)">
            <summary>Get a static property.</summary>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="type">The type which has the property.</param>
            <param name="name">The property name.</param>
            <param name="required">Whether to throw an exception if the property is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetMethod(System.Object,System.String,System.Boolean)">
            <summary>Get an instance method.</summary>
            <param name="obj">The object which has the method.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetMethod(System.Type,System.String,System.Boolean)">
            <summary>Get a static method.</summary>
            <param name="type">The type which has the method.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the field is not found.</param>
        </member>
        <member name="T:StardewModdingAPI.ITranslationHelper">
            <summary>Provides translations stored in the mod's <c>i18n</c> folder, with one file per locale (like <c>en.json</c>) containing a flat key => value structure. Translations are fetched with locale fallback, so missing translations are filled in from broader locales (like <c>pt-BR.json</c> &lt; <c>pt.json</c> &lt; <c>default.json</c>).</summary>
        </member>
        <member name="P:StardewModdingAPI.ITranslationHelper.Locale">
            <summary>The current locale.</summary>
        </member>
        <member name="P:StardewModdingAPI.ITranslationHelper.LocaleEnum">
            <summary>The game's current language code.</summary>
        </member>
        <member name="M:StardewModdingAPI.ITranslationHelper.GetTranslations">
            <summary>Get all translations for the current locale.</summary>
        </member>
        <member name="M:StardewModdingAPI.ITranslationHelper.Get(System.String)">
            <summary>Get a translation for the current locale.</summary>
            <param name="key">The translation key.</param>
        </member>
        <member name="M:StardewModdingAPI.ITranslationHelper.Get(System.String,System.Object)">
            <summary>Get a translation for the current locale.</summary>
            <param name="key">The translation key.</param>
            <param name="tokens">An object containing token key/value pairs. This can be an anonymous object (like <c>new { value = 42, name = "Cranberries" }</c>), a dictionary, or a class instance.</param>
        </member>
        <member name="T:StardewModdingAPI.LogLevel">
            <summary>The log severity levels.</summary>
        </member>
        <member name="F:StardewModdingAPI.LogLevel.Trace">
            <summary>Tracing info intended for developers.</summary>
        </member>
        <member name="F:StardewModdingAPI.LogLevel.Debug">
            <summary>Troubleshooting info that may be relevant to the player.</summary>
        </member>
        <member name="F:StardewModdingAPI.LogLevel.Info">
            <summary>Info relevant to the player. This should be used judiciously.</summary>
        </member>
        <member name="F:StardewModdingAPI.LogLevel.Warn">
            <summary>An issue the player should be aware of. This should be used rarely.</summary>
        </member>
        <member name="F:StardewModdingAPI.LogLevel.Error">
            <summary>A message indicating something went wrong.</summary>
        </member>
        <member name="F:StardewModdingAPI.LogLevel.Alert">
            <summary>Important information to highlight for the player when player action is needed (e.g. new version available). This should be used rarely to avoid alert fatigue.</summary>
        </member>
        <member name="T:StardewModdingAPI.Metadata.CoreAssetPropagator">
            <summary>Propagates changes to core assets to the game state.</summary>
        </member>
        <member name="F:StardewModdingAPI.Metadata.CoreAssetPropagator.AssertAndNormalizeAssetName">
            <summary>Normalizes an asset key to match the cache key and assert that it's valid.</summary>
        </member>
        <member name="F:StardewModdingAPI.Metadata.CoreAssetPropagator.Reflection">
            <summary>Simplifies access to private game code.</summary>
        </member>
        <member name="F:StardewModdingAPI.Metadata.CoreAssetPropagator.Monitor">
            <summary>Encapsulates monitoring and logging.</summary>
        </member>
        <member name="T:StardewModdingAPI.Metadata.CoreAssetPropagator.AssetBucket">
            <summary>Optimized bucket categories for batch reloading assets.</summary>
        </member>
        <member name="F:StardewModdingAPI.Metadata.CoreAssetPropagator.AssetBucket.Sprite">
            <summary>NPC overworld sprites.</summary>
        </member>
        <member name="F:StardewModdingAPI.Metadata.CoreAssetPropagator.AssetBucket.Portrait">
            <summary>Villager dialogue portraits.</summary>
        </member>
        <member name="F:StardewModdingAPI.Metadata.CoreAssetPropagator.AssetBucket.Other">
            <summary>Any other asset.</summary>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.#ctor(System.Func{System.String,System.String},StardewModdingAPI.Framework.Reflection.Reflector,StardewModdingAPI.IMonitor)">
            <summary>Initialize the core asset data.</summary>
            <param name="assertAndNormalizeAssetName">Normalizes an asset key to match the cache key and assert that it's valid.</param>
            <param name="reflection">Simplifies access to private code.</param>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.Propagate(StardewValley.LocalizedContentManager,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>Reload one of the game's core assets (if applicable).</summary>
            <param name="content">The content manager through which to reload the asset.</param>
            <param name="assets">The asset keys and types to reload.</param>
            <returns>Returns a lookup of asset names to whether they've been propagated.</returns>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.PropagateOther(StardewValley.LocalizedContentManager,System.String,System.Type)">
            <summary>Reload one of the game's core assets (if applicable).</summary>
            <param name="content">The content manager through which to reload the asset.</param>
            <param name="key">The asset key to reload.</param>
            <param name="type">The asset type to reload.</param>
            <returns>Returns whether an asset was loaded. The return value may be true or false, or a non-null value for true.</returns>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.ReloadPetOrHorseSprites``1(StardewValley.LocalizedContentManager,System.String)">
            <summary>Reload the sprites for matching pets or horses.</summary>
            <typeparam name="TAnimal">The animal type.</typeparam>
            <param name="content">The content manager through which to reload the asset.</param>
            <param name="key">The asset key to reload.</param>
            <returns>Returns whether any textures were reloaded.</returns>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.ReloadFarmAnimalSprites(StardewValley.LocalizedContentManager,System.String)">
            <summary>Reload the sprites for matching farm animals.</summary>
            <param name="content">The content manager through which to reload the asset.</param>
            <param name="key">The asset key to reload.</param>
            <returns>Returns whether any textures were reloaded.</returns>
            <remarks>Derived from <see cref="M:StardewValley.FarmAnimal.reload(StardewValley.Buildings.Building)"/>.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.ReloadBuildings(StardewValley.LocalizedContentManager,System.String)">
            <summary>Reload building textures.</summary>
            <param name="content">The content manager through which to reload the asset.</param>
            <param name="key">The asset key to reload.</param>
            <returns>Returns whether any textures were reloaded.</returns>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.ReloadCritterTextures(StardewValley.LocalizedContentManager,System.String)">
            <summary>Reload critter textures.</summary>
            <param name="content">The content manager through which to reload the asset.</param>
            <param name="key">The asset key to reload.</param>
            <returns>Returns the number of reloaded assets.</returns>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.ReloadFarmAnimalData">
            <summary>Reload the data for matching farm animals.</summary>
            <returns>Returns whether any farm animals were affected.</returns>
            <remarks>Derived from the <see cref="T:StardewValley.FarmAnimal"/> constructor.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.ReloadFenceTextures(System.String)">
            <summary>Reload the sprites for a fence type.</summary>
            <param name="key">The asset key to reload.</param>
            <returns>Returns whether any textures were reloaded.</returns>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.ReloadGrassTextures(StardewValley.LocalizedContentManager,System.String)">
            <summary>Reload tree textures.</summary>
            <param name="content">The content manager through which to reload the asset.</param>
            <param name="key">The asset key to reload.</param>
            <returns>Returns whether any textures were reloaded.</returns>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.ReloadNpcDispositions(StardewValley.LocalizedContentManager,System.String)">
            <summary>Reload the disposition data for matching NPCs.</summary>
            <param name="content">The content manager through which to reload the asset.</param>
            <param name="key">The asset key to reload.</param>
            <returns>Returns whether any NPCs were affected.</returns>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.ReloadNpcSprites(StardewValley.LocalizedContentManager,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Boolean})">
            <summary>Reload the sprites for matching NPCs.</summary>
            <param name="content">The content manager through which to reload the asset.</param>
            <param name="keys">The asset keys to reload.</param>
            <param name="propagated">The asset keys which have been propagated.</param>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.ReloadNpcPortraits(StardewValley.LocalizedContentManager,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Boolean})">
            <summary>Reload the portraits for matching NPCs.</summary>
            <param name="content">The content manager through which to reload the asset.</param>
            <param name="keys">The asset key to reload.</param>
            <param name="propagated">The asset keys which have been propagated.</param>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.ReloadTreeTextures(StardewValley.LocalizedContentManager,System.String,System.Int32)">
            <summary>Reload tree textures.</summary>
            <param name="content">The content manager through which to reload the asset.</param>
            <param name="key">The asset key to reload.</param>
            <param name="type">The type to reload.</param>
            <returns>Returns whether any textures were reloaded.</returns>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.ReloadNpcDialogue(System.String)">
            <summary>Reload the dialogue data for matching NPCs.</summary>
            <param name="key">The asset key to reload.</param>
            <returns>Returns whether any assets were reloaded.</returns>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.ReloadNpcSchedules(System.String)">
            <summary>Reload the schedules for matching NPCs.</summary>
            <param name="key">The asset key to reload.</param>
            <returns>Returns whether any assets were reloaded.</returns>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.SetSpriteTexture(StardewValley.AnimatedSprite,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Reload the texture for an animated sprite.</summary>
            <param name="sprite">The animated sprite to update.</param>
            <param name="texture">The texture to set.</param>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.GetCharacters">
            <summary>Get all NPCs in the game (excluding farm animals).</summary>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.GetFarmAnimals">
            <summary>Get all farm animals in the game.</summary>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.GetLocations(System.Boolean)">
            <summary>Get all locations in the game.</summary>
            <param name="buildingInteriors">Whether to also get the interior locations for constructable buildings.</param>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.NormalizeAssetNameIgnoringEmpty(System.String)">
            <summary>Normalize an asset key to match the cache key and assert that it's valid, but don't raise an error for null or empty values.</summary>
            <param name="path">The asset key to normalize.</param>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.KeyStartsWith(System.String,System.String)">
            <summary>Get whether a key starts with a substring after the substring is normalized.</summary>
            <param name="key">The key to check.</param>
            <param name="rawSubstring">The substring to normalize and find.</param>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.IsInFolder(System.String,System.String,System.Boolean)">
            <summary>Get whether a normalized asset key is in the given folder.</summary>
            <param name="key">The normalized asset key (like <c>Animals/cat</c>).</param>
            <param name="folder">The key folder (like <c>Animals</c>); doesn't need to be normalized.</param>
            <param name="allowSubfolders">Whether to return true if the key is inside a subfolder of the <paramref name="folder"/>.</param>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.GetSegments(System.String)">
            <summary>Get the segments in a path (e.g. 'a/b' is 'a' and 'b').</summary>
            <param name="path">The path to check.</param>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssetPropagator.CountSegments(System.String)">
            <summary>Count the number of segments in a path (e.g. 'a/b' is 2).</summary>
            <param name="path">The path to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Metadata.InstructionMetadata">
            <summary>Provides CIL instruction handlers which rewrite mods for compatibility and throw exceptions for incompatible code.</summary>
        </member>
        <member name="F:StardewModdingAPI.Metadata.InstructionMetadata.ValidateReferencesToAssemblies">
            <summary>The assembly names to which to heuristically detect broken references.</summary>
            <remarks>The current implementation only works correctly with assemblies that should always be present.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Metadata.InstructionMetadata.GetHandlers(System.Boolean)">
            <summary>Get rewriters which detect or fix incompatible CIL instructions in mod assemblies.</summary>
            <param name="paranoidMode">Whether to detect paranoid mode issues.</param>
        </member>
        <member name="T:StardewModdingAPI.Mod">
            <summary>The base class for a mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Mod.Helper">
            <summary>Provides simplified APIs for writing mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.Mod.Monitor">
            <summary>Writes messages to the console and log file.</summary>
        </member>
        <member name="P:StardewModdingAPI.Mod.ModManifest">
            <summary>The mod's manifest.</summary>
        </member>
        <member name="M:StardewModdingAPI.Mod.Entry(StardewModdingAPI.IModHelper)">
            <summary>The mod entry point, called after the mod is first loaded.</summary>
            <param name="helper">Provides simplified APIs for writing mods.</param>
        </member>
        <member name="M:StardewModdingAPI.Mod.GetApi">
            <summary>Get an API that other mods can access. This is always called after <see cref="M:StardewModdingAPI.Mod.Entry(StardewModdingAPI.IModHelper)"/>.</summary>
        </member>
        <member name="M:StardewModdingAPI.Mod.Dispose">
            <summary>Release or reset unmanaged resources.</summary>
        </member>
        <member name="M:StardewModdingAPI.Mod.Dispose(System.Boolean)">
            <summary>Release or reset unmanaged resources when the game exits. There's no guarantee this will be called on every exit.</summary>
            <param name="disposing">Whether the instance is being disposed explicitly rather than finalized. If this is false, the instance shouldn't dispose other objects since they may already be finalized.</param>
        </member>
        <member name="M:StardewModdingAPI.Mod.Finalize">
            <summary>Destruct the instance.</summary>
        </member>
        <member name="T:StardewModdingAPI.Patches.DialogueErrorPatch">
            <summary>A Harmony patch for the <see cref="T:StardewValley.Dialogue"/> constructor which intercepts invalid dialogue lines and logs an error instead of crashing.</summary>
            <remarks>Patch methods must be static for Harmony to work correctly. See the Harmony documentation before renaming patch arguments.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Patches.DialogueErrorPatch.MonitorForGame">
            <summary>Writes messages to the console and log file on behalf of the game.</summary>
        </member>
        <member name="F:StardewModdingAPI.Patches.DialogueErrorPatch.Reflection">
            <summary>Simplifies access to private code.</summary>
        </member>
        <member name="F:StardewModdingAPI.Patches.DialogueErrorPatch.IsInterceptingCurrentDialogue">
            <summary>Whether the <see cref="P:StardewValley.NPC.CurrentDialogue"/> getter is currently being intercepted.</summary>
        </member>
        <member name="P:StardewModdingAPI.Patches.DialogueErrorPatch.Name">
            <summary>A unique name for this patch.</summary>
        </member>
        <member name="M:StardewModdingAPI.Patches.DialogueErrorPatch.#ctor(StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.Reflection.Reflector)">
            <summary>Construct an instance.</summary>
            <param name="monitorForGame">Writes messages to the console and log file on behalf of the game.</param>
            <param name="reflector">Simplifies access to private code.</param>
        </member>
        <member name="M:StardewModdingAPI.Patches.DialogueErrorPatch.Apply(Harmony.HarmonyInstance)">
            <summary>Apply the Harmony patch.</summary>
            <param name="harmony">The Harmony instance.</param>
        </member>
        <member name="M:StardewModdingAPI.Patches.DialogueErrorPatch.Before_Dialogue_Constructor(StardewValley.Dialogue,System.String,StardewValley.NPC)">
            <summary>The method to call instead of the Dialogue constructor.</summary>
            <param name="__instance">The instance being patched.</param>
            <param name="masterDialogue">The dialogue being parsed.</param>
            <param name="speaker">The NPC for which the dialogue is being parsed.</param>
            <returns>Returns whether to execute the original method.</returns>
        </member>
        <member name="M:StardewModdingAPI.Patches.DialogueErrorPatch.Before_NPC_CurrentDialogue(StardewValley.NPC,System.Collections.Generic.Stack{StardewValley.Dialogue}@,System.Reflection.MethodInfo)">
            <summary>The method to call instead of <see cref="P:StardewValley.NPC.CurrentDialogue"/>.</summary>
            <param name="__instance">The instance being patched.</param>
            <param name="__result">The return value of the original method.</param>
            <param name="__originalMethod">The method being wrapped.</param>
            <returns>Returns whether to execute the original method.</returns>
        </member>
        <member name="T:StardewModdingAPI.Patches.EventErrorPatch">
            <summary>A Harmony patch for the <see cref="T:StardewValley.Dialogue"/> constructor which intercepts invalid dialogue lines and logs an error instead of crashing.</summary>
            <remarks>Patch methods must be static for Harmony to work correctly. See the Harmony documentation before renaming patch arguments.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Patches.EventErrorPatch.MonitorForGame">
            <summary>Writes messages to the console and log file on behalf of the game.</summary>
        </member>
        <member name="F:StardewModdingAPI.Patches.EventErrorPatch.IsIntercepted">
            <summary>Whether the method is currently being intercepted.</summary>
        </member>
        <member name="P:StardewModdingAPI.Patches.EventErrorPatch.Name">
            <summary>A unique name for this patch.</summary>
        </member>
        <member name="M:StardewModdingAPI.Patches.EventErrorPatch.#ctor(StardewModdingAPI.IMonitor)">
            <summary>Construct an instance.</summary>
            <param name="monitorForGame">Writes messages to the console and log file on behalf of the game.</param>
        </member>
        <member name="M:StardewModdingAPI.Patches.EventErrorPatch.Apply(Harmony.HarmonyInstance)">
            <summary>Apply the Harmony patch.</summary>
            <param name="harmony">The Harmony instance.</param>
        </member>
        <member name="M:StardewModdingAPI.Patches.EventErrorPatch.Before_GameLocation_CheckEventPrecondition(StardewValley.GameLocation,System.Int32@,System.String,System.Reflection.MethodInfo)">
            <summary>The method to call instead of the GameLocation.CheckEventPrecondition.</summary>
            <param name="__instance">The instance being patched.</param>
            <param name="__result">The return value of the original method.</param>
            <param name="precondition">The precondition to be parsed.</param>
            <param name="__originalMethod">The method being wrapped.</param>
            <returns>Returns whether to execute the original method.</returns>
        </member>
        <member name="T:StardewModdingAPI.Patches.LoadContextPatch">
            <summary>Harmony patches which notify SMAPI for save creation load stages.</summary>
            <remarks>Patch methods must be static for Harmony to work correctly. See the Harmony documentation before renaming patch arguments.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Patches.LoadContextPatch.Reflection">
            <summary>Simplifies access to private code.</summary>
        </member>
        <member name="F:StardewModdingAPI.Patches.LoadContextPatch.OnStageChanged">
            <summary>A callback to invoke when the load stage changes.</summary>
        </member>
        <member name="P:StardewModdingAPI.Patches.LoadContextPatch.Name">
            <summary>A unique name for this patch.</summary>
        </member>
        <member name="M:StardewModdingAPI.Patches.LoadContextPatch.#ctor(StardewModdingAPI.Framework.Reflection.Reflector,System.Action{StardewModdingAPI.Enums.LoadStage})">
            <summary>Construct an instance.</summary>
            <param name="reflection">Simplifies access to private code.</param>
            <param name="onStageChanged">A callback to invoke when the load stage changes.</param>
        </member>
        <member name="M:StardewModdingAPI.Patches.LoadContextPatch.Apply(Harmony.HarmonyInstance)">
            <summary>Apply the Harmony patch.</summary>
            <param name="harmony">The Harmony instance.</param>
        </member>
        <member name="M:StardewModdingAPI.Patches.LoadContextPatch.Before_TitleMenu_CreatedNewCharacter">
            <summary>Called before <see cref="M:StardewValley.Menus.TitleMenu.createdNewCharacter(System.Boolean)"/>.</summary>
            <returns>Returns whether to execute the original method.</returns>
            <remarks>This method must be static for Harmony to work correctly. See the Harmony documentation before renaming arguments.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Patches.LoadContextPatch.After_Game1_LoadForNewGame">
            <summary>Called after <see cref="M:StardewValley.Game1.loadForNewGame(System.Boolean)"/>.</summary>
            <remarks>This method must be static for Harmony to work correctly. See the Harmony documentation before renaming arguments.</remarks>
        </member>
        <member name="T:StardewModdingAPI.Patches.LoadErrorPatch">
            <summary>A Harmony patch for <see cref="T:StardewValley.SaveGame"/> which prevents some errors due to broken save data.</summary>
            <remarks>Patch methods must be static for Harmony to work correctly. See the Harmony documentation before renaming patch arguments.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Patches.LoadErrorPatch.Monitor">
            <summary>Writes messages to the console and log file.</summary>
        </member>
        <member name="F:StardewModdingAPI.Patches.LoadErrorPatch.OnContentRemoved">
            <summary>A callback invoked when custom content is removed from the save data to avoid a crash.</summary>
        </member>
        <member name="P:StardewModdingAPI.Patches.LoadErrorPatch.Name">
            <summary>A unique name for this patch.</summary>
        </member>
        <member name="M:StardewModdingAPI.Patches.LoadErrorPatch.#ctor(StardewModdingAPI.IMonitor,System.Action)">
            <summary>Construct an instance.</summary>
            <param name="monitor">Writes messages to the console and log file.</param>
            <param name="onContentRemoved">A callback invoked when custom content is removed from the save data to avoid a crash.</param>
        </member>
        <member name="M:StardewModdingAPI.Patches.LoadErrorPatch.Apply(Harmony.HarmonyInstance)">
            <summary>Apply the Harmony patch.</summary>
            <param name="harmony">The Harmony instance.</param>
        </member>
        <member name="M:StardewModdingAPI.Patches.LoadErrorPatch.Before_SaveGame_LoadDataToLocations(System.Collections.Generic.List{StardewValley.GameLocation})">
            <summary>The method to call instead of <see cref="M:StardewValley.SaveGame.loadDataToLocations(System.Collections.Generic.List{StardewValley.GameLocation})"/>.</summary>
            <param name="gamelocations">The game locations being loaded.</param>
            <returns>Returns whether to execute the original method.</returns>
        </member>
        <member name="T:StardewModdingAPI.Patches.ObjectErrorPatch">
            <summary>A Harmony patch for <see cref="M:StardewValley.Object.getDescription"/> which intercepts crashes due to the item no longer existing.</summary>
            <remarks>Patch methods must be static for Harmony to work correctly. See the Harmony documentation before renaming patch arguments.</remarks>
        </member>
        <member name="P:StardewModdingAPI.Patches.ObjectErrorPatch.Name">
            <summary>A unique name for this patch.</summary>
        </member>
        <member name="M:StardewModdingAPI.Patches.ObjectErrorPatch.Apply(Harmony.HarmonyInstance)">
            <summary>Apply the Harmony patch.</summary>
            <param name="harmony">The Harmony instance.</param>
        </member>
        <member name="M:StardewModdingAPI.Patches.ObjectErrorPatch.Before_Object_GetDescription(StardewValley.Object,System.String@)">
            <summary>The method to call instead of <see cref="M:StardewValley.Object.getDescription"/>.</summary>
            <param name="__instance">The instance being patched.</param>
            <param name="__result">The patched method's return value.</param>
            <returns>Returns whether to execute the original method.</returns>
        </member>
        <member name="M:StardewModdingAPI.Patches.ObjectErrorPatch.Before_IClickableMenu_DrawTooltip(StardewValley.Menus.IClickableMenu,StardewValley.Item)">
            <summary>The method to call instead of <see cref="M:StardewValley.Menus.IClickableMenu.drawToolTip(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.String,System.String,StardewValley.Item,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,StardewValley.CraftingRecipe,System.Int32)"/>.</summary>
            <param name="__instance">The instance being patched.</param>
            <param name="hoveredItem">The item for which to draw a tooltip.</param>
            <returns>Returns whether to execute the original method.</returns>
        </member>
        <member name="T:StardewModdingAPI.PatchMode">
            <summary>Indicates how an image should be patched.</summary>
        </member>
        <member name="F:StardewModdingAPI.PatchMode.Replace">
            <summary>Erase the original content within the area before drawing the new content.</summary>
        </member>
        <member name="F:StardewModdingAPI.PatchMode.Overlay">
            <summary>Draw the new content over the original content, so the original content shows through any transparent pixels.</summary>
        </member>
        <member name="T:StardewModdingAPI.Program">
            <summary>The main entry point for SMAPI, responsible for hooking into and launching the game.</summary>
        </member>
        <member name="F:StardewModdingAPI.Program.DllSearchPath">
            <summary>The absolute path to search for SMAPI's internal DLLs.</summary>
            <remarks>We can't use <see cref="P:StardewModdingAPI.Constants.ExecutionPath"/> directly, since <see cref="T:StardewModdingAPI.Constants"/> depends on DLLs loaded from this folder.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Program.Main(System.String[])">
            <summary>The main entry point which hooks into and launches the game.</summary>
            <param name="args">The command-line arguments.</param>
        </member>
        <member name="M:StardewModdingAPI.Program.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>Method called when assembly resolution fails, which may return a manually resolved assembly.</summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:StardewModdingAPI.Program.AssertGamePresent">
            <summary>Assert that the game is available.</summary>
            <remarks>This must be checked *before* any references to <see cref="T:StardewModdingAPI.Constants"/>, and this method should not reference <see cref="T:StardewModdingAPI.Constants"/> itself to avoid errors in Mono.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Program.AssertGameVersion">
            <summary>Assert that the game version is within <see cref="P:StardewModdingAPI.Constants.MinimumGameVersion"/> and <see cref="P:StardewModdingAPI.Constants.MaximumGameVersion"/>.</summary>
        </member>
        <member name="M:StardewModdingAPI.Program.GetExecutableAssemblyName">
            <summary>Get the game's executable assembly name.</summary>
        </member>
        <member name="M:StardewModdingAPI.Program.Start(System.String[])">
            <summary>Initialize SMAPI and launch the game.</summary>
            <param name="args">The command-line arguments.</param>
            <remarks>This method is separate from <see cref="M:StardewModdingAPI.Program.Main(System.String[])"/> because that can't contain any references to assemblies loaded by <see cref="M:StardewModdingAPI.Program.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)"/> (e.g. via <see cref="T:StardewModdingAPI.Constants"/>), or Mono will incorrectly show an assembly resolution error before assembly resolution is set up.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Program.PrintErrorAndExit(System.String)">
            <summary>Write an error directly to the console and exit.</summary>
            <param name="message">The error message to display.</param>
        </member>
        <member name="M:StardewModdingAPI.Program.PressAnyKeyToExit(System.Boolean)">
            <summary>Show a 'press any key to exit' message, and exit when they press a key.</summary>
            <param name="showMessage">Whether to print a 'press any key to exit' message to the console.</param>
        </member>
        <member name="T:StardewModdingAPI.SButton">
            <summary>A unified button constant which includes all controller, keyboard, and mouse buttons.</summary>
            <remarks>Derived from <see cref="T:Microsoft.Xna.Framework.Input.Keys"/>, <see cref="T:Microsoft.Xna.Framework.Input.Buttons"/>, and <see cref="T:System.Windows.Forms.MouseButtons"/>.</remarks>
        </member>
        <member name="F:StardewModdingAPI.SButton.None">
            <summary>No valid key.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MouseLeft">
            <summary>The left mouse button.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MouseRight">
            <summary>The right mouse button.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MouseMiddle">
            <summary>The middle mouse button.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MouseX1">
            <summary>The first mouse XButton.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MouseX2">
            <summary>The second mouse XButton.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ControllerA">
            <summary>The 'A' button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ControllerB">
            <summary>The 'B' button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ControllerX">
            <summary>The 'X' button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ControllerY">
            <summary>The 'Y' button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ControllerBack">
            <summary>The back button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ControllerStart">
            <summary>The start button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.DPadUp">
            <summary>The up button on the directional pad of a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.DPadDown">
            <summary>The down button on the directional pad of a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.DPadLeft">
            <summary>The left button on the directional pad of a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.DPadRight">
            <summary>The right button on the directional pad of a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftShoulder">
            <summary>The left bumper (shoulder) button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightShoulder">
            <summary>The right bumper (shoulder) button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftTrigger">
            <summary>The left trigger on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightTrigger">
            <summary>The right trigger on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftStick">
            <summary>The left analog stick on a controller (when pressed).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightStick">
            <summary>The right analog stick on a controller (when pressed).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BigButton">
            <summary>The 'big button' on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftThumbstickLeft">
            <summary>The left analog stick on a controller (when pushed left).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftThumbstickRight">
            <summary>The left analog stick on a controller (when pushed right).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftThumbstickDown">
            <summary>The left analog stick on a controller (when pushed down).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftThumbstickUp">
            <summary>The left analog stick on a controller (when pushed up).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightThumbstickLeft">
            <summary>The right analog stick on a controller (when pushed left).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightThumbstickRight">
            <summary>The right analog stick on a controller (when pushed right).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightThumbstickDown">
            <summary>The right analog stick on a controller (when pushed down).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightThumbstickUp">
            <summary>The right analog stick on a controller (when pushed up).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.A">
            <summary>The A button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Add">
            <summary>The Add button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Apps">
            <summary>The Applications button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Attn">
            <summary>The Attn button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.B">
            <summary>The B button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Back">
            <summary>The Backspace button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserBack">
            <summary>The Browser Back button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserFavorites">
            <summary>The Browser Favorites button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserForward">
            <summary>The Browser Favorites button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserHome">
            <summary>The Browser Home button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserRefresh">
            <summary>The Browser Refresh button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserSearch">
            <summary>The Browser Search button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserStop">
            <summary>The Browser Stop button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.C">
            <summary>The C button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.CapsLock">
            <summary>The Caps Lock button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ChatPadGreen">
            <summary>The Green ChatPad button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ChatPadOrange">
            <summary>The Orange ChatPad button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Crsel">
            <summary>The CrSel button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D">
            <summary>The D button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D0">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D1">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D2">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D3">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D4">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D5">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D6">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D7">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D8">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D9">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Decimal">
            <summary>The Decimal button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Delete">
            <summary>The Delete button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Divide">
            <summary>The Divide button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Down">
            <summary>The Down arrow button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.E">
            <summary>The E button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.End">
            <summary>The End button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Enter">
            <summary>The Enter button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.EraseEof">
            <summary>The Erase EOF button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Escape">
            <summary>The Escape button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Execute">
            <summary>The Execute button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Exsel">
            <summary>The ExSel button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F">
            <summary>The F button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F1">
            <summary>The F1 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F10">
            <summary>The F10 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F11">
            <summary>The F11 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F12">
            <summary>The F12 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F13">
            <summary>The F13 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F14">
            <summary>The F14 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F15">
            <summary>The F15 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F16">
            <summary>The F16 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F17">
            <summary>The F17 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F18">
            <summary>The F18 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F19">
            <summary>The F19 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F2">
            <summary>The F2 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F20">
            <summary>The F20 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F21">
            <summary>The F21 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F22">
            <summary>The F22 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F23">
            <summary>The F23 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F24">
            <summary>The F24 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F3">
            <summary>The F3 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F4">
            <summary>The F4 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F5">
            <summary>The F5 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F6">
            <summary>The F6 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F7">
            <summary>The F7 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F8">
            <summary>The F8 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F9">
            <summary>The F9 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.G">
            <summary>The G button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.H">
            <summary>The H button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Help">
            <summary>The Help button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Home">
            <summary>The Home button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.I">
            <summary>The I button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ImeConvert">
            <summary>The IME Convert button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ImeNoConvert">
            <summary>The IME NoConvert button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Insert">
            <summary>The INS button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.J">
            <summary>The J button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.K">
            <summary>The K button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Kana">
            <summary>The Kana button on a Japanese keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Kanji">
            <summary>The Kanji button on a Japanese keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.L">
            <summary>The L button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LaunchApplication1">
            <summary>The Start Applications 1 button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LaunchApplication2">
            <summary>The Start Applications 2 button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LaunchMail">
            <summary>The Start Mail button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Left">
            <summary>The Left arrow button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftAlt">
            <summary>The Left Alt button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftControl">
            <summary>The Left Control button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftShift">
            <summary>The Left Shift button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftWindows">
            <summary>The Left Windows button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.M">
            <summary>The M button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MediaNextTrack">
            <summary>The MediaNextTrack button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MediaPlayPause">
            <summary>The MediaPlayPause button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MediaPreviousTrack">
            <summary>The MediaPreviousTrack button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MediaStop">
            <summary>The MediaStop button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Multiply">
            <summary>The Multiply button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.N">
            <summary>The N button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumLock">
            <summary>The Num Lock button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad0">
            <summary>The Numeric keypad 0 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad1">
            <summary>The Numeric keypad 1 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad2">
            <summary>The Numeric keypad 2 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad3">
            <summary>The Numeric keypad 3 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad4">
            <summary>The Numeric keypad 4 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad5">
            <summary>The Numeric keypad 5 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad6">
            <summary>The Numeric keypad 6 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad7">
            <summary>The Numeric keypad 7 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad8">
            <summary>The Numeric keypad 8 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad9">
            <summary>The Numeric keypad 9 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.O">
            <summary>The O button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Oem8">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemAuto">
            <summary>The OEM Auto button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemBackslash">
            <summary>The OEM Angle Bracket or Backslash button on the RT 102 keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemClear">
            <summary>The Clear button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemCloseBrackets">
            <summary>The OEM Close Bracket button on a US standard keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemComma">
            <summary>The ',' button on a keyboard in any country/region in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemCopy">
            <summary>The OEM Copy button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemEnlW">
            <summary>The OEM Enlarge Window button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemMinus">
            <summary>The '-' button on a keyboard in any country/region in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemOpenBrackets">
            <summary>The OEM Open Bracket button on a US standard keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemPeriod">
            <summary>The '.' button on a keyboard in any country/region.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemPipe">
            <summary>The OEM Pipe button on a US standard keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemPlus">
            <summary>The '+' button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemQuestion">
            <summary>The OEM Question Mark button on a US standard keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemQuotes">
            <summary>The OEM Single/Double Quote button on a US standard keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemSemicolon">
            <summary>The OEM Semicolon button on a US standard keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemTilde">
            <summary>The OEM Tilde button on a US standard keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.P">
            <summary>The P button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Pa1">
            <summary>The PA1 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.PageDown">
            <summary>The Page Down button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.PageUp">
            <summary>The Page Up button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Pause">
            <summary>The Pause button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Play">
            <summary>The Play button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Print">
            <summary>The Print button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.PrintScreen">
            <summary>The Print Screen button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ProcessKey">
            <summary>The IME Process button on a keyboard in Windows 95/98/ME/NT 4.0/2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Q">
            <summary>The Q button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.R">
            <summary>The R button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Right">
            <summary>The Right Arrow button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightAlt">
            <summary>The Right Alt button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightControl">
            <summary>The Right Control button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightShift">
            <summary>The Right Shift button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightWindows">
            <summary>The Right Windows button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.S">
            <summary>The S button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Scroll">
            <summary>The Scroll Lock button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Select">
            <summary>The Select button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.SelectMedia">
            <summary>The Select Media button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Separator">
            <summary>The Separator button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Sleep">
            <summary>The Computer Sleep button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Space">
            <summary>The Space bar on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Subtract">
            <summary>The Subtract button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.T">
            <summary>The T button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Tab">
            <summary>The Tab button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.U">
            <summary>The U button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Up">
            <summary>The Up Arrow button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.V">
            <summary>The V button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.VolumeDown">
            <summary>The Volume Down button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.VolumeMute">
            <summary>The Volume Mute button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.VolumeUp">
            <summary>The Volume Up button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.W">
            <summary>The W button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.X">
            <summary>The X button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Y">
            <summary>The Y button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Z">
            <summary>The Z button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Zoom">
            <summary>The Zoom button on a keyboard.</summary>
        </member>
        <member name="T:StardewModdingAPI.SButtonExtensions">
            <summary>Provides extension methods for <see cref="T:StardewModdingAPI.SButton"/>.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButtonExtensions.ControllerOffset">
            <summary>The offset added to <see cref="T:Microsoft.Xna.Framework.Input.Buttons"/> values when converting them to <see cref="T:StardewModdingAPI.SButton"/> to avoid collisions with <see cref="T:Microsoft.Xna.Framework.Input.Keys"/> values.</summary>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.ToSButton(Microsoft.Xna.Framework.Input.Keys)">
            <summary>Get the <see cref="T:StardewModdingAPI.SButton"/> equivalent for the given button.</summary>
            <param name="key">The keyboard button to convert.</param>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.ToSButton(Microsoft.Xna.Framework.Input.Buttons)">
            <summary>Get the <see cref="T:StardewModdingAPI.SButton"/> equivalent for the given button.</summary>
            <param name="key">The controller button to convert.</param>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.ToSButton(StardewValley.InputButton)">
            <summary>Get the <see cref="T:StardewModdingAPI.SButton"/> equivalent for the given button.</summary>
            <param name="input">The Stardew Valley button to convert.</param>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.TryGetKeyboard(StardewModdingAPI.SButton,Microsoft.Xna.Framework.Input.Keys@)">
            <summary>Get the <see cref="T:Microsoft.Xna.Framework.Input.Keys"/> equivalent for the given button.</summary>
            <param name="input">The button to convert.</param>
            <param name="key">The keyboard equivalent.</param>
            <returns>Returns whether the value was converted successfully.</returns>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.TryGetController(StardewModdingAPI.SButton,Microsoft.Xna.Framework.Input.Buttons@)">
            <summary>Get the <see cref="T:Microsoft.Xna.Framework.Input.Buttons"/> equivalent for the given button.</summary>
            <param name="input">The button to convert.</param>
            <param name="button">The controller equivalent.</param>
            <returns>Returns whether the value was converted successfully.</returns>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.TryGetStardewInput(StardewModdingAPI.SButton,StardewValley.InputButton@)">
            <summary>Get the <see cref="T:StardewValley.InputButton"/> equivalent for the given button.</summary>
            <param name="input">The button to convert.</param>
            <param name="button">The Stardew Valley input button equivalent.</param>
            <returns>Returns whether the value was converted successfully.</returns>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.IsUseToolButton(StardewModdingAPI.SButton)">
            <summary>Get whether the given button is equivalent to <see cref="F:StardewValley.Options.useToolButton"/>.</summary>
            <param name="input">The button.</param>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.IsActionButton(StardewModdingAPI.SButton)">
            <summary>Get whether the given button is equivalent to <see cref="F:StardewValley.Options.actionButton"/>.</summary>
            <param name="input">The button.</param>
        </member>
        <member name="T:StardewModdingAPI.SemanticVersion">
            <summary>A semantic version with an optional release tag.</summary>
        </member>
        <member name="F:StardewModdingAPI.SemanticVersion.Version">
            <summary>The underlying semantic version implementation.</summary>
        </member>
        <member name="P:StardewModdingAPI.SemanticVersion.MajorVersion">
            <summary>The major version incremented for major API changes.</summary>
        </member>
        <member name="P:StardewModdingAPI.SemanticVersion.MinorVersion">
            <summary>The minor version incremented for backwards-compatible changes.</summary>
        </member>
        <member name="P:StardewModdingAPI.SemanticVersion.PatchVersion">
            <summary>The patch version for backwards-compatible bug fixes.</summary>
        </member>
        <member name="P:StardewModdingAPI.SemanticVersion.PrereleaseTag">
            <summary>An optional prerelease tag.</summary>
        </member>
        <member name="P:StardewModdingAPI.SemanticVersion.BuildMetadata">
            <summary>Optional build metadata. This is ignored when determining version precedence.</summary>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="majorVersion">The major version incremented for major API changes.</param>
            <param name="minorVersion">The minor version incremented for backwards-compatible changes.</param>
            <param name="patchVersion">The patch version for backwards-compatible bug fixes.</param>
            <param name="prerelease">An optional prerelease tag.</param>
            <param name="build">Optional build metadata. This is ignored when determining version precedence.</param>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="version">The semantic version string.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="version"/> is null.</exception>
            <exception cref="T:System.FormatException">The <paramref name="version"/> is not a valid semantic version.</exception>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.#ctor(System.Version)">
            <summary>Construct an instance.</summary>
            <param name="version">The assembly version.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="version"/> is null.</exception>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.#ctor(StardewModdingAPI.ISemanticVersion)">
            <summary>Construct an instance.</summary>
            <param name="version">The underlying semantic version implementation.</param>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.IsPrerelease">
            <summary>Whether this is a prerelease version.</summary>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.CompareTo(StardewModdingAPI.ISemanticVersion)">
            <summary>Get an integer indicating whether this version precedes (less than 0), supersedes (more than 0), or is equivalent to (0) the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="other"/> value is null.</exception>
            <remarks>The implementation is defined by Semantic Version 2.0 (https://semver.org/).</remarks>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.IsOlderThan(StardewModdingAPI.ISemanticVersion)">
            <summary>Get whether this version is older than the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.IsOlderThan(System.String)">
            <summary>Get whether this version is older than the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
            <exception cref="T:System.FormatException">The specified version is not a valid semantic version.</exception>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.IsNewerThan(StardewModdingAPI.ISemanticVersion)">
            <summary>Get whether this version is newer than the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.IsNewerThan(System.String)">
            <summary>Get whether this version is newer than the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
            <exception cref="T:System.FormatException">The specified version is not a valid semantic version.</exception>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.IsBetween(StardewModdingAPI.ISemanticVersion,StardewModdingAPI.ISemanticVersion)">
            <summary>Get whether this version is between two specified versions (inclusively).</summary>
            <param name="min">The minimum version.</param>
            <param name="max">The maximum version.</param>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.IsBetween(System.String,System.String)">
            <summary>Get whether this version is between two specified versions (inclusively).</summary>
            <param name="min">The minimum version.</param>
            <param name="max">The maximum version.</param>
            <exception cref="T:System.FormatException">One of the specified versions is not a valid semantic version.</exception>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.Equals(StardewModdingAPI.ISemanticVersion)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.ToString">
            <summary>Get a string representation of the version.</summary>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.TryParse(System.String,StardewModdingAPI.ISemanticVersion@)">
            <summary>Parse a version string without throwing an exception if it fails.</summary>
            <param name="version">The version string.</param>
            <param name="parsed">The parsed representation.</param>
            <returns>Returns whether parsing the version succeeded.</returns>
        </member>
        <member name="T:StardewModdingAPI.Translation">
            <summary>A translation string with a fluent API to customise it.</summary>
        </member>
        <member name="F:StardewModdingAPI.Translation.PlaceholderText">
            <summary>The placeholder text when the translation is <c>null</c> or empty, where <c>{0}</c> is the translation key.</summary>
        </member>
        <member name="F:StardewModdingAPI.Translation.Locale">
            <summary>The locale for which the translation was fetched.</summary>
        </member>
        <member name="F:StardewModdingAPI.Translation.Text">
            <summary>The underlying translation text.</summary>
        </member>
        <member name="F:StardewModdingAPI.Translation.Placeholder">
            <summary>The value to return if the translations is undefined.</summary>
        </member>
        <member name="P:StardewModdingAPI.Translation.Key">
            <summary>The original translation key.</summary>
        </member>
        <member name="M:StardewModdingAPI.Translation.#ctor(System.String,System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="locale">The locale for which the translation was fetched.</param>
            <param name="key">The translation key.</param>
            <param name="text">The underlying translation text.</param>
        </member>
        <member name="M:StardewModdingAPI.Translation.Default(System.String)">
            <summary>Replace the text if it's <c>null</c> or empty. If you set a <c>null</c> or empty value, the translation will show the fallback "no translation" placeholder (see <see cref="M:StardewModdingAPI.Translation.UsePlaceholder(System.Boolean)"/> if you want to disable that). Returns a new instance if changed.</summary>
            <param name="default">The default value.</param>
        </member>
        <member name="M:StardewModdingAPI.Translation.UsePlaceholder(System.Boolean)">
            <summary>Whether to return a "no translation" placeholder if the translation is <c>null</c> or empty. Returns a new instance.</summary>
            <param name="use">Whether to return a placeholder.</param>
        </member>
        <member name="M:StardewModdingAPI.Translation.Tokens(System.Object)">
            <summary>Replace tokens in the text like <c>{{value}}</c> with the given values. Returns a new instance.</summary>
            <param name="tokens">An object containing token key/value pairs. This can be an anonymous object (like <c>new { value = 42, name = "Cranberries" }</c>), a dictionary, or a class instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tokens"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:StardewModdingAPI.Translation.HasValue">
            <summary>Get whether the translation has a defined value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Translation.ToString">
            <summary>Get the translation text. Calling this method isn't strictly necessary, since you can assign a <see cref="T:StardewModdingAPI.Translation"/> value directly to a string.</summary>
        </member>
        <member name="M:StardewModdingAPI.Translation.op_Implicit(StardewModdingAPI.Translation)~System.String">
            <summary>Get a string representation of the given translation.</summary>
            <param name="translation">The translation key.</param>
        </member>
        <member name="M:StardewModdingAPI.Translation.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="locale">The locale for which the translation was fetched.</param>
            <param name="key">The translation key.</param>
            <param name="text">The underlying translation text.</param>
            <param name="placeholder">The value to return if the translations is undefined.</param>
        </member>
        <member name="T:StardewModdingAPI.Utilities.SDate">
            <summary>Represents a Stardew Valley date.</summary>
        </member>
        <member name="F:StardewModdingAPI.Utilities.SDate.Seasons">
            <summary>The internal season names in order.</summary>
        </member>
        <member name="P:StardewModdingAPI.Utilities.SDate.SeasonsInYear">
            <summary>The number of seasons in a year.</summary>
        </member>
        <member name="F:StardewModdingAPI.Utilities.SDate.DaysInSeason">
            <summary>The number of days in a season.</summary>
        </member>
        <member name="P:StardewModdingAPI.Utilities.SDate.Day">
            <summary>The day of month.</summary>
        </member>
        <member name="P:StardewModdingAPI.Utilities.SDate.Season">
            <summary>The season name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Utilities.SDate.Year">
            <summary>The year.</summary>
        </member>
        <member name="P:StardewModdingAPI.Utilities.SDate.DayOfWeek">
            <summary>The day of week.</summary>
        </member>
        <member name="P:StardewModdingAPI.Utilities.SDate.DaysSinceStart">
            <summary>The number of days since the game began (starting at 1 for the first day of spring in Y1).</summary>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.#ctor(System.Int32,System.String)">
            <summary>Construct an instance.</summary>
            <param name="day">The day of month.</param>
            <param name="season">The season name.</param>
            <exception cref="T:System.ArgumentException">One of the arguments has an invalid value (like day 35).</exception>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.#ctor(System.Int32,System.String,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="day">The day of month.</param>
            <param name="season">The season name.</param>
            <param name="year">The year.</param>
            <exception cref="T:System.ArgumentException">One of the arguments has an invalid value (like day 35).</exception>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.Now">
            <summary>Get the current in-game date.</summary>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.AddDays(System.Int32)">
            <summary>Get a new date with the given number of days added.</summary>
            <param name="offset">The number of days to add.</param>
            <returns>Returns the resulting date.</returns>
            <exception cref="T:System.ArithmeticException">The offset would result in an invalid date (like year 0).</exception>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.ToString">
            <summary>Get a string representation of the date. This is mainly intended for debugging or console messages.</summary>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.Equals(StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether this instance is equal to another.</summary>
            <param name="other">The other value to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.Equals(System.Object)">
            <summary>Get whether this instance is equal to another.</summary>
            <param name="obj">The other value to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.GetHashCode">
            <summary>Get a hash code which uniquely identifies a date.</summary>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.op_Equality(StardewModdingAPI.Utilities.SDate,StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether one date is equal to another.</summary>
            <param name="date">The base date to compare.</param>
            <param name="other">The other date to compare.</param>
            <returns>The equality of the dates</returns>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.op_Inequality(StardewModdingAPI.Utilities.SDate,StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether one date is not equal to another.</summary>
            <param name="date">The base date to compare.</param>
            <param name="other">The other date to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.op_GreaterThan(StardewModdingAPI.Utilities.SDate,StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether one date is more than another.</summary>
            <param name="date">The base date to compare.</param>
            <param name="other">The other date to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.op_GreaterThanOrEqual(StardewModdingAPI.Utilities.SDate,StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether one date is more than or equal to another.</summary>
            <param name="date">The base date to compare.</param>
            <param name="other">The other date to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.op_LessThanOrEqual(StardewModdingAPI.Utilities.SDate,StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether one date is less than or equal to another.</summary>
            <param name="date">The base date to compare.</param>
            <param name="other">The other date to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.op_LessThan(StardewModdingAPI.Utilities.SDate,StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether one date is less than another.</summary>
            <param name="date">The base date to compare.</param>
            <param name="other">The other date to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.#ctor(System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="day">The day of month.</param>
            <param name="season">The season name.</param>
            <param name="year">The year.</param>
            <param name="allowDayZero">Whether to allow 0 spring Y1 as a valid date.</param>
            <exception cref="T:System.ArgumentException">One of the arguments has an invalid value (like day 35).</exception>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.IsDayZero(System.Int32,System.String,System.Int32)">
            <summary>Get whether a date represents 0 spring Y1, which is the date during the in-game intro.</summary>
            <param name="day">The day of month.</param>
            <param name="season">The season name.</param>
            <param name="year">The year.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.GetDayOfWeek(System.Int32)">
            <summary>Get the day of week for a given date.</summary>
            <param name="day">The day of month.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.GetDaysSinceStart(System.Int32,System.String,System.Int32)">
            <summary>Get the number of days since the game began (starting at 1 for the first day of spring in Y1).</summary>
            <param name="day">The day of month.</param>
            <param name="season">The season name.</param>
            <param name="year">The year.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.GetSeasonIndex(System.String)">
            <summary>Get a season index.</summary>
            <param name="season">The season name.</param>
            <exception cref="T:System.InvalidOperationException">The current season wasn't recognized.</exception>
        </member>
        <member name="T:StardewModdingAPI.Internal.ConsoleWriting.ColorfulConsoleWriter">
            <summary>Provides a wrapper for writing color-coded text to the console.</summary>
        </member>
        <member name="F:StardewModdingAPI.Internal.ConsoleWriting.ColorfulConsoleWriter.Colors">
            <summary>The console text color for each log level.</summary>
        </member>
        <member name="F:StardewModdingAPI.Internal.ConsoleWriting.ColorfulConsoleWriter.SupportsColor">
            <summary>Whether the current console supports color formatting.</summary>
        </member>
        <member name="M:StardewModdingAPI.Internal.ConsoleWriting.ColorfulConsoleWriter.#ctor(StardewModdingAPI.Toolkit.Utilities.Platform)">
            <summary>Construct an instance.</summary>
            <param name="platform">The target platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Internal.ConsoleWriting.ColorfulConsoleWriter.#ctor(StardewModdingAPI.Toolkit.Utilities.Platform,StardewModdingAPI.Internal.ConsoleWriting.ColorSchemeConfig)">
            <summary>Construct an instance.</summary>
            <param name="platform">The target platform.</param>
            <param name="colorConfig">The colors to use for text written to the SMAPI console.</param>
        </member>
        <member name="M:StardewModdingAPI.Internal.ConsoleWriting.ColorfulConsoleWriter.WriteLine(System.String,StardewModdingAPI.Internal.ConsoleWriting.ConsoleLogLevel)">
            <summary>Write a message line to the log.</summary>
            <param name="message">The message to log.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:StardewModdingAPI.Internal.ConsoleWriting.ColorfulConsoleWriter.GetDefaultColorSchemeConfig(StardewModdingAPI.Internal.ConsoleWriting.MonitorColorScheme)">
            <summary>Get the default color scheme config for cases where it's not configurable (e.g. the installer).</summary>
            <param name="useScheme">The default color scheme ID to use, or <see cref="F:StardewModdingAPI.Internal.ConsoleWriting.MonitorColorScheme.AutoDetect"/> to select one automatically.</param>
            <remarks>The colors here should be kept in sync with the SMAPI config file.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Internal.ConsoleWriting.ColorfulConsoleWriter.TestColorSupport">
            <summary>Test whether the current console supports color formatting.</summary>
        </member>
        <member name="M:StardewModdingAPI.Internal.ConsoleWriting.ColorfulConsoleWriter.GetConsoleColorScheme(StardewModdingAPI.Toolkit.Utilities.Platform,StardewModdingAPI.Internal.ConsoleWriting.ColorSchemeConfig)">
            <summary>Get the color scheme to use for the current console.</summary>
            <param name="platform">The target platform.</param>
            <param name="colorConfig">The colors to use for text written to the SMAPI console.</param>
        </member>
        <member name="M:StardewModdingAPI.Internal.ConsoleWriting.ColorfulConsoleWriter.IsDark(System.ConsoleColor)">
            <summary>Get whether a console color should be considered dark, which is subjectively defined as 'white looks better than black on this text'.</summary>
            <param name="color">The color to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Internal.ConsoleWriting.ColorSchemeConfig">
            <summary>The console color scheme options.</summary>
        </member>
        <member name="P:StardewModdingAPI.Internal.ConsoleWriting.ColorSchemeConfig.UseScheme">
            <summary>The default color scheme ID to use, or <see cref="F:StardewModdingAPI.Internal.ConsoleWriting.MonitorColorScheme.AutoDetect"/> to select one automatically.</summary>
        </member>
        <member name="P:StardewModdingAPI.Internal.ConsoleWriting.ColorSchemeConfig.Schemes">
            <summary>The available console color schemes.</summary>
        </member>
        <member name="T:StardewModdingAPI.Internal.ConsoleWriting.ConsoleLogLevel">
            <summary>The log severity levels.</summary>
        </member>
        <member name="F:StardewModdingAPI.Internal.ConsoleWriting.ConsoleLogLevel.Trace">
            <summary>Tracing info intended for developers.</summary>
        </member>
        <member name="F:StardewModdingAPI.Internal.ConsoleWriting.ConsoleLogLevel.Debug">
            <summary>Troubleshooting info that may be relevant to the player.</summary>
        </member>
        <member name="F:StardewModdingAPI.Internal.ConsoleWriting.ConsoleLogLevel.Info">
            <summary>Info relevant to the player. This should be used judiciously.</summary>
        </member>
        <member name="F:StardewModdingAPI.Internal.ConsoleWriting.ConsoleLogLevel.Warn">
            <summary>An issue the player should be aware of. This should be used rarely.</summary>
        </member>
        <member name="F:StardewModdingAPI.Internal.ConsoleWriting.ConsoleLogLevel.Error">
            <summary>A message indicating something went wrong.</summary>
        </member>
        <member name="F:StardewModdingAPI.Internal.ConsoleWriting.ConsoleLogLevel.Alert">
            <summary>Important information to highlight for the player when player action is needed (e.g. new version available). This should be used rarely to avoid alert fatigue.</summary>
        </member>
        <member name="F:StardewModdingAPI.Internal.ConsoleWriting.ConsoleLogLevel.Critical">
            <summary>A critical issue that generally signals an immediate end to the application.</summary>
        </member>
        <member name="F:StardewModdingAPI.Internal.ConsoleWriting.ConsoleLogLevel.Success">
            <summary>A success message that generally signals a successful end to a task.</summary>
        </member>
        <member name="T:StardewModdingAPI.Internal.ConsoleWriting.MonitorColorScheme">
            <summary>A monitor color scheme to use.</summary>
        </member>
        <member name="F:StardewModdingAPI.Internal.ConsoleWriting.MonitorColorScheme.AutoDetect">
            <summary>Choose a color scheme automatically.</summary>
        </member>
        <member name="F:StardewModdingAPI.Internal.ConsoleWriting.MonitorColorScheme.DarkBackground">
            <summary>Use lighter text colors that look better on a black or dark background.</summary>
        </member>
        <member name="F:StardewModdingAPI.Internal.ConsoleWriting.MonitorColorScheme.LightBackground">
            <summary>Use darker text colors that look better on a white or light background.</summary>
        </member>
    </members>
</doc>
